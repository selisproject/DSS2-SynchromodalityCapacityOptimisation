// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using zAppDev.DotNet.Framework.Mvc;
using AppCode;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
namespace DSS2_SynchromodalityCapacityOptimisation.Web.Code.WebApi
{


    [RoutePrefix("api/DataSeed")]
    [WebApiThrottle.EnableThrottling()]
    public class DataSeedController : BasicApiCtrl
    {

        /// <summary>
        /// test notes
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("Orders")]
        [HttpPost]
        public void Orders([FromBody]DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS[] orders)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).Orders(orders,_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("InitRegionalAgents")]
        [HttpGet]
        public void InitRegionalAgents()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).InitRegionalAgents(_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("change")]
        [HttpGet]
        public void Change()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).Change(_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("googleAPI")]
        [HttpGet]
        public void TestGoogleAPI()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).TestGoogleAPI(_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("warehouse")]
        [HttpGet]
        public void initWarehouse()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).initWarehouse(_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("testordergenerator")]
        [HttpGet]
        public System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.Services.DataSeed.DataContracts.OrderWMSDTO> testOrderGenerator()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).testOrderGenerator(_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("testreflection")]
        [HttpGet]
        public System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.Services.DataSeed.DataContracts.PubMessageDTO> testReflection()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).testReflection(_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("TruckPosistions")]
        [HttpGet]
        public void TruckPosistions()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.DataSeedService()).TruckPosistions(_RequestSourceIp, _UserName);
        }
    }
}
