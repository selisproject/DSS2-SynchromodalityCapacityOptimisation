// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using zAppDev.DotNet.Framework.Mvc;
using AppCode;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
namespace DSS2_SynchromodalityCapacityOptimisation.Web.Code.WebApi
{


    [RoutePrefix("api/RA")]
    [WebApiThrottle.EnableThrottling()]
    public class RAController : BasicApiCtrl
    {

        /// <summary>
        ///
        /// </summary>
        /// <returns>RegionalAgentUser</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("GetRA")]
        [HttpGet]
        public DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.RegionalAgentUserDTO GetRA(string raname = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).GetRA(raname,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>OrderWMS</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("GetOrderWMS")]
        [HttpGet]
        public DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.OrderWMSDTO GetOrderWMS(int? id = 0)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).GetOrderWMS(id,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("SaveOrder")]
        [HttpPost]
        public void SaveOrder([FromBody]DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.OrderWMSDTO order)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).SaveOrder(order,_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>TruckDriver</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("GetTruckDriver")]
        [HttpGet]
        public DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.TruckDriverDTO GetTruckDriver(string username = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).GetTruckDriver(username,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("GetAllOrderWMS")]
        [HttpGet]
        public System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.OrderWMSDTO> GetAllOrderWMS()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).GetAllOrderWMS(_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("GetOrderByTruck")]
        [HttpGet]
        public System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.OrderWMSDTO> GetOrderByTruck(string plateNumber = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).GetOrderByTruck(plateNumber,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("GetOrderByAgency")]
        [HttpGet]
        public System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.Services.RA.DataContracts.OrderWMSDTO> GetOrderByAgency(string agencyCode = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS2_SynchromodalityCapacityOptimisation.Services.RAService()).GetOrderByAgency(agencyCode,_RequestSourceIp, _UserName);
            return result;
        }
    }
}
