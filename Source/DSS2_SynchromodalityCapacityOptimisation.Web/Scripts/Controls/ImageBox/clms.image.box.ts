/* Copyright (c) CLMS. All rights reserved.
 * Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
 * This source file was autogenerated by zAppDev(r). */
namespace Joove.Widgets {

    class JbImage extends BaseAngularProvider {
    }

    interface IJbImageScope extends IJooveScope {
        setImage(data);
        $uploadButton: any;
        download: (thumbnail: boolean, cb: Function) => void;
        upload: () => void;
        setNotFoundImage();
        setDefaultFoundImage: () => boolean;
        createUploadButton: () => void;
        showFullSize: () => void;      
        init: () => void;
        afterInit: () => void;
        fromServer: boolean;
        canUpload: boolean;
        maximizeOnClick: boolean;
        imageType: string;
        automaticAssignment: boolean;
        imageFolder: string;
        getDataToSend: () => any;
        fullSizeData: any;
        accept: string;
        maxSize: number;
    }

    function jbImage($timeout: ng.ITimeoutService, $interval: ng.IIntervalService, ngRadio: any): ng.IDirective {
        return {
            priority: 1001,
            restrict: "AE",
            require: "ngModel",
            scope: {
                model: "=ngModel",
                fromServer: "=jbFromServer",
                canUpload: "=?jbUpload",
                maximizeOnClick: "=?jbThumbnail",
                imageType: "=jbImageType", 
                source: "=?ngAttrSrc",
                imageFolder: "@jbImageFolder",
                accept: "=jbAccept",
            },
            link($scope: IJbImageScope, $element: JQuery, $attrs, ngModelCtrl) {
                if (Common.directiveScopeIsReady($element)) return;
				
                $element.on("load", function () {
                    $element.removeClass("broken-image");
                });

                $element.on("load", function () {
                    $element.removeClass("broken-image");
                });

                $element.on("error", function () {
                    $element.addClass("broken-image");
                });

                Common.setDirectiveScope($element, $scope);

                const name = Core.getElementName($element);
      
                $scope.$uploadButton = null;

                $scope.getDataToSend = (): any => {
                    var model = Common.getModel();
                    return Core.prepareDataForFileAction($element, model);
                }

                $scope.download = (thumbnail: boolean, cb: Function) => {                    
                    const postData = {
                        model: $scope.getDataToSend(),
                        indexes: Common.getIndexesOfControl($element).key,
                        useThumbnail: thumbnail
                    };
                    
                    Core.executeControllerAction(Core.getControllerForElement($element, false),
                        name + "_Download",
                        "POST",
                        [],
                        postData,
                        null,
                        data => { cb && cb(data); },
                        null,
                        null,
                        data => { console.log("Error loading image!", data); });
                };

                $scope.upload = () => {
                    const postData = $scope.getDataToSend();

                    const files = $scope.$uploadButton.get(0).files;

                    if ($scope.maxSize != null && $scope.maxSize > 0) {
                        for (let i = 0; i < files.length; i++) {
                            const file = files[0];
                           
                            if (file.size > $scope.maxSize) {                                
                                const msg = window._resourcesManager.getTooLargeFileMessage(file.name, file.size, $scope.maxSize);
                                window._popUpManager.error("", msg);
                                return;
                            }
                        }
                    }

                    Core.uploadFile({
                        files: files,
                        withProgressBar: false,
                        model: postData,
                        indexesKey: Common.getIndexesOfControl($element).key,
                        $element: $element,
                        onSuccess(data) {
                            $scope.fullSizeData = null;

                            if (data.Type != "FileUpload") return;
                         
                            if (data.Legacy == true) {
                                $scope.model = data.Data.FileName;
                            }
                            else {                                
                                $scope.model = data;
                            }

                            $scope.setImage(data.ImageData);
                            $scope.$apply();
                            
                        },
                        onError: () => {
                            $scope.setNotFoundImage();
                        }
                    });
                }

                $scope.setImage = imageData => {
                    if (imageData == null || imageData.length == null || imageData.length === 0) {
                        $scope.setNotFoundImage();
					}
                    else {  
                        const previousImage: any = $element.get(0);
                        const previousBroken = $element.hasClass("broken-image");
                        const previousIncomplete = previousImage.complete === false;
                        const previousSrc = previousImage.src;

                        $element.attr("src", `data:image/jpeg;base64,${imageData}`);

                        setTimeout(() => {

                            if (previousIncomplete == true || previousBroken == true) { return; }
                            const hadImage = (previousSrc && previousSrc.trim && previousSrc.trim().length > 0);
                            if (hadImage == false) { return; }

                            const currentImage: any = $element.get(0);
                            const currentBroken = $element.hasClass("broken-image");
                            if (currentImage.complete === false || currentBroken == true) { return; }

                            if (previousSrc != currentImage.src) {
                                Joove.Core.onChange(currentImage, null, false);
                            }
                        }, 50);
                    }
                }

                $scope.createUploadButton = () => {
                    const uniqTempId = Joove.Common.createRandomId(25);
                    const $container = $(`<div class="image_upload_button"></div>`);

                    if ($scope.accept == null || $scope.accept.trim() == "") {
                        $scope.accept = "image/*";
                    }

                    $scope.$uploadButton = $(`<input type='file' accept="${$scope.accept}" jb-id='${name}UploadButton' id='${uniqTempId}'/>`);
                    $scope.$label = $(`<label for="${uniqTempId}"><span class="fileattachment_progress"><span class="fileattachment_progress_inner"></span></span></label>`);
                    $scope.$labelContent = $(`<span class="fileattachment_content">${window._resourcesManager.getImageUploadTitle()}</span>`);
                    $scope.$label.prepend($scope.$labelContent);

                    $container.append($scope.$uploadButton);
                    $container.append($scope.$label);

                    $element.after($container);

                    $scope.$uploadButton.on("change", $scope.upload);
                }

                //This will fix those images that have a harcoded source (i.e. filesystem image in the form of src='/Resources/MyImage.png'), 
                //but the Image itself is missing
                $element.bind("error", function () {
                    $scope.setNotFoundImage();
                });

                //Set the Default image, if its was given
                $scope.setDefaultFoundImage = () : boolean => {
                    let defaultPath = $element.attr("data-default-image") || "";
                    if (defaultPath.trim && defaultPath.trim() != "") {
                        $element.attr("src", defaultPath);
                        return true;
                    }
                    return false;
                }

                //Set the Default image, if given. Otherwise, set the hardcoded "Not Found" one
                $scope.setNotFoundImage = () => {
                    if ($scope.setDefaultFoundImage() === false) {
                        var notFoundImageData = "";
                        $scope.setImage(notFoundImageData);
                    }
                }
                
                $scope.showFullSize = () => {                    
                    if ($scope.fullSizeData == null) {
                        $scope.download(false, (data) => {
                            $scope.fullSizeData = data;
                            $scope.showFullSize();
                        });
                    }
                    else {
                        var $fullImg = $(`<img src='data:image/jpeg;base64,${$scope.fullSizeData}' style='max-width: 100%; max-height: 100%; position: relative; top: 50%; transform: translateY(-50%);'/>`).appendTo("body");

                        window._popUpManager.showCustomPopUp({
                            name: $element.attr("jb-id"),
                            title: $element.attr("title"),
                            width: "85%",
                            height: "85%",
                            destroyOnHide: true,
                            $elementContent: $fullImg,
                            cancelButton: true,
                            onShowCallback: $popUp => {
                                $popUp.find("[jb-type='ModalBody']").css("text-align", "center");
                            },
                            dismissible: true
                        });                     
                    }
                }

                $scope.afterInit = () => {
                    if ($scope.canUpload == true) {
                        $scope.createUploadButton();
                    }

                    if ($scope.maximizeOnClick == true) {
                        $element.on("click",
                            () => {
                                $scope.showFullSize();
                            });
                    }
                }

                $scope.init = () => {                                  
                    if ($scope.fromServer == true) {
                        $scope.setNotFoundImage();

                        var hasFolder = $scope.imageFolder != null && $scope.imageFolder.trim() != "";
                        var hasModel = $scope.model != null && $scope.model.trim != null && $scope.model.trim() != "";

                        //If serving from FileSystem, lets get the image's URL and get on with it
                        if ($scope.imageType == "filesystem" && hasModel === true && hasFolder === true) {
                            let folder = $scope.imageFolder;
                            let defaultPath = $element.attr("data-default-image") || "";
                            $element.attr("src", `${window._context.siteRoot}${window._context.currentController}/DownloadFileByPath?path=${folder}${$scope.model}&defaultPath=${defaultPath}`);
                        }
                        else {
                            var initInterval = setInterval(() => {
                                if (Common.parentGridsAreReady($element) === true) {
                                    clearInterval(initInterval);

                                    new ElementViewPortObserver({
                                        $element: $element,
                                        interval: 1000,
                                        stopWhenEnters: true,
                                        onEnter: () => {
                                            $scope.download(true, (data) => {
                                                $scope.setImage(data);
                                            });
                                        }
                                    }).start();                                    
                                }
                            }, 100);
                        }                     
                    }

                    $scope.afterInit();
                }
                
                $scope.init();

                Common.markDirectiveScopeAsReady($element);
            }
        };
    }

    angular
        .module("jbImage", [])
        .provider("jbImage", new JbImage())
        .directive("jbImage", ["$timeout", "$interval", "jbImage", jbImage]);

}
