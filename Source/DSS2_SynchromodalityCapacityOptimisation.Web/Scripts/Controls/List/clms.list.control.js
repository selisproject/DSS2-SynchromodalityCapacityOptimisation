/* Copyright (c) CLMS. All rights reserved.
 * Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
 * This source file was autogenerated by zAppDev(r). */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Joove;
(function (Joove) {
    var Widgets;
    (function (Widgets) {
        var listInstance = null;
        var listInstances = [];
        window._forceListRefresh = function (listId) {
            var list = getListInstanceById(listId);
            list.instance.status.startRow = 0;
            list.instance.status.selectedItemKeys = [];
            if (list.instance.isInitialized == true) {
                list.instance.updateData();
            }
            else {
                list.instance.enable();
            }
        };
        window._listSelectionClear = function (listId) {
            var list = getListInstanceById(listId);
            list.instance.clearSelectedItems();
        };
        window["_getListInstance"] = function (listId) {
            return getListInstanceById(listId);
        };
        window._listApplyPredefinedFilters = function (listId) {
            var list = getListInstanceById(listId);
            list.instance.applyPredefinedFilters();
        };
        window._listClearPredefinedFilters = function (listId) {
            $("[data-filter-for-list='" + listId + "']:not(.quick-filter)").val("");
            window._listApplyPredefinedFilters(listId);
        };
        function getListInstanceById(listId) {
            for (var i = 0; i < listInstances.length; i++) {
                if (listInstances[i].id === listId) {
                    return listInstances[i];
                }
            }
            return null;
        }
        var ListControlAsset = (function () {
            function ListControlAsset() {
            }
            ListControlAsset.GroupsDelimiter = " ";
            ListControlAsset.GroupsValueDelimiter = "/---/";
            ListControlAsset.GroupsValueSpace = "/___/";
            ListControlAsset.NullString = "(empty)";
            ListControlAsset.Errors = {
                UPDATE_DATA: { type: "UPDATE_DATA", message: "Could not update list data" },
                RESTORE_STATE: { type: "RESTORE_STATE", message: "Could not restore list state from session" },
                SAVE_STATE: { type: "SAVE_STATE", message: "Could not save list state to session" },
                UPDATE_AGGREGATORS: { type: "UPDATE_AGGREGATORS", message: "Could not update list aggregators" },
                LOAD_VIEWS_FROM_PROFILE: {
                    type: "LOAD_VIEWS_FROM_PROFILE",
                    message: "Could not load User defined Views from Profile"
                },
                SAVE_VIEW_TO_PROFILE: {
                    type: "SAVE_VIEW_TO_PROFILE",
                    message: "Could not save User defined View to Profile"
                },
                DELETE_VIEW_FROM_PROFILE: {
                    type: "DELETE_VIEW_FROM_PROFILE",
                    message: "Could not delete User defined View from Profile"
                },
                LOAD_RESOURCES: { type: "LOAD_RESOURCES", message: "Could not load list resources" },
                EXPORT: { type: "EXPORT", message: "Error during list export" },
                IMPORT: { type: "IMPORT", message: "Error during list import" }
            };
            ListControlAsset.Icons = {
                refresh: { bs: "glyphicon glyphicon-refresh", fa: "fa fa-refresh" },
                reset: { bs: "glyphicon glyphicon-repeat", fa: "fa fa-history" },
                prefs: { bs: "glyphicon glyphicon-list-alt", fa: "fa fa-list-alt" },
                filters: { bs: "glyphicon glyphicon-zoom-in", fa: "fa fa-search" },
                groups: { bs: "glyphicon glyphicon-paperclip", fa: "fa fa-group" },
                save: { bs: "glyphicon glyphicon-floppy-save", fa: "fa fa-save" },
                remove: { bs: "glyphicon glyphicon-floppy-remove", fa: "fa fa-trash" },
                quickFilter: { bs: "glyphicon glyphicon-filter", fa: "fa fa-filter" },
                search: { bs: "glyphicon glyphicon-search", fa: "fa fa-search" },
                'export': { bs: "glyphicon glyphicon-export", fa: "fa fa-cloud-download" },
                'import': { bs: "glyphicon glyphicon-import", fa: "fa fa-cloud-upload" },
                exportPdf: { bs: "glyphicon glyphicon-book", fa: "fa fa-file-pdf-o" },
                next: { bs: "glyphicon glyphicon-forward", fa: "" },
                prev: { bs: "glyphicon glyphicon-backward", fa: "" },
                first: { bs: "glyphicon glyphicon-fast-backward", fa: "" },
                last: { bs: "glyphicon glyphicon-fast-forward", fa: "" },
                clearAllFilters: { bs: "glyphicon glyphicon-eye-close", fa: "fa fa-eye-slash" },
                clearAllAggregators: { bs: "glyphicon glyphicon-remove-circle", fa: "fa fa-eye-slash" },
                menuItem: { bs: "glyphicon glyphicon-circle-arrow-right", fa: "fa fa-circle" },
                aggregator: { bs: "glyphicon glyphicon-dashboard", fa: "fa fa-dashboard" },
                cogs: { bs: "glyphicon glyphicon-cog", fa: "fa fa-cogs" },
                prevState: { bs: "glyphicon glyphicon-arrow-left", fa: "fa fa-circle" }
            };
            return ListControlAsset;
        }());
        Widgets.ListControlAsset = ListControlAsset;
        var ListControl = (function (_super) {
            __extends(ListControl, _super);
            function ListControl() {
                var _this = _super.call(this) || this;
                _this.detectedScrollBarSize = Joove.Common.getScrollbarSize();
                _this.scrollbarSize = _this.detectedScrollBarSize > 0 ? _this.detectedScrollBarSize : 17;
                listInstance = _this;
                _this.MAX_ROWS = 10000;
                _this.errorOccured = false;
                _this.viewsCache = null;
                _this.resources = {};
                _this.refreshDimetionsCounter = 0;
                _this.focusOnElement = "";
                _this.resizeTime = new Date(1, 1, 2000, 12, 0, 0);
                _this.resizeDelta = 200;
                _this.resizeTimeout = false;
                _this.isPreferencesMinimized = false;
                _this.isFiltersMinimized = false;
                _this.isGroupsMinimized = false;
                _this.isMobileMode = false;
                _this.hidingData = false;
                _this.requestIsPending = false;
                _this.status = {
                    currentPage: 0,
                    selectedItemKeys: [],
                    startRow: 0,
                    endRow: 0,
                    pageSize: 25,
                    totalRows: 0,
                    totalPages: 0,
                    filters: [],
                    orderBy: [],
                    groupBy: [],
                    columns: [],
                    aggregators: [],
                    currentView: null,
                    getGroupsClosed: false,
                    allRecordsSelected: false,
                    horizontalScrollPosition: 0,
                    verticalScrollPosition: 0
                };
                _this.isInitialized = false;
                _this.timeout = 60000;
                _this.defaultStatus = $.extend(true, {}, _this.status);
                _this.options = {
                    $container: null,
                    selectedRowClass: "selected-row",
                    hoverRowClass: "active",
                    showRowNumbers: true,
                    usePopUpsForPreferences: false,
                    pagerPosition: "TOP",
                    useContextMenuForRowActions: true,
                    runRefreshDimentionsAtIntervals: true,
                    refreshDimentionsInterval: 1000,
                    maxIterationsForRefreshDimentions: 5
                };
                return _this;
            }
            ListControl.prototype.init = function (element, options) {
                var _this = this;
                this.options = $.extend(this.options, options);
                this.options.$container = $(element);
                this.elementId = $(element).attr("jb-id");
                this.serverSideElementId = Joove.Core.getElementName($(element));
                this.$predefinedFiltersFieldSet = $("[data-filter-for-list='" + this.elementId + "']:not(.quick-filter)")
                    .eq(0)
                    .closest("[jb-type='FieldSet']");
                this.resources = window._resourcesManager.getListResources();
                this.addToListInstances();
                this.initializeDatepickerPlugIn();
                setTimeout(function () {
                    var shouldDisable = _this.$predefinedFiltersFieldSet.is(":visible") === false &&
                        $(element).is(":visible") === false;
                    $(element).toggleClass("list-disabled", shouldDisable);
                    if ($(element).hasClass("list-disabled") || _this.options.isPickList)
                        return;
                    _this.enable();
                }, 100);
            };
            ListControl.prototype.enable = function (selectedKeys) {
                var _this = this;
                Joove.Common.setNumberLocalizationSettings();
                this.initiallySelectedKeys = selectedKeys;
                if (this.isInitialized === false) {
                    this.showInitializationLoadingTimeout = window.setTimeout(function () {
                        _this.createInitializationLoadingElement();
                    });
                    $(window).resize(function () {
                        if (_this.options.$container.css("opacity") == 0)
                            return;
                        _this.onResize();
                    });
                    this.onResize();
                    this.initPredefinedFiltersListeners();
                    this.loadColumnInfo(function () {
                        _this.loadViewsFromProfile(function () {
                            var savedState = _this.getStateFromLocalStorage();
                            if (typeof (savedState) != "undefined" && savedState != null) {
                                _this.status = savedState;
                                _this.status.pageSize = _this.options.pageSize;
                            }
                            else {
                                _this.getPredefinedAggregators();
                                _this.loadDefaultViewOnInit();
                            }
                            if (_this.options.waitForPredefinedFilters !== false) {
                                _this.showOnlyPredefinedFiltersFieldSet();
                                return;
                            }
                            _this.updateData({ refreshHeader: false, selectedKeys: selectedKeys });
                            _this.updateAggregatorsData();
                            var updateScrollPosition = window.setInterval(function () {
                                if (_this.$listHorizontalScrollbar != null && _this.$listVerticalScrollbar != null) {
                                    _this.$listHorizontalScrollbar.find(".scrollbar-content-wrapper")
                                        .scrollLeft(_this.status.horizontalScrollPosition);
                                    _this.$listVerticalScrollbar.find(".scrollbar-content-wrapper")
                                        .scrollTop(_this.status.verticalScrollPosition);
                                    window.clearInterval(updateScrollPosition);
                                }
                            }, 100);
                            _this.isInitialized = true;
                        });
                    });
                }
                else {
                    if (selectedKeys != null) {
                        this.status.selectedItemKeys = selectedKeys;
                    }
                    if (this.options.isPickList && this.options.excludeSelected) {
                        this.status.allRecordsSelected = false;
                    }
                    this.showControl();
                    this.refreshDimensions();
                }
            };
            ListControl.prototype.loadColumnInfo = function (cb) {
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                var columnInfoVariableName = this.options.isPickList
                    ? $controlInstace.attr("jb-id")
                    : this.serverSideElementId;
                var data = window[columnInfoVariableName + "_ColumnInfo"];
                for (var i = 0; i < data.length; i++) {
                    var current = data[i];
                    this.status.columns.push(new Widgets.ListControlColumn({
                        name: current.name,
                        caption: window._resourcesManager.getListColumnCaption($controlInstace, current.name, this.options.isPickList),
                        dataType: current.mambaDataType,
                        groupable: current.groupable,
                        searchable: current.searchable,
                        orderable: current.orderable,
                        editable: current.editable,
                        style: current.style,
                        classes: current.classes,
                        itemType: current.itemType,
                        importable: current.importable,
                        supportsAggregators: current.supportsAggregators,
                        formatting: current.formatting,
                        isVisible: typeof (this.options.hiddenColumns) == "undefined" ||
                            this.options.hiddenColumns.indexOf(current.name) === -1
                    }));
                }
                if (cb)
                    cb();
            };
            ListControl.prototype.addToListInstances = function () {
                for (var i = 0; i < listInstances.length; i++) {
                    if (listInstances[i].id === this.elementId)
                        return;
                }
                listInstances.push({
                    id: this.elementId,
                    instance: this
                });
            };
            ListControl.prototype.goBackToClosedGroups = function () {
                this.toggleAllGroupsActivation(true);
                this.clearClosedGroupItemsFilters(true);
                this.status.getGroupsClosed = true;
                this.openedGroups = [];
                this.updateData({ refreshHeader: false });
            };
            ListControl.prototype.listHasPredefinedView = function () {
                return this.viewsCache != null &&
                    this.viewsCache.DefaultView != null &&
                    this.viewsCache.DefaultView.length > 0;
            };
            ListControl.prototype.loadDefaultViewOnInit = function () {
                try {
                    if (this.listHasPredefinedView()) {
                        for (var i = 0; i < this.viewsCache.Views.length; i++) {
                            var view = this.viewsCache.Views[i];
                            if (view.ViewName !== this.viewsCache.DefaultView)
                                continue;
                            var statusToLoad = JSON.parse(view.SerializedStatus);
                            this.status = statusToLoad;
                            this.status.currentView = view.ViewName;
                            this.status.startRow = 0;
                        }
                    }
                    else {
                        this.status.pageSize = this.options.pageSize;
                        if (this.options.predefinedGroups != null) {
                            this.status.groupBy = [];
                            this.applyPredefinedGrouping();
                        }
                    }
                }
                catch (e) {
                }
            };
            ListControl.prototype.applyPredefinedGrouping = function () {
                for (var i = 0; i < this.options.predefinedGroups.length; i++) {
                    var columnName = this.options.predefinedGroups[i].column;
                    var state = this.options.predefinedGroups[i].state;
                    var column = this.getColumnInfoByName(columnName);
                    var groupInfo = new Widgets.ListGroupByInfo(column, state);
                    this.status.groupBy.push(groupInfo);
                }
            };
            ListControl.prototype.getPageSize = function () {
                if (this.options.userCanSelectPageSize !== false) {
                    return parseInt(String(this.options.pageSize));
                }
                else if (this.options.isPaged === false) {
                    return this.MAX_ROWS;
                }
                return this.status.pageSize;
            };
            ListControl.prototype.getQueryStringParameters = function () {
                "use strict";
                var url = window.location.href.split("?")[1];
                return url == null ? "" : "&" + url;
            };
            ListControl.prototype.prepareRequestParameters = function (exportOptions) {
                if (typeof (exportOptions) == "undefined")
                    exportOptions = {};
                if (typeof (exportOptions.type) == "undefined")
                    exportOptions.type = "";
                if (typeof (exportOptions.range) == "undefined")
                    exportOptions.exportRange = "";
                if (typeof (exportOptions.onlyGroups) == "undefined")
                    exportOptions.exportOnlyGroups = "";
                if (typeof (exportOptions.filename) == "undefined")
                    exportOptions.filename = "";
                if (typeof (exportOptions.includeGridLines) == "undefined")
                    exportOptions.includeGridLines = "";
                if (typeof (exportOptions.portraitOrientation) == "undefined")
                    exportOptions.portraitOrientation = "False";
                if (typeof (exportOptions.visibleColumns) == "undefined")
                    exportOptions.visibleColumns = [];
                if (typeof (exportOptions.groupColor) == "undefined")
                    exportOptions.groupColor = null;
                if (typeof (exportOptions.headerColor) == "undefined")
                    exportOptions.headerColor = null;
                if (typeof (exportOptions.evenColor) == "undefined")
                    exportOptions.evenColor = null;
                if (typeof (exportOptions.oddColor) == "undefined")
                    exportOptions.oddColor = null;
                if (typeof (exportOptions.aggregateColor) == "undefined")
                    exportOptions.aggregateColor = null;
                if (typeof (exportOptions.nonGroupCount) == "undefined")
                    exportOptions.includeGridLines = "";
                return {
                    StartRow: this.status.startRow,
                    RowSize: this.getPageSize(),
                    Filters: this.status.filters,
                    OrderBy: this.status.orderBy,
                    GroupBy: this.status.groupBy,
                    Aggregators: this.status.getGroupsClosed || exportOptions.type !== ""
                        ? this.status.aggregators
                        : null,
                    GetGroupsClosed: this.status.getGroupsClosed,
                    handler: this.elementId,
                    exportOptions: exportOptions
                };
            };
            ListControl.prototype.prepareRequestUrl = function (opts) {
                console.log(this.options.url);
                var defaultUrlOptions = {
                    handler: this.elementId + "/GetData",
                    listName: this.elementId,
                    action: "",
                    rowSize: this.getPageSize(),
                    startRow: this.status.startRow,
                    viewName: ""
                };
                var urlOptions = {};
                $.extend(urlOptions, defaultUrlOptions, opts);
                return this.options.url +
                    "/" +
                    urlOptions.handler +
                    "?action=" +
                    urlOptions.action +
                    "&RowSize=" +
                    urlOptions.rowSize +
                    "&StartRow=" +
                    urlOptions.startRow +
                    "&ListName=" +
                    urlOptions.listName +
                    "&ViewName=" +
                    urlOptions.viewName +
                    this.getQueryStringParameters();
            };
            ListControl.prototype.prepareDatasourceRequestInfo = function () {
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                var request = new Joove.DatasourceRequest($controlInstace, this.status.startRow, this.getPageSize(), this.status.filters, this.status.orderBy, null, this.status.groupBy);
                if (this.options.isPickList && this.options.excludeSelected) {
                    request.setExludeKeys(this.initiallySelectedKeys);
                }
                return request;
            };
            ListControl.prototype.updateData = function (options) {
                var _this = this;
                this.showLoadingOverlay();
                this.hideListData();
                var focusOnSearch = this.$list == null &&
                    !this.options.waitForPredefinedFilters &&
                    this.options.standAlone !== false;
                var datasourceInfo = this.prepareDatasourceRequestInfo();
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                Joove.DatasourceManager.fetchDatasource($controlInstace, this.serverSideElementId, datasourceInfo, {
                    success: function (response) {
                        _this.data = response.Data;
                        _this.groups = response.Groups;
                        _this.ruleEvaluations = response.RuleEvaluations;
                        _this.status.totalRows = response.TotalRows;
                        _this.refreshList(options);
                        _this.hideLoadingOverlay();
                        _this.showListData();
                        if (focusOnSearch) {
                            _this.$listHeader.find(".global-search-input").focus();
                        }
                        else {
                            window.setTimeout(function () {
                                $(_this.focusOnElement).focus();
                                _this.focusOnElement = "";
                            }, 500);
                        }
                    },
                    error: function (data) {
                        _this.handleError(ListControlAsset.Errors.UPDATE_DATA, data);
                    }
                });
            };
            ListControl.prototype.getAggregatorsForColumn = function (column, type) {
                this.pushToAggregatorsStatus(new Widgets.ListAggregatorInfo(column, type));
                this.updateAggregatorsData();
            };
            ListControl.prototype.updateAggregatorsData = function () {
                var _this = this;
                var datasourceInfo = this.prepareDatasourceRequestInfo();
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                Joove.DatasourceManager.fetchDatasourceAggregators($controlInstace, this.serverSideElementId, datasourceInfo, this.status.aggregators, {
                    success: function (data) {
                        _this.hideLoadingOverlay();
                        if (_this.aggregatorsData == null)
                            _this.aggregatorsData = [];
                        if (_this.status.groupBy == null ||
                            _this.status.groupBy.length === 0) {
                            _this.consumeAggregatorsDataListMode(data);
                        }
                        else {
                            _this.consumeAggregatorsDataGroupMode(data);
                        }
                        if (_this.$list != null) {
                            _this.$list.find(".clear-all-aggregators")
                                .toggle(typeof (_this.status.aggregators) != "undefined" &&
                                _this.status.aggregators.length > 0);
                        }
                    },
                    complete: function () {
                        _this.updateControl({ refreshDimensions: true });
                    },
                    error: function (data) {
                        _this.handleError(ListControlAsset.Errors.UPDATE_AGGREGATORS, data);
                    }
                });
            };
            ListControl.prototype.consumeAggregatorsDataGroupMode = function (data) {
                this.parseAggregatorsOfGroup(data.Groups);
                this.createGroupAggregatorRows();
            };
            ListControl.prototype.parseAggregatorsOfGroup = function (group) {
                if (group == null)
                    return;
                if (typeof (group.Aggregates) != "undefined") {
                    for (var i = 0; i < group.Aggregates.length; i++) {
                        var currentAgg = group.Aggregates[i];
                        if (this.getColumnInfoByName(currentAgg.Column) == null)
                            continue;
                        this.pushToAggregatorsData({
                            column: currentAgg.Column,
                            value: currentAgg.Value,
                            type: currentAgg.Type,
                            formattedValue: currentAgg.ValueFormatted,
                            groupIdentifier: group.Identifier
                        });
                    }
                }
                if (typeof (group.SubGroups) != "undefined") {
                    for (var i = 0; i < group.SubGroups.length; i++) {
                        this.parseAggregatorsOfGroup(group.SubGroups[i]);
                    }
                }
            };
            ListControl.prototype.consumeAggregatorsDataListMode = function (data) {
                for (var i = 0; i < data.length; i++) {
                    this.pushToAggregatorsData({
                        column: data[i].Column,
                        value: data[i].Value,
                        type: data[i].Type,
                        formattedValue: data[i].ValueFormatted,
                        groupIdentifier: null
                    });
                }
                this.createRecordSetAggregators(true);
            };
            ListControl.prototype.pushToAggregatorsData = function (aggregator) {
                if (this.aggregatorsData == null)
                    this.aggregatorsData = [];
                var foundIndex = null;
                for (var i = 0; i < this.aggregatorsData.length; i++) {
                    if (this.aggregatorsData[i].column === aggregator.column &&
                        this.aggregatorsData[i].type === aggregator.type &&
                        this.aggregatorsData[i].groupIdentifier === aggregator.groupIdentifier) {
                        foundIndex = i;
                        break;
                    }
                }
                if (foundIndex != null) {
                    this.aggregatorsData[foundIndex].value = aggregator.value;
                    this.aggregatorsData[foundIndex].formattedValue = aggregator.formattedValue;
                }
                else {
                    this.aggregatorsData.push(aggregator);
                }
            };
            ListControl.prototype.pushToAggregatorsStatus = function (aggregator) {
                if (this.status.aggregators == null)
                    this.status.aggregators = [];
                this.removeFromAggregatorsStatus(aggregator);
                this.status.aggregators.push(aggregator);
            };
            ListControl.prototype.removeFromAggregatorsStatus = function (aggregator) {
                if (this.status.aggregators == null)
                    this.status.aggregators = [];
                var indexToSplice = -1;
                for (var i = 0; i < this.status.aggregators.length; i++) {
                    if (this.status.aggregators[i].column === aggregator.column &&
                        this.status.aggregators[i].type === aggregator.type) {
                        indexToSplice = i;
                        break;
                    }
                }
                if (indexToSplice === -1)
                    return;
                if (this.aggregatorsData != null) {
                    for (var j = this.aggregatorsData.length - 1; j >= 0; j--) {
                        if (this.aggregatorsData[j].column === aggregator.column &&
                            this.aggregatorsData[j].type === aggregator.type)
                            this.aggregatorsData.splice(j, 1);
                    }
                }
                this.status.aggregators.splice(indexToSplice, 1);
            };
            ListControl.prototype.getPredefinedAggregators = function () {
                if (this.options.predefinedAggregators == null || this.options.predefinedAggregators.length === 0)
                    return;
                for (var i = 0; i < this.options.predefinedAggregators.length; i++) {
                    var current = this.options.predefinedAggregators[i];
                    if (current.type == Joove.AggregatorTypes.SUM) {
                        current.type = 0;
                    }
                    else if (current.type == Joove.AggregatorTypes.AVERAGE) {
                        current.type = 1;
                    }
                    else if (current.type == Joove.AggregatorTypes.COUNT) {
                        current.type = 2;
                    }
                }
                this.status.aggregators = this.options.predefinedAggregators;
                this.updateAggregatorsData();
            };
            ListControl.prototype.loadViewsFromProfile = function (cb) {
                var _this = this;
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                Joove.Core.executeControllerActionNew({
                    action: "LoadListViews",
                    verb: "POST",
                    controller: Joove.Core.getControllerForElement($controlInstace),
                    postData: {
                        ControlName: this.elementId,
                    },
                    cb: function (response) {
                        if (response == null) {
                            response = { Data: { Views: [] } };
                        }
                        _this.viewsCache = response.Data;
                        cb();
                    },
                    onErrorCb: function (data) {
                        _this.viewsCache = { Views: [] };
                        cb();
                    }
                });
            };
            ListControl.prototype.saveViewToProfile = function (viewName, makeDefault) {
                var viewStatus = $.extend(true, {}, this.status);
                delete viewStatus.endRow;
                delete viewStatus.selectedItemKeys;
                delete viewStatus.allRecordsSelected;
                delete viewStatus.currentPage;
                delete viewStatus.totalPages;
                delete viewStatus.currentView;
                viewStatus.startRow = 0;
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                Joove.Core.executeControllerActionNew({
                    action: "SaveListView",
                    verb: "POST",
                    controller: Joove.Core.getControllerForElement($controlInstace),
                    postData: {
                        ControlName: this.elementId,
                        SerializedStatus: JSON.stringify(viewStatus),
                        ViewName: viewName,
                        SetAsDefault: makeDefault
                    },
                    cb: function (data) {
                    }
                });
            };
            ListControl.prototype.deleteViewFromProfile = function (viewName) {
                var _this = this;
                if (!confirm(this.resources.DeleteCurrentViewConfirmation))
                    return;
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                Joove.Core.executeControllerActionNew({
                    action: "DeleteListView",
                    verb: "POST",
                    controller: Joove.Core.getControllerForElement($controlInstace),
                    postData: {
                        ControlName: this.elementId,
                        ViewName: viewName,
                    },
                    cb: function (data) {
                        if (_this.$listHeader.find(".available-views:first option").length === 1) {
                            _this.$listHeader.find(".btn-list-reset").show();
                        }
                        _this.status.currentView = null;
                        _this.populateViewsDropDown();
                        _this.resetList(true);
                    }
                });
                this.viewsCache = null;
            };
            ListControl.prototype.getLocalStorageKey = function () {
                return this.options.parentForm + "_" + this.elementId + "_" + window._context.currentUsername + "_" + window.currentVersion;
            };
            ListControl.prototype.getStateFromLocalStorage = function () {
                try {
                    var stateSerialized = localStorage[this.getLocalStorageKey()];
                    if (stateSerialized == null)
                        return null;
                    var state = JSON.parse(stateSerialized);
                    if (this.status.columns
                        .length !==
                        state.columns.length)
                        return null;
                    for (var i = 0; i < state.columns.length; i++) {
                        var stored = state.columns[i];
                        var existing = this.getColumnInfoByName(stored.name);
                        if (existing == null ||
                            existing.caption !== stored.caption ||
                            existing.dataType !== stored.dataType ||
                            existing.groupable !== stored.groupable ||
                            existing.importable !== stored.importable ||
                            existing.orderable !== stored.orderable ||
                            existing.searchable !== stored.searchable ||
                            existing.style !== stored.style ||
                            existing.classes !== stored.classes ||
                            existing.itemType !== stored.itemType ||
                            existing.supportsAggregators !== stored.supportsAggregators) {
                            return null;
                        }
                    }
                    return state;
                }
                catch (e) {
                    console.error("Could not parse stored state!" + e);
                    return null;
                }
            };
            ListControl.prototype.saveStateToLocalStorage = function () {
                var viewStatus = $.extend(true, {}, this.status);
                viewStatus.selectedItemKeys = [];
                viewStatus.allRecordsSelected = false;
                localStorage[this.getLocalStorageKey()] = JSON.stringify(viewStatus);
            };
            ListControl.prototype.populateViewsDropDown = function () {
                var _this = this;
                if (this.viewsCache == null) {
                    this.loadViewsFromProfile(function () {
                        _this.populateViewsDropDown();
                    });
                    return;
                }
                var $dropDown = this.$listHeader.find(".available-views");
                var data = this.viewsCache || { Views: [] };
                $dropDown.empty();
                for (var i = 0; i < data.Views.length; i++) {
                    var current = data.Views[i];
                    var $option = $("<option></option>");
                    $option.text(current.ViewName);
                    $option.val(current.ViewName);
                    $option.data("status", current.SerializedStatus);
                    $dropDown.append($option);
                }
                var predefinedView = $("<option value='PREDEFINED'>" + this.resources.PredefinedView + "</option>")
                    .data("status", this.defaultStatus);
                $dropDown.prepend(predefinedView);
                $dropDown.val(this.status.currentView);
                if (this.status.currentView === "PREDEFINED" || this.status.currentView == null) {
                    this.$listHeader.find(".btn-remove-view").attr("disabled", "disabled");
                }
                else {
                    this.$listHeader.find(".btn-remove-view").removeAttr("disabled");
                }
            };
            ListControl.prototype.downloadCsvTemplate = function () {
                window.location.href = this.options.url + "/DownloadCsvTemplate_" + this.elementId;
            };
            ListControl.prototype.uploadCsvForImport = function (event) {
                var _this = this;
                $.ajax({
                    url: this.prepareRequestUrl({ handler: "UploadCsv_" + this.elementId }),
                    data: event.target.result,
                    method: "POST",
                    success: function (data) {
                        _this.showImportResults(data);
                    },
                    complete: function () {
                        _this.hideLoadingOverlay();
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        _this.handleError(ListControlAsset.Errors.IMPORT, jqXhr, textStatus, errorThrown);
                    },
                    timeout: 500000
                });
            };
            ListControl.prototype.showImportResults = function (results) {
                return;
            };
            ListControl.prototype.refreshList = function (options) {
                options = options || {};
                if (options.selectedKeys != null) {
                    this.status.selectedItemKeys = options.selectedKeys;
                }
                else {
                    this.status.selectedItemKeys = this.status.selectedItemKeys || [];
                }
                this.status.totalPages = Math.ceil(this.status.totalRows / this.status.pageSize);
                this.status.endRow = this.status.startRow + this.status.pageSize;
                this.groupsDataInfoArray = [];
                if (this.status.endRow > this.status.totalRows) {
                    this.status.endRow = this.status.totalRows;
                }
                this.status.currentPage = Math.ceil((this.status.endRow) / this.status.pageSize);
                if (this.options.isPaged === false && this.status.totalRows > this.MAX_ROWS) {
                    this.options.isPaged = true;
                    this.options.pageSize = this.MAX_ROWS;
                }
                if (this.$list == null) {
                    this.createListControl();
                    this.updateControl({
                        updateActionButtonVisibility: true,
                        refreshDimensions: true,
                        applyConditionalFormattings: true
                    });
                    if (this.options.isPickList !== true) {
                        this.removeInitializationLoadingElement();
                    }
                    this.showListData();
                    this.showControl();
                    return;
                }
                var updateOptions = {};
                if (options.refreshHeader !== false) {
                    updateOptions.createListHeader = true;
                    updateOptions.createListColumnHeader = true;
                }
                updateOptions.createListData = true;
                updateOptions.updateUiElements = true;
                updateOptions.createRecordSetAggregators = true;
                updateOptions.updateGroupAggregators = true;
                updateOptions.keepAggregatorsOfFullRecordSet = options.keepAggregatorsOfFullRecordSet === true;
                updateOptions.updateActionButtonVisibility = true;
                updateOptions.refreshDimensions = true;
                updateOptions.applyConditionalFormattings = true;
                this.updateControl(updateOptions);
                this.saveStateToLocalStorage();
                if (options.showControl === true) {
                    this.showControl();
                }
            };
            ListControl.prototype.createGroupsData = function () {
                var $newData = $("<div class='list-data-container'> \
                                <div class='list-data-wrapper'> \
                                <table class='list-data-table table'> \
                                    <tbody>\
                                    </tbody>\
                                </table>\
                                </div> \
                                <div class='row-num-border'></div> \
                            </div>");
                var $dataBody = $newData.find("tbody");
                this.groupsDataInfoArray = [];
                this.createGroup(this.groups, $dataBody, "", 0);
                if (this.$listDataContainer == null)
                    this.$listDataContainer = this.$list.find(".list-data-container");
                if (this.$listData == null)
                    this.$listData = this.$list.find(".list-data-wrapper");
                $newData.find(".list-data-table").toggleClass("table-striped", this.options.stripped !== false);
                this.$listDataContainer.replaceWith($newData);
                this.$listDataContainer = $newData;
                this.$listData = this.$listDataContainer.find(".list-data-wrapper");
                this.restoreGroups();
                this.scrollInnerContent(this.$listDataContainer);
                return $newData;
            };
            ListControl.prototype.refreshGroupsDataInfoArray = function () {
                var $groupHeaders = this.$listData.find("tr.group-header");
                this.groupsDataInfoArray = [];
                for (var i = 0; i < $groupHeaders.length; i++) {
                    var groupPath = $groupHeaders.eq(i).attr("data-group");
                    var info = new Widgets.ListGroupsDataInfo(groupPath);
                    $groupHeaders.eq(i).data("groupInfo", info);
                    this.groupsDataInfoArray.push(info);
                }
            };
            ListControl.prototype.createGroup = function (group, $target, groupPath, level) {
                var groupIdentifier = "";
                var $groupRow = $("<tr class='group-header active'></tr>");
                $groupRow.toggleClass("with-row-nums", this.options.showRowNumbers);
                if (group.Key !== "ROOT") {
                    $target.append($groupRow);
                    groupIdentifier = group.Column.Name +
                        ListControlAsset.GroupsValueDelimiter +
                        (group.Key != null ? group.Key.toString() : ListControlAsset.NullString)
                            .replace(new RegExp(" ", "g"), ListControlAsset.GroupsValueSpace);
                    if (groupPath.length > 0)
                        groupPath += ListControlAsset.GroupsDelimiter;
                    groupPath += groupIdentifier;
                    $groupRow.attr("data-group", groupPath);
                    $groupRow.attr("data-level", ++level);
                    var groupInfo = new Widgets.ListGroupsDataInfo(groupPath);
                    this.groupsDataInfoArray.push(groupInfo);
                    $groupRow.data("groupInfo", groupInfo);
                }
                var state = group.State === 0 ? "EXPANDED" : "COLLAPSED";
                for (var i = 0; i < group.SubGroups.length; i++) {
                    this.createGroup(group.SubGroups[i], $target, groupPath, level);
                }
                var colSpan = this.status.columns.length;
                if (this.options.showRowNumbers)
                    colSpan++;
                if (group.UniqueItemKeys == null)
                    group.UniqueItemKeys = [];
                var groupCollection = [];
                for (var i = 0; i < group.UniqueItemKeys.length; i++) {
                    groupCollection.push(this.findItemByUniqueKey(group.UniqueItemKeys[i]));
                }
                if (!this.status.getGroupsClosed) {
                    this.createDataRows(groupCollection, $target, groupPath, level);
                }
                if (group.UniqueItemKeys.length === 0 && group.SubGroups.length === 0) {
                    var $notFoundRow = this.createNotFoundRow();
                    if (groupPath.length > 0)
                        $notFoundRow.attr("data-group", groupPath);
                    $notFoundRow.addClass("group-row");
                    $target.append($notFoundRow);
                }
                if (group.Key !== "ROOT") {
                    var listColumn = this.getColumnInfoByName(group.Column.Name);
                    var groupInfo = this.getGroupInfo(group);
                    var icon = state === "COLLAPSED" ? "plus" : "minus";
                    var $groupRowContents = $("<td colspan='" + colSpan + "'>                                         <span class='group-toggle glyphicon glyphicon-" + icon + "-sign'></span>                                         <span class='group-caption'>" + listColumn.caption + ":</span>                                         <span class='group-key'>" + group.KeyFormatted + "</span>                                         <span class='display-group-items glyphicon glyphicon-resize-full' title='" + this.resources.DisplayGroupItems + "'></span>                                         <span class='group-details'>                                            <!-- <span class='group-items-count'>" + groupInfo.itemsCount + "</span>                                             <span class='group-items-count-caption'>Items</span> -->                                         </span>                                     </td>");
                    $groupRow.append($groupRowContents);
                    if (!this.status.getGroupsClosed) {
                        $groupRowContents.find(".display-group-items").remove();
                    }
                    if (this.status.getGroupsClosed && group.SubGroups.length === 0) {
                        $groupRowContents.find(".group-toggle").remove();
                        state = "COLLAPSED";
                    }
                    $groupRow.data("status", state);
                    $groupRow.data("initialState", state);
                    if (state === "COLLAPSED") {
                        this.hideGroup($groupRow);
                    }
                    else {
                        this.showGroup($groupRow);
                    }
                }
            };
            ListControl.prototype.createGroupAggregatorRows = function () {
                if (this.$listFooterContainer != null)
                    this.$listFooterContainer.find(".list-aggregators-row").remove();
                if (this.aggregatorsData == null)
                    return;
                var $groupHeaders = this.options.$container.find(".group-header[data-group]");
                for (var i = 0; i < $groupHeaders.length; i++) {
                    var $current = $groupHeaders.eq(i);
                    var groupIdentifier = $current.data("group");
                    $current.next(".group-aggregators-row").remove();
                    var rowCreationResult = this.createAggregatorsRow({
                        rowClass: "group-aggregators-row",
                        cellClass: "group-aggregators-cell",
                        currentPageRowsSelector: ".list-data-row.group-row[data-group~='" + groupIdentifier + "'], .list-data-row.group-row[data-group='" + groupIdentifier + "']",
                        aggregatorCaptionClass: "aggregator-caption",
                        aggregatorValueClass: "aggregator-value",
                        aggregatorContainerClass: "aggregator-container",
                        groupIdentifier: groupIdentifier,
                        groupMode: true,
                        showPageAggregators: false
                    });
                    var $row = rowCreationResult.$row;
                    var aggregatorsFound = rowCreationResult.aggregatorsFound;
                    if (aggregatorsFound === false)
                        continue;
                    $row.attr("data-level", $current.data("level"));
                    $row.attr("data-group", $current.data("group"));
                    $current.after($row);
                    if ($current.is(":visible"))
                        $row.show();
                }
            };
            ListControl.prototype.findItemByUniqueKey = function (key) {
                for (var i = 0; i < this.data.length; i++) {
                    if (this.data[i]._key === key)
                        return this.data[i];
                }
                return null;
            };
            ListControl.prototype.toggleGroup = function (groupToggleBtn) {
                var $groupToggleBtn = $(groupToggleBtn);
                var $groupRow = $groupToggleBtn.closest("tr");
                var groupStatus = $groupRow.data("status");
                var groupIdentifier = $groupRow.data("group");
                $groupRow.data("initialState", null);
                if (groupStatus === "EXPANDED") {
                    this.hideGroup($groupRow);
                }
                else {
                    this.showGroup($groupRow);
                }
                this.updateControl({ refreshDimensions: true });
            };
            ListControl.prototype.hideGroup = function ($groupRow, isNested) {
                var groupIdentifier = $groupRow.data("group");
                var groupLevel = $groupRow.data("level");
                $groupRow.data("status", "COLLAPSED");
                for (var i = 0; i < this.openedGroups.length; i++) {
                    if (this.openedGroups[i] === groupIdentifier) {
                        this.openedGroups.splice(i, 1);
                        break;
                    }
                }
                $groupRow.find(".group-toggle").addClass("glyphicon-plus-sign").removeClass("glyphicon-minus-sign");
                if (isNested === true)
                    $groupRow.hide();
                if (isNested === true)
                    $groupRow.next(".group-aggregators-row").hide();
                $groupRow.siblings(".group-row[data-group='" + groupIdentifier + "']").hide();
                var $nestedGroups = $groupRow
                    .siblings(".group-header[data-group~='" + groupIdentifier + "'][data-level='" + parseInt(groupLevel + 1) + "']");
                for (var i = 0; i < $nestedGroups.length; i++) {
                    this.hideGroup($nestedGroups.eq(i), true);
                }
            };
            ListControl.prototype.showGroup = function ($groupRow, doNotStore) {
                var groupIdentifier = $groupRow.data("group");
                var groupLevel = $groupRow.data("level");
                $groupRow.data("status", "EXPANDED");
                if (doNotStore !== true)
                    this.openedGroups.push(groupIdentifier);
                $groupRow.find(".group-toggle").removeClass("glyphicon-plus-sign").addClass("glyphicon-minus-sign");
                $groupRow.show();
                $groupRow.next(".group-aggregators-row").show();
                $groupRow.siblings(".group-row[data-group='" + groupIdentifier + "']").show();
                $groupRow
                    .siblings(".group-header[data-group~='" + groupIdentifier + "'][data-level='" + parseInt(groupLevel + 1) + "']")
                    .show();
                $groupRow
                    .siblings(".group-aggregators-row[data-group~='" + groupIdentifier + "'][data-level='" + parseInt(groupLevel + 1) + "']")
                    .show();
                var $nestedGroups = $groupRow
                    .siblings(".group-header[data-group~='" + groupIdentifier + "'][data-level='" + parseInt(groupLevel + 1) + "']");
                for (var i = 0; i < $nestedGroups.length; i++) {
                    var $group = $nestedGroups.eq(i);
                    if ($group.data("initialState") == null || $group.data("initialState") === "COLLAPSED")
                        continue;
                    this.showGroup($group);
                }
            };
            ListControl.prototype.restoreGroups = function () {
                for (var i = 0; i < this.openedGroups.length; i++) {
                    var $group = this.$listData.find(".group-header[data-group='" + this.openedGroups[i] + "']");
                    this.showGroup($group, true);
                }
            };
            ListControl.prototype.getGroupInfo = function (group) {
                var itemsCount = group.UniqueItemKeys.length;
                var groupsCount = group.SubGroups.length;
                for (var i = 0; i < groupsCount; i++) {
                    itemsCount += this.getGroupInfo(group.SubGroups[i]).itemsCount;
                }
                return {
                    itemsCount: itemsCount,
                    groupsCount: groupsCount
                };
            };
            ListControl.prototype.updateUiElements = function () {
                var groupMode = this.status.groupBy.length > 0;
                this.$listPager.find(".list-current-page").val(String(this.status.currentPage));
                this.$listPager.find(".data-total").text(this.applyFormattingToNumber(this.status.totalRows));
                var startRow = this.status.totalRows > 0 ? this.status.startRow + 1 : 0;
                this.$listPager.find(".data-start").text(startRow);
                this.$listPager.find(".data-end").text(this.status.endRow);
                this.$listPager.find(".select-page-size").val(String(this.status.pageSize));
                this.$listPager.find(".data-total-pages").text(this.applyFormattingToNumber(this.status.totalPages));
                if (this.status.currentPage <= 1) {
                    this.$listPager.find(".list-prev-page").attr("disabled", "disabled");
                }
                else {
                    this.$listPager.find(".list-prev-page").removeAttr("disabled");
                }
                if (this.status.currentPage == this.status.totalPages) {
                    this.$listPager.find(".list-next-page").attr("disabled", "disabled");
                }
                else {
                    this.$listPager.find(".list-next-page").removeAttr("disabled");
                }
                if (this.status.currentPage <= 1) {
                    this.$listPager.find(".list-first-page").attr("disabled", "disabled");
                }
                else {
                    this.$listPager.find(".list-first-page").removeAttr("disabled");
                }
                if (this.status.currentPage === this.status.totalPages) {
                    this.$listPager.find(".list-last-page").attr("disabled", "disabled");
                }
                else {
                    this.$listPager.find(".list-last-page").removeAttr("disabled");
                }
                this.$listHeader.find(".clear-all-filters").toggle(this.status.filters.length > 0);
                this.$listHeader.find(".clear-all-aggregators")
                    .toggle(typeof (this.status.aggregators) != "undefined" && this.status.aggregators.length > 0);
                if (this.filtersCreatedByGlobalSearch()) {
                    this.$listHeader.find(".global-search-input").val(this.status.filters[0].value);
                    this.$listHeader.find(".global-search-clear").show();
                }
                if (this.getGlobalFilterValue() !== null) {
                    this.$listHeader.find(".global-search-input").val(this.getGlobalFilterValue());
                    this.$listHeader.find(".global-search-clear").show();
                }
                var quickFiltersApplied = false;
                var $toggleQuickFiltersRowBtn = this.$listHeader.find(".toggle-quick-filters");
                for (var i = 0; i < this.status.columns.length; i++) {
                    var column = this.status.columns[i];
                    var quickFilterValues = this.getColumnQuickFiltersValue(column);
                    if (quickFilterValues.length === 0)
                        continue;
                    quickFiltersApplied = true;
                    var $input = this.$listColumnHeader.find(".column-quick-filter[data-column='" + column.name + "']")
                        .find(".quick-filter")
                        .eq(0);
                    $input.val(quickFilterValues.join(" "));
                    $input.siblings(".remove-quick-filter").removeClass("hidden");
                }
                if (quickFiltersApplied && $toggleQuickFiltersRowBtn.hasClass("expanded") === false)
                    $toggleQuickFiltersRowBtn.click();
                if (this.status.orderBy.length === 1) {
                    var firstOrderInfo = this.status.orderBy[0];
                    var $columnHeader = this.$listColumnHeader.find(".column-title[data-column='" + firstOrderInfo.column.name + "']")
                        .children(".title")
                        .eq(0);
                    var classToAdd = firstOrderInfo.direction === Joove.OrderByDirections.DESC
                        ? "glyphicon-arrow-down"
                        : "glyphicon-arrow-up";
                    var tooltip;
                    if (firstOrderInfo.direction === Joove.OrderByDirections.DESC) {
                        tooltip = this.getColumnInfoByName(firstOrderInfo.column.name).dataType !== "DateTime"
                            ? this.resources.Unsort
                            : this.resources.SortASC;
                    }
                    else {
                        tooltip = this.getColumnInfoByName(firstOrderInfo.column.name).dataType !== "DateTime"
                            ? this.resources.SortDESC
                            : this.resources.Unsort;
                    }
                    $columnHeader.siblings(".sort-direction-icon").addClass(classToAdd);
                    $columnHeader.attr("title", tooltip);
                    $columnHeader.data("sort-direction", firstOrderInfo.direction);
                }
                var predefinedGroups = [];
                if (this.options.predefinedGroups != null)
                    for (var i = 0; i < this.options.predefinedGroups.length; i++) {
                        var current = this.options.predefinedGroups[i];
                        var columnName = current.column;
                        var state = current.state;
                        var column = this.getColumnInfoByName(columnName);
                        var groupInfo = new Widgets.ListGroupByInfo(column, state);
                        predefinedGroups.push(new Widgets.ListGroupByInfo(current, current.state));
                    }
                if ((this.status.pageSize !== 25 ||
                    this.status.filters.length !== 0 ||
                    this.status.orderBy.length !== 0 ||
                    JSON.stringify(this.status.groupBy) !== JSON.stringify(predefinedGroups) ||
                    this.status.currentView !== "PREDEFINED") &&
                    this.$list.hasClass(".list-no-preferences")) {
                    this.$listHeader.find(".btn-list-reset").removeClass("hidden");
                }
                this.$list.find(".pager-container").toggle(!this.status.getGroupsClosed);
                this.$list.find(".btn-list-prev-state").toggle(this.listDisplaysClosedGroupItems());
                var $viewsDropDown = this.$listHeader.find(".available-views");
                var selectedViewName = $viewsDropDown.val() === "PREDEFINED" ? "" : $viewsDropDown.val();
                var defaultViewName = this.viewsCache != null ? this.viewsCache.DefaultView : "";
                this.$listHeader.find(".btn-make-default-view")
                    .toggleClass("selected", (selectedViewName === defaultViewName));
                if (selectedViewName === defaultViewName) {
                    this.$listHeader.find(".btn-make-default-view").attr("disabled", "disabled");
                }
                else {
                    this.$listHeader.find(".btn-make-default-view").removeAttr("disabled");
                }
                $viewsDropDown.find("option").removeClass("default");
                var defaultViewValue = defaultViewName != null && defaultViewName.length > 0
                    ? defaultViewName
                    : "PREDEFINED";
                $viewsDropDown.find("option[value='" + defaultViewValue + "']").addClass("default");
            };
            ListControl.prototype.createListHeader = function () {
                var columnsNumber = this.status.columns.length;
                var colspan = columnsNumber > 1 ? columnsNumber : 2;
                var $newHeader = $("<table class='list-header'>                                 <thead><tr class='header-toolbar-container mobile'>                                         <th colspan='" + colspan + "'>                                             <div class='header-left'>                                                 <div class='global-search-container'>                                                    <div class='global-search-area input-group input-group-sm'>                                                        <input class='global-search-input form-control' type='text' placeholder='" + this.resources.Search + "' />                                                        <span class='global-search-clear glyphicon glyphicon-remove'></span>                                                        <span class='input-group-btn'><button type='button' class='btn btn-default global-search-btn'><i class='" + ListControlAsset.Icons.search.bs + "'></i></btn></span>                                                    </div>                                                </div>                                                <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='toggle-quick-filters btn btn-default btn-sm'>                                                        <span class='" + ListControlAsset.Icons.quickFilter.bs + "'></span>                                                    </button>                                                </div>                                                <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='clear-all-filters btn btn-default btn-sm'>                                                        <span class='" + ListControlAsset.Icons.clearAllFilters.bs + "'></span>                                                    </button>                                                </div>                                                  <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='clear-all-aggregators btn btn-default btn-sm'>                                                        <span class='" + ListControlAsset.Icons.clearAllAggregators.bs + "'></span>                                                    </button>                                                </div>                                                  <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='select-all-page-rows btn btn-default btn-sm'>                                                    </button>                                                    <button type='button' class='select-all-rows btn btn-default btn-sm'>                                                    </button>                                                </div>                                            </div>                                             <div class='btn-group jb-list-btn-group mobile-menu-container'>                                                   <button type='button' class='mobile-menu btn btn-sm btn-default dropdown-toggle' data-toggle='dropdown' aria-expanded='false'>                                                     <span class='" + ListControlAsset.Icons.cogs.bs + "'></span>                                                   </button>                                                   <ul class='dropdown-menu mobile-dropdown-menu' role='menu'>                                                     <li class='divider actions-divider'></li>                                                     <li><span class='" + ListControlAsset.Icons.refresh.bs + "'></span><a href='#' class='btn-list-refresh'>" + this.resources.RefreshTooltip + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.prevState.bs + "'></span><a href='#' class='btn-list-prev-state'>" + this.resources.PrevStateTooltip + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.prefs.bs + "'></span><a href='#' class='btn-list-preferences'>" + this.resources.PreferencesTooltip + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.filters.bs + "'></span><a href='#' class='btn-list-filters'>" + this.resources.FiltersTooltip + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.groups.bs + "'></span><a href='#' class='btn-list-groups'>" + this.resources.GroupingOrder + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.export.bs + "'></span><a href='#' class='btn-list-export'>" + this.resources.Export + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.import.bs + "'></span><a href='#' class='btn-list-import'>" + this.resources.Import + "</a></li>                                                     <li><span class='" + ListControlAsset.Icons.reset.bs + "'><a href='#' class='btn-list-reset hidden'></span>" + this.resources.ResetTooltip + "</a></li>                                                   </ul>                                             </div>                                            <div class='header-right'>                                                 <div class='tool-buttons-container btn-toolbar' role='toolbar'>                                                     <div class='btn-group jb-list-btn-group views'>                                                         <select class='available-views form-control'>                                                         </select>                                                     </div>                                                     <div class='btn-group jb-list-btn-group'>                                                         <button title='" + this.resources.MakeDefault + "' type='button' class='btn btn-default btn-make-default-view'>                                                            <span class='glyphicon glyphicon-check' aria-hidden='true'></span>                                                         </button>                                                         <button title='" + this.resources.SaveCurrentView + "' type='button' class='btn btn-default btn-save-view'>                                                            <span class='" + ListControlAsset.Icons.save.bs + "'></span>                                                         </button>                                                         <button title='" + this.resources.DeleteCurrentView + "' type='button' class='btn btn-default btn-remove-view'>                                                            <span class='" + ListControlAsset.Icons.remove.bs + "'></span>                                                         </button>                                                     </div>                                                 </div>                                             </div>                                         </th>                                     </tr>                                     <tr class='header-toolbar-container'>                                         <th colspan='" + colspan + "'>                                             <div class='header-left'>                                                 <div class='global-search-container'>                                                    <div class='global-search-area input-group input-group-sm'>                                                        <input class='global-search-input form-control' type='text' placeholder='" + this.resources.Search + "' />                                                        <span class='global-search-clear glyphicon glyphicon-remove'></span>                                                        <span class='input-group-btn'><button type='button' class='btn btn-default global-search-btn'><i class='" + ListControlAsset.Icons.search.bs + "'></i></btn></span>                                                    </div>                                                </div>                                                <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='toggle-quick-filters btn btn-default btn-sm'>                                                        <span class='toggle-quick-filters-caption'>" + this.resources.ShowQuickFilters + "</span>                                                        <span class='" + ListControlAsset.Icons.quickFilter.bs + "'></span>                                                    </button>                                                </div>                                                <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='clear-all-filters btn btn-default btn-sm'>                                                        <span class='clear-all-filters-caption'>" + this.resources.FiltersApplied + "</span>                                                        <span class='" + ListControlAsset.Icons.clearAllFilters.bs + "'></span>                                                    </button>                                                </div>                                                <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='clear-all-aggregators btn btn-default btn-sm'>                                                        <span class='clear-all-filters-aggregators'>" + this.resources.ClearAggregators + "</span>                                                        <span class='" + ListControlAsset.Icons.clearAllAggregators.bs + "'></span>                                                    </button>                                                </div>                                                <div class='btn-group jb-list-btn-group'>                                                     <button type='button' class='select-all-page-rows btn btn-default btn-sm'>                                                    </button>                                                    <button type='button' class='select-all-rows btn btn-default btn-sm'>                                                    </button>                                                </div>                                            </div>                                            <div class='header-right'>                                                 <div class='tool-buttons-container btn-toolbar' role='toolbar'>                                                     <div class='btn-group jb-list-btn-group'>                                                        <button title='" + this.resources.PrevStateTooltip + "' type='button' class='btn btn-default btn-list-prev-state'>                                                            <span class='" + ListControlAsset.Icons.prevState.bs + "'></span>                                                         </button>                                                     </div>                                                     <div class='btn-group jb-list-btn-group'>                                                        <button title='" + this.resources.RefreshTooltip + "' type='button' class='btn btn-default btn-list-refresh'>                                                            <span class='" + ListControlAsset.Icons.refresh.bs + "'></span>                                                         </button>                                                     </div>                                                     <div class='btn-group jb-list-btn-group'>                                                        <button title='" + this.resources.PreferencesTooltip + "' type='button' class='btn btn-default btn-list-preferences'>                                                            <span class='" + ListControlAsset.Icons.prefs.bs + "'></span>                                                         </button>                                                         <button title='" + this.resources.FiltersTooltip + "' type='button' class='btn btn-default btn-list-filters'>                                                            <span class='" + ListControlAsset.Icons.filters.bs + "'></span>                                                         </button>                                                         <button title='" + this.resources.GroupingOrder + "' type='button' class='btn btn-default btn-list-groups'>                                                            <span class='" + ListControlAsset.Icons.groups.bs + "'></span>                                                         </button>                                                         <button title='" + this.resources.Export + "' type='button' class='btn btn-default btn-list-export'>                                                            <span class='" + ListControlAsset.Icons.export.bs + "'></span>                                                         </button>                                                         <button title='" + this.resources.Import + "' type='button' class='btn btn-default btn-list-import'>                                                            <span class='" + ListControlAsset.Icons.import.bs + "'></span>                                                         </button>                                                     </div>                                                     <div class='btn-group jb-list-btn-group'>                                                        <button title='" + this.resources.ResetTooltip + "' type='button' class='btn btn-default btn-list-reset hidden'>                                                            <span class='" + ListControlAsset.Icons.reset.bs + "'></span>                                                         </button>                                                     </div>                                                     <div class='btn-group jb-list-btn-group'>                                                         <select class='available-views form-control'>                                                         </select>                                                     </div>                                                     <div class='btn-group jb-list-btn-group'>                                                          <button title='" + this.resources.MakeDefault + "' type='button' class='btn btn-default btn-make-default-view'>                                                            <span class='glyphicon glyphicon-check' aria-hidden='true'></span>                                                         </button>                                                         <button title='" + this.resources.SaveCurrentView + "' type='button' class='btn btn-default btn-save-view'>                                                            <span class='" + ListControlAsset.Icons.save.bs + "'></span>                                                         </button>                                                         <button title='" + this.resources.DeleteCurrentView + "' type='button' class='btn btn-default btn-remove-view'>                                                            <span class='" + ListControlAsset.Icons.remove.bs + "'></span>                                                         </button>                                                     </div>                                                 </div>                                             </div>                                         </th>                                     </tr>                                     <tr class='list-preferences-fieldsets-container'>                                         <th class='list-preferences-fieldsets-wrapper' colspan='" + colspan + "'></th>                                    </tr>                                 </thead>                             </table>");
                var preferencesOpened = false;
                var filtersOpened = false;
                var groupingOpened = false;
                if (this.$listHeader == null) {
                    this.$listHeader = this.$list.find(".list-header");
                }
                else {
                    if (this.$preferencesContainer.find(".preferences-grid").is(":visible") &&
                        !this.$preferencesContainer.find(".preferences-grid").hasClass("draggable-docked")) {
                        preferencesOpened = true;
                    }
                    if (this.$filtersContainer.find(".filters-grid").is(":visible") &&
                        !this.$filtersContainer.find(".filters-grid").hasClass("draggable-docked")) {
                        filtersOpened = true;
                    }
                    if (this.$groupsContainer.find(".groups-grid").is(":visible") &&
                        !this.$groupsContainer.find(".groups-grid").hasClass("draggable-docked")) {
                        groupingOpened = true;
                    }
                    this.isPreferencesMinimized = this.$preferencesContainer
                        .find(".preferences-grid .collapsible-grid-main-container")
                        .css("display") ===
                        "none";
                    this.isFiltersMinimized = this.$filtersContainer.find(".filters-grid .collapsible-grid-main-container")
                        .css("display") ===
                        "none";
                    this.isGroupsMinimized = this.$groupsContainer.find(".groups-grid .collapsible-grid-main-container")
                        .css("display") ===
                        "none";
                }
                if (this.options.useContextMenuForRowActions) {
                    var $actionButtonsContainer = this.options.$container.find(".list-action-buttons-container")
                        .addClass("jb-list-btn-group");
                    $newHeader.find(".header-toolbar-container:not(.mobile) .header-left").after($actionButtonsContainer);
                    this.createCommonActionsDropDown($actionButtonsContainer, $newHeader);
                }
                this.$listHeader.replaceWith($newHeader);
                this.$listHeader = $newHeader;
                if (this.options.standAlone !== false) {
                    if (this.$preferencesContainer == null) {
                        this.$preferencesContainer = this.$listDockedGrids;
                    }
                    else if (this.$preferencesContainer !== this.$listDockedGrids) {
                        this.$preferencesContainer = this.$listHeader.find(".list-preferences-fieldsets-container > th");
                    }
                    if (this.$filtersContainer == null) {
                        this.$filtersContainer = this.$listDockedGrids;
                    }
                    else if (this.$filtersContainer !== this.$listDockedGrids) {
                        this.$filtersContainer = this.$listHeader.find(".list-preferences-fieldsets-container > th");
                    }
                    if (this.$groupsContainer == null) {
                        this.$groupsContainer = this.$listDockedGrids;
                    }
                    else if (this.$groupsContainer !== this.$listDockedGrids) {
                        this.$groupsContainer = this.$listHeader.find(".list-preferences-fieldsets-container > th");
                    }
                }
                else {
                    this.$preferencesContainer = this.$listHeader.find(".list-preferences-fieldsets-container > th");
                    this.$filtersContainer = this.$listHeader.find(".list-preferences-fieldsets-container > th");
                    this.$groupsContainer = this.$listHeader.find(".list-preferences-fieldsets-container > th");
                }
                this.populateViewsDropDown();
                if (this.options.pagerPosition === "TOP") {
                    $newHeader.append(this.createListPager());
                }
                this.$listHeader.find(".select-all-page-rows").toggle(this.options.hasMultiselection !== false);
                this.$listHeader.find(".select-all-rows").toggle(this.options.hasMultiselection !== false);
                if (this.options.usePopUpsForPreferences === false) {
                    this.createPreferencesFieldSets();
                }
                if (preferencesOpened) {
                    this.$preferencesContainer.find(".preferences-grid").addClass("shown").show();
                }
                if (filtersOpened) {
                    this.$filtersContainer.find(".filters-grid").addClass("shown").show();
                }
                if (groupingOpened) {
                    this.$groupsContainer.find(".groups-grid").addClass("shown").show();
                }
                this.$listHeader.find(".toggle-quick-filters").toggle(!this.options.showRowNumbers);
                if (this.options.isPickList) {
                    this.$listHeader.find(".btn-list-filters").remove();
                }
                return $newHeader;
            };
            ListControl.prototype.configureMobileMode = function () {
                var SINGLE_LINE_HEIGHT = 65;
                var isMobileMode = this.isMobileMode;
                this.options.$container.find(".header-toolbar-container").show();
                this.$listPager.find(".total-records-web").toggle(true);
                this.$listPager.find(".total-records-mobile").toggle(false);
                this.$listPager.find(".rows-per-page-area, .pager-input-container").toggle(true);
                this.$listPager.find(".pager-input-container-mobile").toggle(false);
                this.$listHeader.find(".header-toolbar-container.mobile .mobile-dropdown-menu")
                    .removeClass("small")
                    .css("width", "");
                var containerIsSmall = this.options.$container.outerWidth() <
                    this.options.$container.find(".header-toolbar-container:not(.mobile) .header-left").width() +
                        this.options.$container.find(".header-toolbar-container:not(.mobile) .header-right").width() +
                        this.options.$container.find(".header-toolbar-container:not(.mobile) .list-action-buttons-container")
                            .width();
                var dimensionsAreSmall = this.options.$container.find(".header-toolbar-container:not(.mobile)").outerHeight() >
                    SINGLE_LINE_HEIGHT ||
                    (this.$listPager != null &&
                        (this.options.$container.outerWidth() <
                            this.$listPager.find(".pager-left").width() + this.$listPager.find(".pager-right").width())) ||
                    (this.$listPager != null &&
                        this.options.pagerPosition === "TOP" &&
                        this.$listPager.outerHeight() > SINGLE_LINE_HEIGHT);
                isMobileMode = containerIsSmall || dimensionsAreSmall;
                this.$listHeader.find(".header-toolbar-container.mobile").toggle(isMobileMode);
                this.$listHeader.find(".header-toolbar-container:not(.mobile)").toggle(!isMobileMode);
                this.$listPager.find(".total-records-web").toggle(!isMobileMode);
                this.$listPager.find(".total-records-mobile").toggle(isMobileMode);
                this.$listPager.find(".rows-per-page-area, .pager-input-container").toggle(!isMobileMode);
                this.$listPager.find(".pager-input-container-mobile").toggle(isMobileMode);
                this.options.usePopUpsForPreferences = isMobileMode || (this.options.standAlone === false);
                if (isMobileMode) {
                    var $globalSearch = this.$listHeader
                        .find(".header-toolbar-container.mobile .header-left .global-search-container");
                    var $availableViews = this.$listHeader
                        .find(".header-toolbar-container.mobile .header-right .available-views");
                    var totalWidth = this.options.$container.width();
                    var BORDER_SPACING_LEFT = 70;
                    var BORDER_SPACING_RIGHT = 3;
                    totalWidth -= BORDER_SPACING_LEFT;
                    this.$listHeader.find(".header-toolbar-container.mobile .header-left .jb-list-btn-group")
                        .each(function () {
                        totalWidth -= $(this).outerWidth(true);
                    });
                    totalWidth -= this.$listHeader.find(".mobile-menu-container").outerWidth();
                    $globalSearch.css({ "width": totalWidth + "px" });
                    totalWidth = this.options.$container.width();
                    totalWidth -= BORDER_SPACING_RIGHT;
                    this.$listHeader.find(".header-toolbar-container.mobile .header-right .jb-list-btn-group:not(.views)")
                        .each(function () {
                        totalWidth -= $(this).outerWidth(true);
                    });
                    $availableViews.css({ "width": totalWidth + "px" });
                    var containerWidth = this.options.$container.outerWidth();
                    var $dropDownMenu = this.$listHeader.find(".header-toolbar-container.mobile .mobile-dropdown-menu");
                    if ($dropDownMenu.outerWidth() >= containerWidth) {
                        $dropDownMenu.addClass("small").css("width", (containerWidth * 0.8) + "px");
                    }
                }
            };
            ListControl.prototype.createCommonActionsDropDown = function ($actionButtonsContainer, $header) {
                if ($actionButtonsContainer.find(".common-actions-dropdown").length > 0)
                    return;
                var $mobileMenu = $header.find(".mobile-dropdown-menu");
                var $dropDown = $("<div class='dropdown common-actions-dropdown'>                                 <button class='btn btn-primary btn-sm dropdown-toggle' type='button' data-toggle='dropdown'>                                     <span>" + this.resources.CommonActions + "</span>                                     <span class='caret'></span>                                 </button>                                  <ul class='dropdown-menu' role='menu'>                                </ul>                            </div>");
                var $buttons = $header.find(".show-always, .show-single, .show-multi");
                var $mobileActions = "";
                for (var i = 0; i < $buttons.length; i++) {
                    var itemClass = $buttons.eq(i).hasClass("show-always")
                        ? "show-always"
                        : $buttons.eq(i).hasClass("show-single") ? "show-single" : "show-multi";
                    var item = "<li role='presentation' data-target='" + $buttons.eq(i).attr("jb-id") + "' class='" + itemClass + "'>                                 <a role='menuitem' tabindex='-1' href='javascript:void(0)'>                                     <span>" + $buttons.eq(i).find("[jb-type='Label']").text() + "</span>                                </a>                             </li>";
                    $dropDown.find(".dropdown-menu").append(item);
                    $mobileActions += "<li><a href='#' class='" + itemClass + "' data-target='" + $buttons.eq(i).attr("id") + "'>" + $buttons.eq(i).find("span").text() + "</a></li>";
                }
                $mobileMenu.prepend($mobileActions);
                $mobileMenu.find(".actions-divider").toggle($buttons.length > 0);
                $actionButtonsContainer.append($dropDown);
            };
            ListControl.prototype.createListColumnHeader = function () {
                var _this = this;
                $(this.options.$container.find(".list-quick-filters-temp-container").hide());
                var columnsNumber = this.status.columns.length;
                var $newColumnHeader = $("<div class='list-column-header-container'> \
                                            <div class='list-column-header-wrapper'> \
                                                <table class='list-column-header'> \
                                                    <tr class='column-titles-container'> \
                                                    </tr> \
                                                    <tr class='quick-filters-container'> \
                                                    </tr> \
                                                </table> \
                                            </div> \
                                       </div>");
                var quickFiltersAreVisible = this.$listColumnHeaderContainer != null &&
                    this.$listColumnHeaderContainer.find(".quick-filters-container").eq(0).is(":visible") === true;
                var $columnTitlesContainer = $newColumnHeader.find(".column-titles-container");
                var $quickFiltersContainer = $newColumnHeader.find(".quick-filters-container");
                if (this.options.showRowNumbers) {
                    $newColumnHeader.addClass("with-row-numbering");
                    var $columnRowNumber = $("<th class='column-title row-number-header'><button type='button' class='show-quick-filters btn btn-default'><span class='glyphicon glyphicon-filter'></span></button></th>");
                    var $columnRowNumberFilter = $("<th class='column-quick-filter'><button type='button' class='hide-quick-filters btn btn-default'><span class='glyphicon glyphicon-remove'></span></button></th>");
                    $columnTitlesContainer.append($columnRowNumber);
                    $quickFiltersContainer.append($columnRowNumberFilter);
                }
                for (var i = 0; i < columnsNumber; i++) {
                    var current = this.status.columns[i];
                    if (this.columnMustBeRendered(current) === false)
                        continue;
                    var tooltip = current.orderable === true
                        ? (current.dataType == "DateTime" ? this.resources.SortDESC : this.resources.SortASC)
                        : "";
                    var titleClass = current.orderable === true ? "title" : "title not-sortable";
                    var $quickFilterInput = this.createQuickFilterInput(current);
                    var $columnHeader = $("<th class='column-title' data-column='" + current.name + "'>                                             <span class='move-column-left glyphicon glyphicon-chevron-left' title='" + this.resources.MoveColumnLeft + "'></span>                                            <div class='" + titleClass + "' title='" + tooltip + "'>" + current.caption + "</div>                                            <span class='sort-direction-icon glyphicon'></span>                                            <span class='move-column-right glyphicon glyphicon-chevron-right' title='" + this.resources.MoveColumnRight + "'></span>                                        </th>");
                    var $filterHeader = $("<th class='column-quick-filter' data-column='" + current.name + "'></th>");
                    if (this.options.hasResizableColumns !==
                        false)
                        $columnHeader.append("<div class='row-resize-handler'></div>");
                    $filterHeader.append($quickFilterInput);
                    $quickFiltersContainer.append($filterHeader);
                    $columnTitlesContainer.append($columnHeader);
                    $columnHeader.find(".title").data("sort-direction", Joove.OrderByDirections.NONE);
                }
                var self = this;
                $newColumnHeader.find(".row-resize-handler")
                    .draggable({
                    axis: "x",
                    containment: ".column-titles-container",
                    start: function (event, ui) {
                        $(event.target)
                            .css({
                            "opacity": "1"
                        });
                    },
                    drag: function (event, ui) {
                        var columnInfo = self.getColumnInfoByName($(this).parent().attr("data-column"));
                        if (ui.position.left < columnInfo.minWidth) {
                            ui.position.left = columnInfo.minWidth;
                        }
                    },
                    stop: function (event, ui) {
                        $(event.target).css("left", "");
                        _this.onColumnResized(event, ui);
                    }
                });
                if (this.$listColumnHeaderContainer == null)
                    this.$listColumnHeaderContainer = this.$list.find(".list-column-header-container");
                this.$listColumnHeaderContainer.replaceWith($newColumnHeader);
                this.$listColumnHeaderContainer = $newColumnHeader;
                this.$listColumnHeader = this.$listColumnHeaderContainer.find(".list-column-header-wrapper");
                this.populateViewsDropDown();
                if (quickFiltersAreVisible)
                    this.toggleQuickFiltersRow(this.$listHeader
                        .find(".header-toolbar-container:visible .toggle-quick-filters"));
                return $newColumnHeader;
            };
            ListControl.prototype.createQuickFilterInput = function (column) {
                if (column.searchable === false)
                    return;
                var $container = $("<div class='quick-filter-wrapper'></div>");
                var $customDropDown = this.options.$container
                    .find("[jb-type='DropDownBox'][data-filter-for-column='" + column.name + "']");
                var $input;
                if ($customDropDown.length > 0) {
                    $customDropDown.appendTo($container);
                    $customDropDown.find("input[onchange]").removeAttr("onchange");
                }
                switch (column.dataType) {
                    case "bool":
                        $input = $("<select class='quick-filter form-control bool-quick-filter'>                                     <option value=''></option>                                     <option value='true'>" + this.resources.True + "</option>                                     <option value='false'>" + this.resources.False + "</option>                                  </select>");
                        $container.addClass("bool-quick-filter-container");
                        break;
                    case "DateTime":
                        $input = $('<input type="text" class="quick-filter default-input form-control" />');
                        this.convertElementToDatePicker($input, column.formatting);
                        $input.on("change", function () {
                            $input.siblings(".apply-quick-filter").toggle($input.val() !== "");
                        });
                        break;
                    default:
                        $input = $("<input type='text' class='quick-filter default-input form-control' />");
                        break;
                }
                var $removeFilter = $("<span class='remove-quick-filter glyphicon glyphicon-remove hidden' title='" + this.resources.ClearQuickFilter + "'></span>");
                var $applyFilter = $("<span class='apply-quick-filter glyphicon glyphicon-search' title='" + this.resources.ApplyQuickFilter + "'></span>");
                if ($customDropDown.length > 0) {
                    $input.hide();
                    $container.addClass("has-custom-drop-down");
                    $container.append($input);
                    if ($customDropDown.find(".remove-quick-filter").length === 0) {
                        $customDropDown.prepend($removeFilter);
                    }
                }
                else {
                    $container.append($removeFilter);
                    $container.append($input);
                    if (column.dataType !== "bool") {
                        $container.append($applyFilter);
                    }
                }
                return $container;
            };
            ListControl.prototype.convertElementToDatePicker = function ($el, format) {
                $el.datetimepicker({
                    format: this.getFormatOfDate(format),
                    timepicker: false,
                    datepicker: true
                });
            };
            ListControl.prototype.getFormatOfDate = function (format, withTime) {
                var defaultDateFormat = "DD/MM/YYYY";
                var defaultTimeFormat = "h:mm";
                var formatToUse = format == null || format.trim() === "" ? defaultDateFormat : format;
                return withTime === true
                    ? formatToUse + " " + defaultTimeFormat
                    : formatToUse;
            };
            ListControl.prototype.initializeDatepickerPlugIn = function () {
                if (window.momentJsInitialized || window.moment == null || $.datetimepicker == null)
                    return;
                Date["parseDate"] = function (input, format) { return moment(input, format).toDate(); };
                Date.prototype.dateFormat = function (format) {
                    return moment(this).format(format);
                };
                window.momentJsInitialized = true;
                $.datetimepicker.setLocale(window._context.locale);
            };
            ListControl.prototype.createListData = function () {
                this.currentRowNumber = this.status.startRow;
                if (this.status.groupBy.length > 0) {
                    this.createGroupsData();
                    return;
                }
                var $newData = $("<div class='list-data-container'> \
                                <div class='list-data-wrapper'> \
                                <table class='list-data-table table'> \
                                    <tbody>\
                                    </tbody>\
                                </table>\
                                </div> \
                                <div class='row-num-border'></div> \
                            </div>");
                var $dataBody = $newData.find("tbody");
                this.createDataRows(this.data, $dataBody);
                if (this.data.length === 0) {
                    $dataBody.append(this.createNotFoundRow());
                }
                if (this.$listDataContainer == null)
                    this.$listDataContainer = this.$list.find(".list-data-container");
                $newData.attr("style", this.$listDataContainer.attr("style"));
                $newData.find(".list-data-table").toggleClass("table-striped", this.options.stripped !== false);
                this.$listDataContainer.replaceWith($newData);
                this.$listDataContainer = $newData;
                this.$listData = this.$listDataContainer.find(".list-data-wrapper");
                this.scrollInnerContent(this.$listDataContainer);
                for (var i = 0; i < this.status.selectedItemKeys.length; i++) {
                    this.$listDataContainer.find(".list-data-row[data-key='" + this.status.selectedItemKeys[i] + "']")
                        .addClass("selected-row");
                    this.$listDataContainer.find(".list-data-row[data-key='" + this.status.selectedItemKeys[i] + "']")
                        .find(".list-data-cell span")
                        .removeClass("text-compact");
                }
                return $newData;
            };
            ListControl.prototype.createDataRows = function (collection, $target, groupPath, groupLevel) {
                var groupMode = typeof (groupPath) != "undefined" && groupPath != null && groupPath.length > 0;
                for (var i = 0; i < collection.length; i++) {
                    var current = collection[i];
                    var $row = $("<tr class='list-data-row'></tr>");
                    $row.attr("data-key", current._key);
                    if (groupMode) {
                        $row.addClass("group-row");
                        $row.attr("data-group", groupPath);
                    }
                    if (this.options.showRowNumbers) {
                        this.currentRowNumber++;
                        var clsForDigit = "num-single-digit";
                        if (this.currentRowNumber > 9)
                            clsForDigit = "num-double-digit";
                        if (this.currentRowNumber > 99)
                            clsForDigit = "num-triple-digit";
                        var $rowNumCell = $("<td class='list-data-cell row-number'><span class='circled-num " + clsForDigit + "'>" + this.currentRowNumber + "</span></td>");
                        if (groupLevel != null)
                            $rowNumCell.attr("data-parentGroupLevel", groupLevel);
                        $row.append($rowNumCell);
                    }
                    for (var j = 0; j < this.status.columns.length; j++) {
                        var currentColumn = this.status.columns[j];
                        if (this.columnMustBeRendered(currentColumn) === false)
                            continue;
                        var $cell = $("<td class='list-data-cell'></td>");
                        var style = currentColumn.style;
                        if (typeof (style) != "undefined" && style != null && style.length > 0)
                            $cell.attr("style", style);
                        var columnParts = currentColumn.name.split(".");
                        var value = current;
                        for (var i_1 = 0; i_1 < columnParts.length; i_1++) {
                            if (value == null) {
                                break;
                            }
                            value = value[columnParts[i_1]];
                        }
                        var itemType = currentColumn.itemType;
                        if (currentColumn.formatting != null) {
                            if (currentColumn.dataType === "DateTime") {
                                value = currentColumn.formatting.format(value, true);
                            }
                            else if (this.isDataTypeNumeric(currentColumn.dataType)) {
                                value = currentColumn.formatting.format(value);
                            }
                            else {
                                console.error("Cannot format datatype " + currentColumn.dataType, currentColumn.formatting);
                            }
                        }
                        var cellContents = this.createCell(value, currentColumn);
                        $cell.append(cellContents);
                        if (this.options.showCellDataOnHover !== false) {
                            $cell.attr("title", value);
                        }
                        if (itemType == "CHECKBOX" || itemType == "IMAGEBOX")
                            $cell.css("text-align", "center");
                        $row.append($cell);
                    }
                    $target.append($row);
                }
            };
            ListControl.prototype.hideListData = function () {
                var _this = this;
                if (this.$listData == null || this.hidingData)
                    return;
                this.$rowContextMenu.hide();
                this.hidingData = true;
                this.$list.find(".list-data-opacity-container")
                    .animate({
                    "opacity": "0"
                }, 200, function () {
                    _this.hidingData = false;
                });
            };
            ListControl.prototype.showListData = function () {
                var _this = this;
                if (this.$listData == null)
                    return;
                if (this.hidingData !== false) {
                    setTimeout(function () {
                        _this.showListData();
                    }, 100);
                    return;
                }
                this.$list.find(".list-data-opacity-container")
                    .animate({
                    "opacity": "1"
                }, 500);
            };
            ListControl.prototype.showControl = function () {
                var $header = this.options.$container.prev(".list-control-title-container");
                if (this.options.isPickList !== true) {
                    this.options.$container.animate({
                        "opacity": "1"
                    }, 500);
                }
                $header.animate({
                    "opacity": "1"
                }, 500);
                this.$predefinedFiltersFieldSet.animate({
                    "opacity": "1"
                }, 500);
                if (this.options.isPickList == true) {
                    this.options.$container.show();
                }
                if (this.options.$container.parent(".form-group").parent().data("type") == "ResponsiveRow") {
                    this.options.$container.parent(".form-group")
                        .css("height", (this.options.$container.outerHeight() + 100) + "px");
                }
                if (this.$list != null) {
                    this.$list.find(".clear-all-aggregators")
                        .toggle(this.status.aggregators && this.status.aggregators.length > 0);
                }
            };
            ListControl.prototype.hideControl = function (hidePredefinedFilters) {
                var $header = this.options.$container.prev(".list-control-title-container");
                this.options.$container.animate({
                    "opacity": "0"
                }, 500);
                $header.animate({
                    "opacity": "0"
                }, 500);
                if (hidePredefinedFilters !== true)
                    return;
                this.$predefinedFiltersFieldSet.animate({
                    "opacity": "1"
                }, 500);
            };
            ListControl.prototype.createListPager = function () {
                var columnsNumber = this.status.columns.length;
                var colspan = columnsNumber;
                var pagerClass = this.options.pagerPosition === "BOTTOM"
                    ? "pager-bottom-container"
                    : "pager-top-container";
                var newPagerStr = "<tr class='pager-container " + pagerClass + "' style=\"display: table-row;\">                                         <th colspan='" + colspan + "'>                                             <div class='pager-left'>                                                 <div class='list-pager'>                                                     <div class='input-append dropdown combobox pager-input-container'>                                                        <span class='page-caption'>" + this.resources.Page + "</span>                                                        <input class='list-current-page' type='text' value='1'>                                                        <span>" + this.resources.Of + "</span>                                                        <span class='data-total-pages'></span>                                                        <span>" + this.resources.Pages + "</span>                                                    </div>                                                   <div class='input-append dropdown combobox pager-input-container-mobile'>                                                        <span class='page-caption'>" + this.resources.Page + "</span>                                                        <input class='list-current-page' type='text' value='1'>                                                        <span>/</span>                                                        <span class='data-total-pages'></span>                                                    </div>                                                    <div class='btn-group jb-list-btn-group'>                                                         <button title='" + this.resources.FirstPageTooltip + "' type='button' class='btn btn-default list-first-page'>                                                             <i class='" + ListControlAsset.Icons.first.bs + "'></i>                                                         </button>                                                         <button title='" + this.resources.PrevPageTooltip + "' type='button' class='btn btn-default list-prev-page'>                                                             <i class='" + ListControlAsset.Icons.prev.bs + "'></i>                                                         </button>                                                         <button title='" + this.resources.NextPageTooltip + "' type='button' class='btn btn-default list-next-page'>                                                             <i class='" + ListControlAsset.Icons.next.bs + "'></i>                                                         </button>                                                         <button title='" + this.resources.LastPageTooltip + "' type='button' class='btn btn-default list-last-page'>                                                             <i class='" + ListControlAsset.Icons.last.bs + "'></i>                                                         </button>                                                     </div>                                                 </div>                                             </div>                                              <div class='pager-right total-records'>                                                 <div class='data-info total-records-web'>                                                     <span class='data-start'></span>                                                     <span>-</span>                                                     <span class='data-end'></span>                                                     <span>" + this.resources.Of + "</span>                                                     <span class='data-total'></span>                                                     <span>" + this.resources.Items + "</span>                                                 </div>                                                 <div class='data-info total-records-mobile'>                                                     <span class='page-caption'>" + this.resources.Items + ": </span>                                                     <span class='data-total'></span>                                                 </div>                                                 <div class='rows-per-page-area'>                                                     <select class='select-page-size'>                                                        <option value='10'>10</option>                                                        <option value='25'>25</option>                                                        <option value='50'>50</option>                                                        <option value='100'>100</option>                                                        <option value='200'>200</option>                                                    </select>                                                    <span class='fixed-page-size' style=\"display: inline-table;\">" + this.options.pageSize + "</span>                                                    <span>" + this.resources.PerPage + "</span>                                                </div>                                             </div>                                         </th>                                     </tr>";
                var $newPager = $(newPagerStr);
                if (this.options.displayRecordInfo === false) {
                    $newPager.find(".total-records").addClass("hidden");
                }
                if (this.options.userCanSelectPageSize === false) {
                    $newPager.find(".fixed-page-size").show();
                    $newPager.find(".select-page-size").hide();
                }
                this.$listPager = $newPager;
                return $newPager;
            };
            ListControl.prototype.createRecordSetAggregators = function (keepAggregatorsOfFullRecordSet) {
                if (this.aggregatorsData == null) {
                    this.getPredefinedAggregators();
                    return;
                }
                if (keepAggregatorsOfFullRecordSet !== true) {
                    this.updateAggregatorsData();
                    return;
                }
                if (this.$listFooterContainer != null) {
                    this.$listFooterContainer.find(".loading-aggregators-row").remove();
                    this.$listFooterContainer.find(".list-aggregators-row").remove();
                }
                if (this.status.totalRows == 0)
                    return;
                var rowCreationResult = this.createAggregatorsRow({
                    rowClass: "list-aggregators-row",
                    cellClass: "aggregator-cell",
                    currentPageRowsSelector: ".list-data-row",
                    aggregatorCaptionClass: "aggregator-caption",
                    aggregatorValueClass: "aggregator-value",
                    aggregatorContainerClass: "aggregator-container",
                    groupIdentifier: null,
                    groupMode: false,
                    showPageAggregators: false
                });
                if (rowCreationResult != null && this.$listFooter != null) {
                    var $row = rowCreationResult.$row;
                    var aggregatorsFound = rowCreationResult.aggregatorsFound;
                    this.$listFooter.find("tfoot").prepend($row);
                }
                if (this.$listFooter != null)
                    this.$listFooter.toggle(aggregatorsFound);
            };
            ListControl.prototype.aggregatorIsEnabled = function (col, aggregator) {
                if (col == null || aggregator == null || this.status.aggregators == null)
                    return false;
                for (var i = 0; i < this.status.aggregators.length; i++) {
                    var current = this.status.aggregators[i];
                    if (col.name == current.column) {
                        if (aggregator.type == Joove.AggregatorTypes.SUM && current.type == 0 ||
                            aggregator.type == Joove.AggregatorTypes.AVERAGE && current.type == 1 ||
                            aggregator.type == Joove.AggregatorTypes.COUNT && current.type == 2) {
                            return true;
                        }
                    }
                }
                return false;
            };
            ListControl.prototype.createAggregatorsRow = function (opts) {
                if (this.aggregatorsData == null || this.data == null)
                    return;
                var aggregatorsFound = false;
                var columnsNumber = this.status.columns.length;
                var $row = $("<tr class='" + opts.rowClass + "'></tr>");
                if (this.options.showRowNumbers) {
                    var $rowNumberCell = $("<td class='" + opts.cellClass + " row-number'></td>");
                    $row.append($rowNumberCell);
                }
                for (var i = 0; i < columnsNumber; i++) {
                    var current = this.status.columns[i];
                    var index = this.options.$container.find(".column-title[data-column='" + current.name + "']").index();
                    if (this.columnMustBeRendered(current) === false)
                        continue;
                    var columnAggregateInfo = [];
                    for (var j_1 = 0; j_1 < this.aggregatorsData.length; j_1++) {
                        var item_1 = this.aggregatorsData[j_1];
                        if (this.aggregatorIsEnabled(current, item_1) === false)
                            continue;
                        var sanitizedGroupId = Joove.Common.replaceAll(item_1.groupIdentifier, "___", " ");
                        if (item_1.column === current.name &&
                            sanitizedGroupId == opts.groupIdentifier) {
                            columnAggregateInfo.push(item_1);
                        }
                    }
                    var currentPageValues = [];
                    var $currentPageRows = this.$listData.find(opts.currentPageRowsSelector);
                    var $cell;
                    if (columnAggregateInfo.length > 0) {
                        aggregatorsFound = true;
                        for (var j = 0; j < $currentPageRows.length; j++) {
                            $cell = $currentPageRows.eq(j).find(".list-data-cell").eq(index);
                            currentPageValues.push($cell.text());
                        }
                    }
                    $cell = $("<td class='" + opts.cellClass + "'></td>");
                    for (var j_2 = 0; j_2 < columnAggregateInfo.length; j_2++) {
                        var item = columnAggregateInfo[j_2];
                        var captionGrand = "";
                        var captionPage = "";
                        var currentPageValue = 0;
                        var type = Joove.AggregatorTypes[item.type];
                        if (type == "SUM") {
                            captionGrand = this.resources.GrandTotal;
                            captionPage = this.resources.PageTotal;
                            if (opts.showPageAggregators !== true) {
                                for (var ii = 0; ii < currentPageValues.length; ii++) {
                                    currentPageValue += Joove.Common.parseFloat(currentPageValues[ii]);
                                }
                            }
                        }
                        else if (type == "AVERAGE") {
                            captionGrand = this.resources.GrandAverage;
                            captionPage = this.resources.PageAverage;
                            if (opts.showPageAggregators !== true) {
                                for (var ii = 0; ii < currentPageValues.length; ii++) {
                                    currentPageValue += Joove.Common.parseFloat(currentPageValues[ii]);
                                }
                                currentPageValue = currentPageValue / currentPageValues.length;
                            }
                        }
                        else if (type == "COUNT") {
                            captionGrand = this.resources.GrandCount;
                            captionPage = this.resources.PageCount;
                            currentPageValue = currentPageValues.length;
                        }
                        var span = "<span class='" + opts.aggregatorCaptionClass + "'>" + captionGrand + "</span>";
                        var value = "<span class='" + opts.aggregatorValueClass + "' title='" + item.value + "'>" + item.formattedValue + "</span>";
                        var seperator = "<br />";
                        var spanThisPage = "<span class='" + opts.aggregatorCaptionClass + "'>" + captionPage + "</span>";
                        var currentPage = "<span class='" + opts.aggregatorValueClass + "' title='" + currentPageValue + "'>" + this
                            .applyFormattingToNumber(currentPageValue) + "</span>";
                        var $container = $("<div class='" + opts.aggregatorContainerClass + "'></div>");
                        $container.append(span).append(value);
                        if (opts.groupMode === false) {
                            $container.append(seperator);
                        }
                        if (opts.showPageAggregators === true) {
                            $container.append(spanThisPage);
                            $container.append(currentPage);
                        }
                        $cell.append($container).append(seperator);
                    }
                    if (opts.groupMode === true) {
                        $cell.css("width", this.$listColumnHeader.find(".column-title[data-column='" + current.name + "']").css("width"));
                    }
                    $row.append($cell);
                }
                return { $row: $row, aggregatorsFound: aggregatorsFound };
            };
            ListControl.prototype.applyFormattingToNumber = function (number) {
                if (isNaN(number))
                    return 0;
                return number;
            };
            ListControl.prototype.createListControl = function () {
                this.$list = $("<div class='list-wrapper'>                             <div class='list-header-container'>                            <table class='list-header'></table>                             </div>                             <div class='list-column-header-container'></div>                             <div class='list-docked-grids'></div>                             <div class='list-column-vertical-scrollbar'>                                 <div class='top-right-corner'></div>                                 <div class='scrollbar-content-wrapper'>                                    <div class='scrollbar-content'></div>                                 </div>                                 <div class='row-num-border'></div>                                <div class='bottom-right-corner'></div>                             </div>                             <div class='list-data-opacity-container'>                             <div class='list-data-container'></div>                             </div>                             <div class='list-footer-container'>                                 <div class='list-footer-wrapper'>                                     <table class='list-footer'>                                        <tfoot><tr class='list-aggregators-row'></tr>                                        </tfoot>                                    </table>                                </div>                             </div>                             <div class='list-column-horzontal-scrollbar'>                                 <div class='scrollbar-content-wrapper'>                                     <div class='scrollbar-content'></div>                                 </div>                             </div>                             <ul class='title-context-menu dropdown-menu' role='menu' style='display:none'>                                 <li data-action='" + Joove.AggregatorTypes.SUM + "'>                                    <a tabindex='-1' href='javascript:void(0)'>                                         <span class='" + ListControlAsset.Icons.aggregator.bs + "'></span>                                        <span>" + this.resources.CalculateSum + "</span>                                    </a>                                 </li>                                 <li data-action='" + Joove.AggregatorTypes.AVERAGE + "'>                                    <a tabindex='-1' href='javascript:void(0)'>                                         <span class='" + ListControlAsset.Icons.aggregator.bs + "'></span>                                        <span>" + this.resources.CalculateAverage + "</span>                                    </a>                                 </li>                                 <li data-action='" + Joove.AggregatorTypes.COUNT + "'>                                     <a tabindex='-1' href='javascript:void(0)'>                                         <span class='" + ListControlAsset.Icons.aggregator.bs + "'></span>                                        <span>" + this.resources.CalculateCount + "</span>                                    </a>                                 </li>                             </ul>                         </div>");
                this.$titleContextMenu = this.$list.find(".title-context-menu");
                this.$listFooterContainer = this.$list.find(".list-footer-container");
                this.$listFooter = this.$listFooterContainer.find(".list-footer-wrapper");
                this.$listDockedGrids = this.$list.find(".list-docked-grids");
                if (this.options.standAlone !== false) {
                    this.goToStandAloneMode();
                }
                this.createRowContextMenu();
                if (this.options.pagerPosition === "BOTTOM") {
                    this.$list.append("<table class='bottom-pager-table'></table>");
                    this.$list.find(".bottom-pager-table").append(this.createListPager());
                }
                this.updateControl({
                    createListHeader: true,
                    createListColumnHeader: true,
                    createListData: true,
                    createListPager: true,
                    createRecordSetAggregators: true,
                    updateUiElements: true,
                    updateGroupAggregators: true
                });
                this.options.$container.append(this.$list);
                if (this.$listVerticalScrollbar == null)
                    this.$listVerticalScrollbar = this.$list.find(".list-column-vertical-scrollbar");
                if (this.$listHorizontalScrollbar == null)
                    this.$listHorizontalScrollbar = this.$list.find(".list-column-horzontal-scrollbar");
                if (this.options.useCustomScrollbar === true) {
                    this.$list.addClass("perfect-scrollbar");
                    this.$listVerticalScrollbar.find(".scrollbar-content-wrapper")
                        .perfectScrollbar({ suppressScrollX: true });
                    this.$listHorizontalScrollbar.find(".scrollbar-content-wrapper")
                        .perfectScrollbar({ suppressScrollY: true });
                }
                if (this.options.isSearchable === false ||
                    this.anyColumnIsSearchable() === false)
                    this.$list.addClass("list-not-searchable");
                if (this.options.isPaged === false)
                    this.$list.addClass("list-not-paged");
                if (this.options.isExportable === false)
                    this.$list.addClass("list-not-exportable");
                if (this.options.isImportable === false)
                    this.$list.addClass("list-not-importable");
                if (this.options.userCanSelectPageSize === false)
                    this.$list.addClass("list-fixed-page-size");
                if (this.options.hasPreferences === false)
                    this.$list.addClass("list-no-preferences");
                if (this.options.isGroupable === false)
                    this.$list.addClass("list-not-groupable");
                if (this.options.recordsInfoRow === false)
                    this.$list.addClass("list-no-record-info");
                if (this.options.usePopUpsForPreferences === false)
                    this.$list.addClass("list-no-popups");
                if (this.options.hasReorderableColumns === false)
                    this.$list.addClass("list-not-reorderable");
                if (this.options.useContextMenuForRowActions)
                    this.options.$container.addClass("list-no-row-action-buttons");
                if (this.options.standAlone !== false)
                    this.options.$container.addClass("stand-alone");
                if (this.options.enableCompactText !== false)
                    this.options.$container.addClass("with-compact-text");
                if (this.options.hasResizableColumns !== false)
                    this.options.$container.addClass("resizable-cols");
                this.initGlobalListeners();
            };
            ListControl.prototype.anyColumnIsSearchable = function () {
                for (var i = 0; i < this.status.columns.length; i++) {
                    if (this.status.columns[i].searchable === true)
                        return true;
                }
                return false;
            };
            ListControl.prototype.getColumnTitleWidth = function (width) {
                var moveIconsWidth = 0;
                var sortIconWidth = this.$listColumnHeader.find(".sort-direction-icon").eq(0).width();
                var PADDING = 10;
                var MARGIN = 30;
                return width - moveIconsWidth - sortIconWidth - MARGIN + PADDING;
            };
            ListControl.prototype.getDefaultColumnMinWidth = function () {
                var titleMinWidth = 60;
                var sortIconWidth = this.$listColumnHeader.find(".sort-direction-icon").eq(0).width();
                var MARGIN = 0;
                return titleMinWidth + sortIconWidth + MARGIN;
            };
            ListControl.prototype.getDefaultColumnWidth = function (column) {
                var $header = this.$listColumnHeader.find(".column-title[data-column='" + column.name + "']");
                var titleWidth = $header.find(".title").width();
                var sortIconWidth = this.$listColumnHeader.find(".sort-direction-icon").eq(0).width();
                var MARGIN = 15;
                return titleWidth + sortIconWidth + MARGIN;
            };
            ListControl.prototype.scrollInnerContent = function ($element) {
                if (this.isMobileMode) {
                    setTimeout(function () { $element.niceScroll({ horizrailenabled: false }); }, 1000);
                }
                else {
                    this.addScrollListener($element);
                }
            };
            ListControl.prototype.addScrollListener = function ($element) {
                $element.on("mousewheel", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var scrollMovement = -(e.originalEvent.wheelDelta / 2);
                    $(this).scrollTop(scrollMovement + $(this).scrollTop());
                });
            };
            ListControl.prototype.toggleVisibleRowsSelection = function (action) {
                var $rows = null;
                var select = action === "SELECT";
                if (select === false) {
                    this.status.allRecordsSelected = false;
                }
                var self = this;
                this.$listData.find(".list-data-row")
                    .each(function () {
                    var $row = $(this);
                    var key = $row.data("key");
                    if (select && self.status.selectedItemKeys.indexOf(key) === -1) {
                        self.addRowKeyToSelectedItems(key);
                    }
                    else if (select === false) {
                        self.removeRowKeyFromSelectedItems(key);
                    }
                    self.toggleRowSelection($row, select);
                });
                if (!this.options.isPickList) {
                    this.updateSelection();
                }
                else {
                    this.updateControl({ refreshDimensions: true });
                }
                this.updateSelectionButtonsStatus();
            };
            ListControl.prototype.toggleAllRowsSelection = function (action) {
                var self = this;
                var select = action === "SELECT";
                this.status.selectedItemKeys = [];
                this.status.allRecordsSelected = action === "SELECT";
                this.$listData.find(".list-data-row")
                    .each(function () {
                    self.toggleRowSelection($(this), select);
                });
                if (!this.options.isPickList) {
                    this.updateSelection();
                }
                else {
                    this.updateControl({ refreshDimensions: true });
                }
                this.updateSelectionButtonsStatus();
            };
            ListControl.prototype.updateSelectionButtonsStatus = function () {
                var allRowsSelected = this.status.allRecordsSelected;
                var allPageRowsSelected = allRowsSelected ||
                    this.$listData.find(".list-data-row:not(." + this.options.selectedRowClass + ")").length === 0;
                var $selectPageRows = this.$listHeader.find(".select-all-page-rows");
                var $selectAllRows = this.$listHeader.find(".select-all-rows");
                $selectPageRows.data("action", allPageRowsSelected ? "DESELECT" : "SELECT");
                $selectAllRows.data("action", allRowsSelected ? "DESELECT" : "SELECT");
                $selectPageRows.html(allPageRowsSelected
                    ? this.resources.DeselectAllPageRecordsText
                    : this.resources.SelectAllPageRecordsText);
                $selectAllRows.html(allRowsSelected
                    ? this.resources.DeselectAllRecordsPromptText
                    : this.resources.SelectAllRecordsPromptText);
            };
            ListControl.prototype.toggleRowSelection = function ($row, select) {
                $row.toggleClass(this.options.selectedRowClass, select === true);
                if (this.options.enableCompactText !== false) {
                    $row.find(".list-data-cell > span:not(.circled-num)").toggleClass("full-text", select === true);
                }
            };
            ListControl.prototype.restoreSelectedItems = function () {
                if (this.$listData == null)
                    return;
                var $visibleRows = this.$listData.find(".list-data-row");
                for (var i = 0; i < $visibleRows.length; i++) {
                    var $row = $visibleRows.eq(i);
                    var isSelected = this.status.selectedItemKeys.indexOf($row.data("key")) > -1 ||
                        this.status.allRecordsSelected;
                    this.toggleRowSelection($row, isSelected);
                }
            };
            ListControl.prototype.onRowClick = function (row) {
                var $row = $(row);
                var selectedClass = this.options.selectedRowClass;
                if (this.options.hasMultiselection === false) {
                    this.status.selectedItemKeys = [];
                    this.$listData.find("." + selectedClass).addClass("previous-selection");
                    if (this.options.enableCompactText !== false) {
                        this.$listData.find("." + selectedClass + " td.list-data-cell > span:not(.circled-num)")
                            .addClass("full-text");
                    }
                }
                this.$listData.find(".previous-selection").removeClass(selectedClass).removeClass("previous-selection");
                this.toggleRowSelection($row, $row.hasClass(selectedClass) === false);
                this.updateSelectionButtonsStatus();
                var key = $row.data("key");
                if ($row.hasClass(selectedClass)) {
                    this.addRowKeyToSelectedItems(key);
                }
                else {
                    this.removeRowKeyFromSelectedItems(key);
                }
                if (!this.options.isPickList) {
                    this.updateSelection();
                }
                else {
                    this.updateControl({ refreshDimensions: true });
                }
            };
            ListControl.prototype.onRowDblClick = function (row) {
                var selectedClass = this.options.selectedRowClass;
                var $row = $(row);
                var $defaultActionBtn = this.options.$container.find(".list-default-action:not(.not-accessible)");
                this.clearSelectedItems();
                $row.addClass(selectedClass);
                this.status.selectedItemKeys.push($row.data("key"));
                if ($defaultActionBtn.length === 0)
                    this.updateActionButtonVisibility();
                if (!this.options.isPickList) {
                    this.updateSelection();
                }
                else {
                    this.updateControl({ refreshDimensions: true });
                }
                $defaultActionBtn = this.options.$container.find(".list-default-action:not(.not-accessible)");
                if ($defaultActionBtn.length > 0) {
                }
                $defaultActionBtn.click();
            };
            ListControl.prototype.clearSelectedItems = function () {
                var selectedClass = this.options.selectedRowClass;
                this.status.selectedItemKeys = [];
                this.status.allRecordsSelected = false;
                this.$listData.find("." + selectedClass).removeClass(selectedClass);
            };
            ListControl.prototype.addRowKeyToSelectedItems = function (key) {
                this.status.selectedItemKeys.push(key);
            };
            ListControl.prototype.removeRowKeyFromSelectedItems = function (key) {
                var indexToSplice = -1;
                for (var i = 0; i < this.status.selectedItemKeys.length; i++) {
                    if (this.status.selectedItemKeys[i] === key) {
                        indexToSplice = i;
                        break;
                    }
                }
                if (indexToSplice > -1) {
                    this.status.selectedItemKeys.splice(indexToSplice, 1);
                }
            };
            ListControl.prototype.updateActionButtonVisibility = function () {
                if (this.status.selectedItemKeys != null && this.status.selectedItemKeys.length === 0 && this.status.allRecordsSelected === false) {
                    this.options.$container.find(".show-single").addClass("hidden");
                    this.options.$container.find(".show-multi").addClass("hidden");
                }
                else if (this.status.selectedItemKeys != null && this.status.selectedItemKeys.length === 1) {
                    this.options.$container.find(".show-single").removeClass("hidden");
                    this.options.$container.find(".show-multi").removeClass("hidden");
                }
                else {
                    this.options.$container.find(".show-single").addClass("hidden");
                    this.options.$container.find(".show-multi").removeClass("hidden");
                }
                var disabledFromCf = this.options.$container.find(".not-accessible");
                for (var i = 0; i < disabledFromCf.length; i++) {
                    this.$rowContextMenu.find("[data-target='" + disabledFromCf.eq(i).attr("jb-id") + "']").addClass("hidden");
                    this.options.$container.find(".list-action-buttons-container")
                        .find("[data-target='" + disabledFromCf.eq(i).attr("jb-id") + "']")
                        .addClass("hidden");
                }
                var actionButtonsAvailable = this.options.$container
                    .find(".mobile-dropdown-menu .show-always:not(.hidden):not(.not-accessible), .mobile-dropdown-menu .show-single:not(.hidden):not(.not-accessible), .mobile-dropdown-menu .show-multi:not(.hidden):not(.not-accessible)")
                    .length >
                    0;
                var preferencesButtonsAvailable = false;
                this.options.$container.find(".mobile-dropdown-menu a:not([class*=show-])")
                    .each(function () {
                    if ($(this).css("display") != "none")
                        preferencesButtonsAvailable = true;
                });
                this.options.$container.find(".header-toolbar-container.mobile .actions-divider")
                    .toggle(actionButtonsAvailable && preferencesButtonsAvailable);
                this.options.$container.find(".header-toolbar-container.mobile .mobile-menu")
                    .toggle(actionButtonsAvailable || preferencesButtonsAvailable);
                var noBorder = this.options.pagerPosition === "TOP" &&
                    this.options.hasPreferences === false &&
                    this.options.isGroupable === false &&
                    this.options.isSearchable === false &&
                    ((this.$listHeader.find(".mobile-menu:visible").length === 0 && this.isMobileMode) ||
                        (!this.isMobileMode &&
                            this.$listHeader
                                .find(".header-toolbar-container:not(.mobile) .btn-list-reset:visible")
                                .length ===
                                0));
                this.$listPager.toggleClass("no-border", noBorder);
            };
            ListControl.prototype.updateSelection = function (cb) {
                var _this = this;
                this.saveStateToLocalStorage();
                var scope = Joove.Common.getScope();
                var indexes = this.getControlIndexes();
                var $controlInstace = this.options.isPickList ? this.$ownerButton : this.options.$container;
                var someKeysAreExcluded = this.options.isPickList && this.options.excludeSelected;
                var self = this;
                var merge = someKeysAreExcluded === true && self.options.hasMultiselection !== false;
                var updateUsingKeys = false;
                if (!this.status.allRecordsSelected) {
                    var selectedInstances = [];
                    for (var i = 0; i < this.status.selectedItemKeys.length; i++) {
                        var currentKey = this.status.selectedItemKeys[i];
                        var item = this.getItemFromCollectionByKey(currentKey);
                        if (item == null &&
                            someKeysAreExcluded === true &&
                            this.initiallySelectedKeys.indexOf(currentKey) > -1) {
                            continue;
                        }
                        else if (item == null) {
                            updateUsingKeys = true;
                            break;
                        }
                        else {
                            selectedInstances.push(item);
                        }
                    }
                }
                var directiveScope = Joove.Common.getDirectiveScope($controlInstace);
                if (this.status.allRecordsSelected === true) {
                    directiveScope.fullRecordsetIsSelected = this.status.allRecordsSelected === true;
                    directiveScope.requestSelectedItemsfromServer = true;
                }
                else if (updateUsingKeys === true) {
                    directiveScope.fullRecordsetIsSelected = false;
                    directiveScope.requestSelectedItemsfromServer = true;
                }
                else {
                    directiveScope.fullRecordsetIsSelected = false;
                    directiveScope.requestSelectedItemsfromServer = false;
                }
                if (this.options.isPickList === true || directiveScope.requestSelectedItemsfromServer === true) {
                    Joove.DatasourceManager.requestSelectedItemsfromServer(this.elementId, $controlInstace, directiveScope.itemDataType, directiveScope.fullRecordsetIsSelected, this.status.selectedItemKeys, someKeysAreExcluded ? this.initiallySelectedKeys : [], null, function (selectedItemsData) {
                        _this.onSelectedItemsDataReceived(directiveScope, selectedItemsData, merge, cb);
                    });
                }
                else {
                    this.onSelectedItemsDataReceived(directiveScope, selectedInstances, merge, cb);
                }
                this.updateControl({ refreshDimensions: this.options.isPickList !== true });
            };
            ListControl.prototype.onSelectedItemsDataReceived = function (directiveScope, selectedItemsData, merge, cb) {
                this.updateSelectionInDirective(directiveScope, selectedItemsData, merge);
                this.updateSelectedKeysInModel(directiveScope.selectedItemKeys);
                if (cb)
                    cb(selectedItemsData);
                this.triggerOnChangeMethod();
            };
            ListControl.prototype.updateSelectionInDirective = function (directiveScope, selectedItemsData, merge) {
                if (this.options.hasMultiselection !== false && selectedItemsData != null && Array.isArray(selectedItemsData) === false) {
                    selectedItemsData = [selectedItemsData];
                }
                if (merge === true) {
                    for (var i = 0; i < selectedItemsData.length; i++) {
                        directiveScope.selectedItems.push(selectedItemsData[i]);
                    }
                }
                else {
                    directiveScope.selectedItems = selectedItemsData;
                }
                directiveScope.selectedItemKeys = Joove.DatasourceManager.getKeys(directiveScope.selectedItems);
            };
            ListControl.prototype.updateSelectedKeysInModel = function (keys) {
                var controlName = this.options.isPickList !== true
                    ? this.elementId
                    : this.elementId.substring(0, this.elementId.length - "_PickList".length);
                Joove.DatasourceManager.updateSelectedKeysInModel(controlName, keys, this.status.allRecordsSelected, this.getControlIndexes().indexes);
            };
            ListControl.prototype.triggerOnChangeMethod = function () {
                var $controlInstace = this.options.isPickList === true
                    ? this.$ownerButton
                    : this.options.$container;
                var partialControlName = Joove.Core.getPartialViewControlOriginalName($controlInstace);
                var controlName = partialControlName || this.elementId;
                if (this.options.isPickList === true) {
                    controlName = controlName.substring(0, controlName.length - "_PickList".length);
                }
                var $parentRow = Joove.Common.getContextItemElement($controlInstace);
                var $el = $parentRow.length == 0
                    ? $("[jb-id='" + controlName + "']").eq(0)
                    : $parentRow.find("[jb-id='" + controlName + "']").eq(0);
                Joove.DatasourceManager.invokeOnChangeHandler($el);
            };
            ListControl.prototype.getControlIndexes = function () {
                if (this.options.isPickList === true) {
                    return Joove.Common.getIndexesOfControl(this.$ownerButton);
                }
                else {
                    return Joove.Common.getIndexesOfControl(this.options.$container);
                }
            };
            ListControl.prototype.getItemFromCollectionByKey = function (key) {
                for (var i = 0; i < this.data.length; i++) {
                    if (this.data[i]._key == key) {
                        return this.data[i];
                    }
                }
            };
            ListControl.prototype.changePage = function (page) {
                var $pageInput = this.$listPager.find(".list-current-page:visible");
                var pageToGo = $pageInput.val();
                var startRow = null;
                if (page == "+") {
                    pageToGo++;
                }
                else if (page == "-") {
                    pageToGo--;
                }
                if (pageToGo == this.status.currentPage)
                    return;
                startRow = (pageToGo * this.status.pageSize) - this.status.pageSize;
                if (startRow < 0 || (startRow > this.status.totalRows && this.status.groupBy.length == 0)) {
                    $pageInput.val(String(this.status.currentPage));
                    return;
                }
                $pageInput.val(pageToGo);
                this.status.startRow = startRow;
                var $verticalScroll = this.$listVerticalScrollbar.find(".scrollbar-content-wrapper");
                if ($verticalScroll != null)
                    $verticalScroll.scrollTop(0);
                this.updateData({
                    refreshHeader: false,
                    keepAggregatorsOfFullRecordSet: true
                });
            };
            ListControl.prototype.changePageSize = function (newSize) {
                this.status.pageSize = parseInt(newSize);
                this.status.startRow = 0;
                this.updateData({
                    refreshHeader: false,
                    keepAggregatorsOfFullRecordSet: true
                });
            };
            ListControl.prototype.applyGlobalFilter = function () {
                var $searchInput = this.$listHeader.find(".header-toolbar-container:visible .global-search-input");
                var $clearGlobalFilter = this.$listHeader.find(".header-toolbar-container:visible .global-search-clear");
                var searchTerm = $searchInput.val();
                if (searchTerm.trim().length === 0) {
                    this.clearGlobalSearch();
                    return;
                }
                $clearGlobalFilter.show();
                var predefinedFiltersApplied = this.listHasPredefinedFilterApplied();
                this.status.filters = [];
                this.status.startRow = 0;
                var searchTermType = Joove.Common.guessStringMambaDataType(searchTerm);
                var operator;
                for (var i = 0; i < this.status.columns.length; i++) {
                    var currentColumn = this.status.columns[i];
                    if (currentColumn.searchable === false ||
                        this.columnHasPredefinedFilterApplied(currentColumn.name)) {
                        continue;
                    }
                    switch (searchTermType) {
                        case Joove.MambaDataType.BOOL:
                            if (!(Joove.Common.getMambaDataType(currentColumn.mambaDataType) === Joove.MambaDataType.BOOL ||
                                Joove.Common.getMambaDataType(currentColumn.mambaDataType) === Joove.MambaDataType.STRING))
                                continue;
                            break;
                        case Joove.MambaDataType.NUMBER:
                            if (!(Joove.Common.getMambaDataType(currentColumn.mambaDataType) === Joove.MambaDataType.NUMBER ||
                                Joove.Common.getMambaDataType(currentColumn.mambaDataType) === Joove.MambaDataType.STRING))
                                continue;
                            break;
                        case Joove.MambaDataType.STRING:
                            if (Joove.Common.getMambaDataType(currentColumn.mambaDataType) !== Joove.MambaDataType.STRING)
                                continue;
                            break;
                    }
                    if (Joove.Common.getMambaDataType(currentColumn.mambaDataType) === Joove.MambaDataType.STRING) {
                        operator = Joove.FilterOperators.LIKE;
                    }
                    else {
                        operator = Joove.FilterOperators.EQUAL_TO;
                    }
                    this.status.filters.push(new Widgets.ListFilter(currentColumn, operator, searchTerm, Joove.RowOperators.OR, "GLOBAL"));
                }
                if (predefinedFiltersApplied) {
                    var lastFilter = this.status.filters[this.status.filters.length - 1];
                    if (lastFilter != null)
                        lastFilter.rowOperator = Joove.RowOperators.AND;
                    this.applyPredefinedFilters(true);
                }
                this.focusOnElement = ".header-toolbar-container:visible .global-search-input";
                this.updateData();
            };
            ListControl.prototype.applyQuickFilters = function () {
                this.clearQuickFilters();
                this.applyPredefinedFilters(true);
                var quickFilterInputs = this.$listColumnHeader.find(".quick-filter, .clmscombobox-value-container");
                for (var i = 0; i < quickFilterInputs.length; i++) {
                    var $input = quickFilterInputs.eq(i);
                    var $wrapper = $input.closest(".quick-filter-wrapper");
                    var isDropDown = $wrapper.hasClass("has-custom-drop-down");
                    $input.removeClass("quick-filter-applied");
                    var column = $input.closest("th").data("column");
                    var columnInfo = this.getColumnInfoByName(column);
                    var term = $input.val().trim();
                    if (isDropDown)
                        term = $wrapper.find(".clmscombobox.form-control").combobox("getValue");
                    if (typeof (term) == "undefined" || term === null || term.length === 0)
                        continue;
                    var terms = [];
                    this.removeFilterFromColumn(column, true);
                    if (columnInfo.dataType === "DateTime") {
                        terms = [
                            Joove.Common.getUtcDateFromRawString(term, this.getFormatOfDate(columnInfo.formatting, true))
                        ];
                    }
                    else if ($input.hasClass("default-input") && isDropDown === false) {
                        terms = $input.val().split(" ");
                    }
                    else {
                        terms = [term];
                    }
                    $input.closest(".column-quick-filter").find(".remove-quick-filter").removeClass("hidden");
                    $input.siblings(".apply-quick-filter").show();
                    $input.addClass("quick-filter-applied");
                    for (var j = 0; j < terms.length; j++) {
                        var operator = isDropDown ? Joove.FilterOperators.EQUAL_TO : Joove.FilterOperators.LIKE;
                        this.status.filters.push(new Joove.Widgets
                            .ListFilter(columnInfo, operator, terms[j], Joove.RowOperators.AND, "QUICK"));
                    }
                }
                this.updateData();
            };
            ListControl.prototype.applyPredefinedFilters = function (doNotRefresh) {
                if (doNotRefresh !== true) {
                    this.clearGlobalSearch(true);
                    this.clearAllQuickFilters(true);
                    this.updateData({
                        keepAggregatorsOfFullRecordSet: false,
                        showControl: true
                    });
                    return;
                }
                var predefinedFilterInputs = $("[data-filter-for-list='" + this.elementId + "']:not(.quick-filter)");
                var seenColumns = [];
                for (var i = 0; i < predefinedFilterInputs.length; i++) {
                    var $input = predefinedFilterInputs.eq(i);
                    var isDropDown = $input.attr("jb-type") === "DropDown";
                    var isRequired = $input.parent().hasClass("WebForms-Required");
                    var column = $input.data("filter-for-column");
                    var term = $input.val().trim();
                    if (typeof (term) == "undefined" || term === null || term.length == 0) {
                        if (isRequired === false)
                            continue;
                        for (var i_2 = 0; i_2 < this.status.filters.length; i_2++) {
                            if (this.status.filters[i_2].type !== "PREDEFINED")
                                continue;
                            this.status.filters.splice(i_2, 1);
                        }
                        window._popUpManager.warning(this.resources.RequiredFiltersMissingTitle, "Warning", this.resources.RequiredFiltersMissingMessage);
                        return;
                    }
                    if (seenColumns.indexOf(column) > -1)
                        continue;
                    seenColumns.push(column);
                    this.removeFilterFromColumn(column);
                    if ($input.hasClass("date-filter-from") || $input.hasClass("date-filter-to")) {
                        var firstDate = $(".date-filter-from[data-filter-for-column='" + column + "'][data-filter-for-list='" + this.elementId + "']")
                            .val()
                            .trim();
                        var secondDate = $(".date-filter-to[data-filter-for-column='" + column + "'][data-filter-for-list='" + this.elementId + "']")
                            .val()
                            .trim();
                        if (firstDate.length === 0)
                            firstDate = "01/01/1753";
                        if (secondDate.length === 0)
                            secondDate = "31/12/9999";
                        this.status.filters.push(new Joove.Widgets.ListFilter(this.getColumnInfoByName(column), Joove.FilterOperators.RANGE, firstDate + "|" + secondDate, Joove.RowOperators.AND, "PREDEFINED"));
                    }
                    else {
                        var operator = isDropDown ? Joove.FilterOperators.EQUAL_TO : Joove.FilterOperators.LIKE;
                        this.status.filters.push(new Joove.Widgets
                            .ListFilter(this.getColumnInfoByName(column), operator, term, Joove.RowOperators.AND, "PREDEFINED"));
                    }
                }
                if (doNotRefresh === true)
                    return;
                this.updateData({
                    keepAggregatorsOfFullRecordSet: false,
                    showControl: true
                });
            };
            ListControl.prototype.clearQuickFilter = function (btn, doNotRefresh) {
                var $btn = $(btn);
                var $wrapper = $btn.closest(".quick-filter-wrapper");
                $wrapper.find("input.quick-filter").val("");
                $wrapper.find("select.bool-quick-filter").val("");
                $btn.siblings(".apply-quick-filter").hide();
                if ($wrapper.hasClass("has-custom-drop-down")) {
                    var $customDropDown = $wrapper.find(".clmscombobox.form-control");
                    $customDropDown.combobox("clear");
                }
                $btn.addClass("hidden");
                if (doNotRefresh)
                    return;
                this.applyQuickFilters();
            };
            ListControl.prototype.clearAllQuickFilters = function (doNotRefresh) {
                var allRemoveButtons = $(".remove-quick-filter");
                for (var i = 0; i < allRemoveButtons.length; i++) {
                    this.clearQuickFilter(allRemoveButtons[i], true);
                }
                if (doNotRefresh === true)
                    return;
                this.applyQuickFilters();
            };
            ListControl.prototype.clearGlobalSearch = function (doNotRefresh) {
                if (this.$listColumnHeader != null) {
                    var $searchInput = this.$listColumnHeader.find(".global-search-input");
                    var $clearGlobalFilter = this.$listColumnHeader.find(".global-search-clear");
                    $searchInput.val("");
                    $clearGlobalFilter.hide();
                }
                this.status.filters = [];
                this.status.startRow = 0;
                this.applyPredefinedFilters(true);
                if (doNotRefresh === true)
                    return;
                this.updateData();
            };
            ListControl.prototype.clearQuickFilters = function () {
                var nonQuickFilterFilters = this.status.filters.filter(function (fltr) { return (fltr.type !== "QUICK"); });
                this.status.filters = nonQuickFilterFilters;
            };
            ListControl.prototype.clearClosedGroupItemsFilters = function (doNotRefresh) {
                for (var i = this.status.filters.length - 1; i >= 0; i--) {
                    if (this.status.filters[i].type != "FROM_CLOSED_GROUPS")
                        continue;
                    this.status.filters.splice(i, 1);
                }
                if (doNotRefresh === true)
                    return;
                this.updateData({ refreshHeader: false });
            };
            ListControl.prototype.listDisplaysClosedGroupItems = function () {
                for (var i = this.status.filters.length - 1; i >= 0; i--) {
                    if (this.status.filters[i].type == "FROM_CLOSED_GROUPS")
                        return true;
                }
                return false;
            };
            ListControl.prototype.clearAllAggregators = function (doNotRefresh) {
                this.status.aggregators = [];
                this.aggregatorsData = [];
                if (doNotRefresh === true)
                    return;
                this.updateAggregatorsData();
            };
            ListControl.prototype.clearAllFilters = function (doNotRefresh) {
                this.clearAllQuickFilters(true);
                this.clearGlobalSearch(true);
                this.clearPredefinedFilters(true);
                this.status.currentPage = 1;
                this.status.startRow = 0;
                if (this.options.waitForPredefinedFilters !== false) {
                    this.hideControl();
                    return;
                }
                if (doNotRefresh === true)
                    return;
                this.updateData();
            };
            ListControl.prototype.clearPredefinedFilters = function (doNotRefresh) {
                var $textBoxes = $("[jb-type='TextBox'][data-filter-for-list='" + this.elementId + "']:not(.quick-filter)");
                var $dateTimeBoxes = $(".WebForms-DateTimeBox[data-filter-for-list='" + this.elementId + "']:not(.quick-filter)");
                var $dropDowns = $("[jb-type='DropDownBox'][data-filter-for-list='" + this.elementId + "']:not(.quick-filter)");
                $textBoxes.val("");
                $dateTimeBoxes.val("");
                for (var i = 0; i < $dropDowns.length; i++) {
                    var $current = $dropDowns.eq(i);
                    var pleaseSelectText = $current.find("input").eq(0).attr("pleaseselecttext");
                    $current.find(".clmscombobox.form-control").combobox("clear");
                }
                if (doNotRefresh === true)
                    return;
                this.updateData();
            };
            ListControl.prototype.removeFilterFromColumn = function (column, keepPredefined) {
                for (var i = this.status.filters.length - 1; i >= 0; i--) {
                    if (this.status.filters[i].column !== column)
                        continue;
                    if (this.status.filters[i].type === "PREDEFINED" && keepPredefined === true)
                        continue;
                    this.status.filters.splice(i, 1);
                }
            };
            ListControl.prototype.columnHasPredefinedFilterApplied = function (column) {
                for (var i = 0; i < this.status.filters.length; i++) {
                    if (this.status.filters[i].type === "PREDEFINED" &&
                        this.status.filters[i].column === column)
                        return true;
                }
                return false;
            };
            ListControl.prototype.listHasPredefinedFilterApplied = function () {
                for (var i = 0; i < this.status.filters.length; i++) {
                    if (this.status.filters[i].type === "PREDEFINED")
                        return true;
                }
                return false;
            };
            ListControl.prototype.getGlobalFilterValue = function () {
                for (var i = 0; i < this.status.filters.length; i++) {
                    if (this.status.filters[i].type === "GLOBAL")
                        return this.status.filters[i].value;
                }
                return null;
            };
            ListControl.prototype.toggleQuickFiltersRow = function (btn) {
                var _this = this;
                var $btn = $(btn);
                var $quickFiltersContainer = this.$listColumnHeader.find(".quick-filters-container");
                if ($btn.hasClass("expanded")) {
                    $btn.addClass("collapsed").removeClass("expanded");
                    $btn.find(".toggle-quick-filters-caption").text(this.resources.ShowQuickFilters);
                    $quickFiltersContainer.fadeOut((function () {
                        _this.updateControl({ refreshDimensions: true });
                    }));
                }
                else {
                    $btn.addClass("expanded").removeClass("collapsed");
                    $btn.find(".toggle-quick-filters-caption").text(this.resources.HideQuickFilters);
                    $quickFiltersContainer.fadeIn((function () {
                        _this.updateControl({ refreshDimensions: true });
                    })).css('display', 'table-row');
                }
            };
            ;
            ListControl.prototype.showQuickFiltersRow = function () {
                var $btn = this.$listHeader.find(".toggle-quick-filters");
                var $quickFiltersContainer = this.$listColumnHeader.find(".quick-filters-container");
                $btn.addClass("expanded").removeClass("collapsed");
                $btn.find(".toggle-quick-filters-caption").text(this.resources.HideQuickFilters);
                $quickFiltersContainer.css("display", "table-row");
                this.updateControl({ refreshDimensions: true });
            };
            ListControl.prototype.hideQuickFiltersRow = function () {
                var _this = this;
                var $btn = this.$listHeader.find(".toggle-quick-filters");
                var $quickFiltersContainer = this.$listColumnHeader.find(".quick-filters-container");
                $btn.addClass("collapsed").removeClass("expanded");
                $btn.find(".toggle-quick-filters-caption").text(this.resources.ShowQuickFilters);
                $quickFiltersContainer.fadeOut((function () {
                    _this.updateControl({ refreshDimensions: true });
                    return 100;
                }));
            };
            ListControl.prototype.resetList = function (bypassConfirm) {
                if (bypassConfirm !== true)
                    if (confirm(this.resources.ResetConfirmation) === false)
                        return;
                this.clearAllFilters(true);
                this.status.currentPage = 0;
                this.status.selectedItemKeys = [];
                this.status.allRecordsSelected = false;
                this.status.startRow = 0;
                this.status.endRow = 0;
                this.status.pageSize = 25;
                this.status.totalRows = 0;
                this.status.totalPages = 0;
                this.status.filters = [];
                this.status.orderBy = [];
                this.status.groupBy = [];
                this.status.currentView = "PREDEFINED";
                for (var i = 0; i < this.status.columns.length; i++) {
                    var current = this.status.columns[i];
                    current.width = 0;
                    current.customWidth = 0;
                    current.minWidth = 0;
                    current.isVisible = typeof (this.options.hiddenColumns) == "undefined" ||
                        this.options.hiddenColumns.indexOf(current.name) === -1;
                }
                if (this.options.predefinedGroups != null) {
                    this.applyPredefinedGrouping();
                }
                this.updateData();
            };
            ListControl.prototype.displayClosedGroupContents = function (groupInfo) {
                if (this.status.filters.length > 0) {
                    this.status.filters[this.status.filters.length - 1].rowOperator = Joove.RowOperators.AND;
                }
                this.toggleAllGroupsActivation();
                for (var i = 0; i < groupInfo.filters.length; i++) {
                    var column = this.getColumnInfoByName(groupInfo.filters[i].column);
                    var value = groupInfo.filters[i].value;
                    var dataType = column.dataType;
                    var operator = value == null || value === ListControlAsset.NullString || value === "null" ? Joove.FilterOperators.HAS_NO_VALUE : Joove.FilterOperators.EQUAL_TO;
                    if (this.isDataTypeNumeric(dataType))
                        value = this.forceNumberFormat(value);
                    this.status.filters.push(new Widgets.ListFilter(column, operator, value, Joove.RowOperators.AND, "FROM_CLOSED_GROUPS"));
                    this.toggleGroupActivation(column, true, true);
                }
                this.status.startRow = 0;
                this.status.getGroupsClosed = false;
                this.expandAllGroups(this.status.groupBy);
                this.updateData();
            };
            ListControl.prototype.changeStateOnAllGroups = function (groups, state, value) {
                for (var i = 0; i < groups.length; i++) {
                    var current = groups[i];
                    current.state = state;
                    current.getGroupsClosed = value;
                }
            };
            ListControl.prototype.expandAllGroups = function (groups) {
                this.changeStateOnAllGroups(groups, "EXPANDED", false);
            };
            ListControl.prototype.collapseAllGroups = function (groups) {
                this.changeStateOnAllGroups(groups, "COLLAPSED", true);
            };
            ListControl.prototype.toggleAllGroupsActivation = function (activate) {
                for (var i = 0; i < this.status.groupBy.length; i++) {
                    this.status.groupBy[i].inactive = !this.status.groupBy[i].inactive;
                }
            };
            ListControl.prototype.toggleGroupActivation = function (column, activate, expand) {
                for (var i = 0; i < this.status.groupBy.length; i++) {
                    var current = this.status.groupBy[i];
                    if (current.column.name === column.name)
                        current.inactive = !current.inactive;
                    if (expand)
                        current.initialState = "EXPANDED";
                }
            };
            ListControl.prototype.forceNumberFormat = function (raw) {
                var value = raw;
                value = value.replace(",", ".");
                return value;
            };
            ListControl.prototype.toggleGrids = function (targetCls) {
                if (this.options.standAlone !== false) {
                    this.toggleStandAloneGrids(targetCls);
                }
                else {
                    this.toggleControlModeGrids(targetCls);
                }
            };
            ListControl.prototype.toggleControlModeGrids = function (targetCls) {
                var $gridsContainer = this.$list.find(".list-preferences-fieldsets-container");
                var $target = this.$list.find(".list-preferences-fieldsets-container ." + targetCls);
                var self = this;
                if ($target.is(":visible")) {
                    $target.fadeOut((function () {
                        $gridsContainer.toggle($gridsContainer.find(".collapsible-grid:visible").length > 0);
                        self.updateControl({ refreshDimensions: true });
                    }));
                }
                else {
                    $gridsContainer.find(".collapsible-grid").hide();
                    $gridsContainer.show();
                    $target.fadeIn();
                    self.updateControl({ refreshDimensions: true });
                }
            };
            ListControl.prototype.toggleStandAloneGrids = function (targetCls) {
                var $target = this.options.$container.find("." + targetCls);
                var self = this;
                if ($target.hasClass("shown")) {
                    $target.hide();
                    $target.removeClass("shown");
                    self.updateControl({ "refreshDimensions": true });
                }
                else {
                    $target.show();
                    $target.addClass("shown");
                    if ($target.parent().hasClass("list-docked-grids")) {
                        this.restrictOneDockedGrid(targetCls);
                    }
                    self.updateControl({ "refreshDimensions": true });
                }
            };
            ListControl.prototype.handleGridButtonState = function () {
                if (this.$listHeader != null) {
                    this.$listHeader.find(".header-toolbar-container:not(.mobile) button.btn-list-preferences")
                        .toggleClass("active", this.$preferencesContainer.find(".preferences-grid").hasClass("shown"))
                        .blur();
                    this.$listHeader.find(".header-toolbar-container:not(.mobile) button.btn-list-filters")
                        .toggleClass("active", this.$filtersContainer.find(".filters-grid").hasClass("shown"))
                        .blur();
                    this.$listHeader.find(".header-toolbar-container:not(.mobile) button.btn-list-groups")
                        .toggleClass("active", this.$groupsContainer.find(".groups-grid").hasClass("shown"))
                        .blur();
                }
            };
            ListControl.prototype.getExportDisplayColumns = function () {
                return "<div  id='exportDisplayColumns' class= \"hideColumnsPopUp\" jb-id='exportDisplayColumns' >                     <table class='table-headers-export-visible-columns'>                         <thead>                            <tr>                                <th style='width:181px; padding-left: 8px; '>                                    <span class='export-pop-up-subtitle'>" + this.resources.ColumnExport + "</span>                                </th>                                <th style='width:68px; text-align: center;'>                                    <span class='export-pop-up-subtitle'>" + this.resources.VisibleExport + "</span>                                </th>                                <th style='width:68px; text-align: center;'>                                    <span class='export-pop-up-subtitle'>" + this.resources.SumHeader + "</span>                                </th>                                <th style='width:68px; text-align: center;'>                                    <span class='export-pop-up-subtitle'>" + this.resources.AverageHeader + "</span>                                </th>                                <th style='width:67px; text-align: center;'>                                    <span class='export-pop-up-subtitle'>" + this.resources.CountHeader + "</span>                                </th>                                <th style='width:18px; text-align: center;'>                                </th>                            </tr>                            <tr>                                <th style='vertical-align: top; '>                                </th>                                <th style='vertical-align: top; text-align: center;'>                                    <input class='checkall-header-isvisible' type='checkbox' data-state='unchecked'/>                                </th>                                <th style='vertical-align: top; text-align: center;'>                                    <input class='checkall-header-issum' type='checkbox' data-state='unchecked'/>                                </th>                                <th style='vertical-align: top; text-align: center;'>                                    <input class='checkall-header-isaverage' type='checkbox' data-state='unchecked'/>                                </th>                                <th style='vertical-align: top; text-align: center;'>                                    <input class='checkall-header-iscount' type='checkbox' data-state='unchecked'/>                                </th>                                <th style='vertical-align: top; text-align: center;'>                                </th>                            </tr>                        </thead>                    </table>                         <div class='export-table-display-columns'>                             <table class='preferences-table table table-hover' style='width:452px'>                             <tbody>                                 " + this.populateExportPopUpTableDisplyContainer() + "                             </tbody>                             </table>                         </div>                     </div>";
            };
            ListControl.prototype.populateExportPopUpTableDisplyContainer = function () {
                var str = "";
                for (var i = 0; i < this.status.columns.length; i++) {
                    var column = this.status.columns[i];
                    var checkedAttr = column.isVisible === true ? "checked='checked'" : "";
                    var line = "<tr class='row-preference' data-column='" + column.name + "'>                            <td style='width:181px; text-align:left;'>                                <span>" + column.caption + "</span>                            </td>                            <td style='width:68px; text-align:center;'>                                <input type='checkbox' class='column-is-visible checkbox-position' " + checkedAttr + "/>                            </td>                            <td style='width:68px; text-align:center;'>                                <input type='checkbox' class='sum-is-visible checkbox-position' " + this.resources.SumHeader + "/>                            </td>                            <td style='width:68px; text-align:center;'>                                <input type='checkbox' class='average-is-visible checkbox-position' " + this.resources.AverageHeader + "/>                            </td>                            <td style='width:67px; text-align:center;'>                                <input type='checkbox' class='count-is-visible checkbox-position' " + this.resources.CountHeader + "/>                            </td>                        </tr>";
                    str += line;
                }
                return str;
            };
            ListControl.prototype.sortByColumn = function (columnHeader) {
                var $columnHeader = $(columnHeader);
                var column = $columnHeader.parent().data("column");
                var sortDirection;
                if (this.getColumnInfoByName(column).dataType !== "DateTime") {
                    if ($columnHeader.data("sort-direction") === Joove.OrderByDirections.ASC) {
                        sortDirection = Joove.OrderByDirections.DESC;
                        $columnHeader.attr("title", this.resources.Unsort);
                    }
                    else if ($columnHeader.data("sort-direction") === Joove.OrderByDirections.DESC) {
                        sortDirection = Joove.OrderByDirections.NONE;
                        $columnHeader.attr("title", this.resources.SortASC);
                    }
                    else {
                        sortDirection = Joove.OrderByDirections.ASC;
                        $columnHeader.attr("title", this.resources.SortDESC);
                    }
                }
                else {
                    if ($columnHeader.data("sort-direction") === Joove.OrderByDirections.ASC) {
                        sortDirection = Joove.OrderByDirections.NONE;
                        $columnHeader.attr("title", this.resources.SortDESC);
                    }
                    else if ($columnHeader.data("sort-direction") === Joove.OrderByDirections.DESC) {
                        sortDirection = Joove.OrderByDirections.ASC;
                        $columnHeader.attr("title", this.resources.Unsort);
                    }
                    else {
                        sortDirection = Joove.OrderByDirections.DESC;
                        $columnHeader.attr("title", this.resources.SortASC);
                    }
                }
                var classToAdd = sortDirection === Joove.OrderByDirections.DESC
                    ? "glyphicon-arrow-down"
                    : "glyphicon-arrow-up";
                this.$listColumnHeader.find(".sort-direction-icon")
                    .removeClass("glyphicon-arrow-down")
                    .removeClass("glyphicon-arrow-up");
                if (sortDirection !== Joove.OrderByDirections.NONE) {
                    $columnHeader.siblings(".sort-direction-icon").addClass(classToAdd);
                }
                $columnHeader.data("sort-direction", sortDirection);
                this.status.startRow = 0;
                if (sortDirection !== Joove.OrderByDirections.NONE) {
                    this.status.orderBy = [new Widgets.ListOrderByInfo(this.getColumnInfoByName(column), sortDirection, 1)];
                }
                else {
                    this.status.orderBy = [];
                }
                this.updateData({ keepAggregatorsOfFullRecordSet: true });
            };
            ListControl.prototype.moveColumn = function (btn) {
                var $btn = $(btn);
                var direction = $btn.hasClass("move-column-right") ? "RIGHT" : "LEFT";
                var columnName = $btn.closest("th").data("column");
                var column = this.getColumnInfoByName(columnName);
                var columnIndex = this.status.columns.indexOf(column);
                var newIndex = direction == "RIGHT" ? columnIndex + 1 : columnIndex - 1;
                this.hideListData();
                while (this.columnMustBeRendered(this.status.columns[newIndex]) === false) {
                    newIndex = direction == "RIGHT" ? newIndex + 1 : newIndex - 1;
                }
                var columnName1 = columnName;
                var columnName2 = this.status.columns[newIndex].name;
                this.status.columns.splice(columnIndex, 1);
                this.status.columns.splice(newIndex, 0, column);
                this.updateControl({
                    createListHeader: true,
                    createListColumnHeader: true,
                    createListData: true,
                    createRecordSetAggregators: true,
                    updateUiElements: true,
                    refreshDimensions: true,
                    skipVertivalScrollbar: true,
                    keepAggregatorsOfFullRecordSet: true,
                    applyConditionalFormattings: true,
                });
                this.showListData();
                var childIndexToFlashFirstColumn = this.$listColumnHeaderContainer.find("th[data-column='" + columnName1 + "']")
                    .index() +
                    1;
                var childIndexToFlashSecondColumn = this.$listColumnHeaderContainer.find("th[data-column='" + columnName2 + "']")
                    .index() +
                    1;
                var $cellsToFlashFirstColumn = this.$listData
                    .find(".list-data-cell:nth-child(" + childIndexToFlashFirstColumn + ")");
                var $headerToFlashFirstColumn = this.$listColumnHeader
                    .find(".column-title:nth-child(" + childIndexToFlashFirstColumn + ")");
                var $cellsToFlashSecondColumn = this.$listData
                    .find(".list-data-cell:nth-child(" + childIndexToFlashSecondColumn + ")");
                var $headerToFlashSecondColumn = this.$listColumnHeader
                    .find(".column-title:nth-child(" + childIndexToFlashSecondColumn + ")");
                this.showListData();
                var borderToShow = direction == "RIGHT" ? "border-left" : "border-right";
                $cellsToFlashFirstColumn.css(borderToShow, "1px solid white");
                $cellsToFlashFirstColumn.css("transition", "none");
                $cellsToFlashSecondColumn.css("transition", "none");
                this.flashElements($cellsToFlashFirstColumn);
                this.flashElement($headerToFlashFirstColumn);
                window.setTimeout(function () {
                    $cellsToFlashFirstColumn.css("transition", "all ease 0.25s");
                    $cellsToFlashFirstColumn.css(borderToShow, "none");
                }, 1500);
                if (this.$listHeader.find(".available-views:visible").length == 0 ||
                    this.$listHeader.find(".available-views:first option").length == 1)
                    this.$listHeader.find(".btn-list-reset").removeClass("hidden");
            };
            ListControl.prototype.refreshDimensions = function (skipVerticalScrollbar) {
                var self = this;
                if (this.$list == null)
                    return;
                if (this.$listHeader != null) {
                    this.$listHeader
                        .find(".header-toolbar-container.mobile .header-left .global-search-container")
                        .width(0);
                    this.$listHeader.find(".header-toolbar-container.mobile .header-right .available-views").width(0);
                }
                var documentScroll = $(document).scrollTop();
                this.options.$container.css("float", "");
                if (this.options.standAlone !== false)
                    this.$listVerticalScrollbar.css({ "position": "", "top": "", "left": "" });
                this.$listColumnHeader.find(".title").removeClass("too-small");
                var $containerElement = this.options.$container;
                if (this.options.$container.parents(".clms-pop-up-html-contents").length == 1) {
                    $containerElement = this.options.$container.parents(".clms-pop-up-html-contents");
                }
                var containerDimensions = {
                    height: parseInt($containerElement.outerHeight()),
                    width: Math.floor($containerElement.get(0).getBoundingClientRect().width) -
                        (parseInt($containerElement.css("padding-left")) +
                            parseInt($containerElement.css("padding-right")) +
                            parseInt($containerElement.css("border-right-width")) +
                            parseInt($containerElement.css("border-left-width")))
                };
                var totalWidth = this.options.showRowNumbers ? 45 : 0;
                var totalHeight = 0;
                var footerHeight = this.$listFooterContainer != null ? this.$listFooterContainer.outerHeight() : 0;
                var dataContainerWidth = containerDimensions.width;
                var dataContainerHeight;
                var visibleColsNumber = 0;
                var FIXED_FOOTER = 80;
                var windowHeight = window.innerHeight;
                var containerMaxHeight = windowHeight - this.options.$container.offset().top - FIXED_FOOTER;
                var showHorizontalScrollbar;
                if (this.$listDockedGrids.children(".shown").length > 0) {
                    this.$listDockedGrids.width(this.$listDockedGrids.children().eq(0).outerWidth(true));
                }
                else {
                    this.$listDockedGrids.width(0);
                }
                dataContainerWidth -= this.scrollbarSize;
                this.$listColumnHeaderContainer.css("width", dataContainerWidth + "px");
                this.$listDataContainer.css("width", dataContainerWidth + "px");
                this.$listFooterContainer.css("width", dataContainerWidth + "px");
                this.$list.find(".bottom-pager-table").css("width", dataContainerWidth + this.scrollbarSize + "px");
                var tempWidth = [];
                var regExpPatt = /(;|\s|^)+width\s*:\s*([0-9]*)px/i;
                for (var i = 0; i < this.status.columns.length; i++) {
                    var column = this.status.columns[i];
                    if (this.columnMustBeRendered(column) === false)
                        continue;
                    var $titleContainer = this.$listColumnHeader.find(".column-title[data-column='" + column.name + "']")
                        .eq(0);
                    var headerColumnIndex = $titleContainer.index();
                    var columnCssWidth = column.style;
                    var result = regExpPatt.exec(String(columnCssWidth));
                    if (result == null)
                        visibleColsNumber++;
                    if (column.minWidth == null)
                        column.minWidth = this.getDefaultColumnMinWidth();
                    if (column.width == null)
                        column.width = result != null ? parseInt(result[2]) : this.getDefaultColumnWidth(column);
                    tempWidth[headerColumnIndex] = column.customWidth != null
                        ? column.customWidth
                        : column.width;
                    var $aggregatorsCells = this.$listFooterContainer.find(".list-aggregators-row .aggregator-cell")
                        .eq(headerColumnIndex);
                    this.$listData.find(".group-aggregators-row")
                        .each(function () {
                        var $cell = $(this).find(".group-aggregators-cell").eq(Number(headerColumnIndex));
                        if (!$cell.hasClass("row-number"))
                            $aggregatorsCells = $aggregatorsCells.add($cell);
                    });
                    if ($aggregatorsCells.length > 0) {
                        var maxAggregatorWidth = 0;
                        var MARGIN = 25;
                        $aggregatorsCells.find(".aggregator-caption")
                            .each(function () {
                            var currentAggregatorWidth = $(this).outerWidth() + $(this).next().outerWidth() + MARGIN;
                            if (currentAggregatorWidth > maxAggregatorWidth)
                                maxAggregatorWidth = currentAggregatorWidth;
                        });
                        if (maxAggregatorWidth > tempWidth[headerColumnIndex]) {
                            tempWidth[headerColumnIndex] = maxAggregatorWidth;
                        }
                    }
                    $titleContainer.css("width", tempWidth[headerColumnIndex] + "px");
                    $titleContainer.find(".title")
                        .css("max-width", this.getColumnTitleWidth(tempWidth[headerColumnIndex]) + "px");
                    this.$listData.find(".list-data-row, .group-aggregators-row")
                        .each(function () {
                        $(this)
                            .find(".group-aggregators-cell")
                            .eq(Number(headerColumnIndex))
                            .css("width", tempWidth[headerColumnIndex] + "px");
                        $(this)
                            .find(".list-data-cell")
                            .eq(Number(headerColumnIndex))
                            .css("width", tempWidth[headerColumnIndex] + "px");
                    });
                    this.$listFooterContainer.find(".list-aggregators-row .aggregator-cell")
                        .eq(headerColumnIndex)
                        .css("width", tempWidth[headerColumnIndex] + "px");
                    this.$listFooterContainer.find(".group-aggregators-row .group-aggregators-cell")
                        .eq(headerColumnIndex)
                        .css("width", tempWidth[headerColumnIndex] + "px");
                    totalWidth += tempWidth[headerColumnIndex];
                }
                if (totalWidth < dataContainerWidth) {
                    var fixedWidth = (dataContainerWidth - totalWidth) / visibleColsNumber;
                    totalWidth = this.options.showRowNumbers ? 45 : 0;
                    for (var i = 0; i < self.status.columns.length; i++) {
                        var column = self.status.columns[i];
                        if (self.columnMustBeRendered(column) === false)
                            continue;
                        var $titleContainer = this.$listColumnHeader.find(".column-title[data-column='" + column.name + "']")
                            .eq(0);
                        var headerColumnIndex = $titleContainer.index();
                        var columnCssWidth = column.style;
                        var result = regExpPatt.exec(columnCssWidth);
                        if (result == null)
                            tempWidth[headerColumnIndex] += fixedWidth;
                        $titleContainer.css("width", tempWidth[headerColumnIndex] + "px");
                        $titleContainer.find(".title")
                            .css("max-width", this.getColumnTitleWidth(tempWidth[headerColumnIndex]) + "px");
                        this.$listData
                            .find(".list-data-row .list-data-cell:nth-child(" + visibleColsNumber + (this.options
                            .showRowNumbers
                            ? 1
                            : 0) + "n + " + (headerColumnIndex + (this.options.showRowNumbers ? 1 : 0)) + "):not(.row-number)")
                            .css("width", tempWidth[headerColumnIndex] + "px");
                        this.$listData.find(".group-aggregators-row .group-aggregators-cell")
                            .eq(headerColumnIndex)
                            .css("width", tempWidth[headerColumnIndex] + "px");
                        this.$listFooterContainer.find(".list-aggregators-row .aggregator-cell")
                            .eq(headerColumnIndex)
                            .css("width", tempWidth[headerColumnIndex] + "px");
                        this.$listFooterContainer.find(".group-aggregators-row .group-aggregators-cell")
                            .eq(headerColumnIndex)
                            .css("width", tempWidth[headerColumnIndex] + "px");
                        totalWidth += tempWidth[headerColumnIndex];
                    }
                }
                var $dataRows = this.$listData.find("tr");
                for (var i = 0; i < $dataRows.length; i++) {
                    if ($dataRows.eq(i).is(":visible")) {
                        totalHeight += $dataRows.eq(i).outerHeight();
                    }
                }
                this.$listColumnHeader.css("width", totalWidth + "px");
                this.$listData.css("width", totalWidth + "px");
                this.$listFooter.css("width", totalWidth + "px");
                if (this.options.standAlone !== false)
                    this.$listVerticalScrollbar.css({
                        "position": "absolute",
                        "top": this.$listVerticalScrollbar.position().top + "px",
                        "left": this.$listVerticalScrollbar.position().left + "px"
                    });
                showHorizontalScrollbar = parseInt(String(dataContainerWidth)) < parseInt(String(totalWidth));
                if (self.options.standAlone !== false || self.options.$container.parents(".modal-dialog").length === 1) {
                    var MARGIN = 15;
                    var availableHeight = (self.options.$container.parents(".modal-dialog").length === 1
                        ? self.options.$container.parents(".modal-body").height()
                        : containerMaxHeight) -
                        this.$listHeader.outerHeight(true) -
                        this.$listColumnHeaderContainer.outerHeight(true) -
                        footerHeight -
                        (showHorizontalScrollbar ? this.scrollbarSize : 0) -
                        (this.$list.find(".bottom-pager-table").outerHeight() == null
                            ? 0
                            : $(".bottom-pager-table").outerHeight(true)) -
                        MARGIN;
                    var minHeight = parseInt(this.$listDataContainer.css("min-height"));
                    if (availableHeight < minHeight)
                        availableHeight = minHeight;
                    dataContainerHeight = availableHeight;
                }
                else {
                    dataContainerHeight = totalHeight < parseInt(this.$listDataContainer.css("max-height"))
                        ? totalHeight
                        : parseInt(this.$listDataContainer.css("max-height"));
                }
                var standaloneRemainingHeight = dataContainerHeight - totalHeight - 1;
                standaloneRemainingHeight = standaloneRemainingHeight <= 0 ? 0 : standaloneRemainingHeight;
                if (self.options.standAlone !== false) {
                    this.$listDataContainer.find(".row-num-border")
                        .toggle(self.options.showRowNumbers)
                        .css({
                        "height": standaloneRemainingHeight + "px",
                        "margin-top": (standaloneRemainingHeight > 0 &&
                            this.$listData.find(".no-results-row").length == 1
                            ? totalHeight
                            : 0) +
                            "px"
                    });
                }
                this.$listColumnHeader.find(".row-resize-handler")
                    .css("height", (this.$listColumnHeaderContainer.outerHeight() + dataContainerHeight) + "px");
                this.$listDataContainer.css({ "height": dataContainerHeight + "px" });
                var dockableAreaHeight = containerMaxHeight - this.$listHeader.outerHeight(true) - footerHeight;
                this.$listDockedGrids.css("height", dockableAreaHeight + "px");
                var collapsibleGridMainContainerMaxHeight = 0;
                if (this.$listDockedGrids.find(".preferences-grid.shown").length == 1) {
                    collapsibleGridMainContainerMaxHeight += this.$listDockedGrids
                        .find(".preferences-grid.shown .grids-header")
                        .outerHeight();
                    if (!this.isPreferencesMinimized) {
                        collapsibleGridMainContainerMaxHeight +=
                            this.$listDockedGrids.find(".preferences-grid.shown .collapsile-grid-footer").outerHeight();
                    }
                }
                if (this.$listDockedGrids.find(".filters-grid.shown").length == 1) {
                    collapsibleGridMainContainerMaxHeight += this.$listDockedGrids.find(".filters-grid.shown .grids-header")
                        .outerHeight();
                    if (!this.isFiltersMinimized) {
                        collapsibleGridMainContainerMaxHeight +=
                            this.$listDockedGrids.find(".filters-grid.shown .collapsile-grid-footer").outerHeight();
                    }
                }
                if (this.$listDockedGrids.find(".groups-grid.shown").length == 1) {
                    collapsibleGridMainContainerMaxHeight += this.$listDockedGrids.find(".groups-grid.shown .grids-header")
                        .outerHeight();
                    if (!this.isGroupsMinimized) {
                        collapsibleGridMainContainerMaxHeight +=
                            this.$listDockedGrids.find(".groups-grid.shown .collapsile-grid-footer").outerHeight();
                    }
                }
                collapsibleGridMainContainerMaxHeight += this.$listDockedGrids.find(".preferences-grid:visible")
                    .outerHeight(true) -
                    this.$listDockedGrids.find(".preferences-grid:visible").outerHeight();
                collapsibleGridMainContainerMaxHeight += this.$listDockedGrids.find(".filters-grid:visible")
                    .outerHeight(true) -
                    this.$listDockedGrids.find(".filters-grid:visible").outerHeight();
                collapsibleGridMainContainerMaxHeight += this.$listDockedGrids.find(".groups-grid:visible")
                    .outerHeight(true) -
                    this.$listDockedGrids.find(".groups-grid:visible").outerHeight();
                collapsibleGridMainContainerMaxHeight = dockableAreaHeight - collapsibleGridMainContainerMaxHeight;
                if (this.$listDockedGrids.find(".preferences-grid.shown").length == 1 && !this.isPreferencesMinimized) {
                    this.$listDockedGrids.find(".preferences-grid.shown .collapsible-grid-main-container")
                        .css("max-height", collapsibleGridMainContainerMaxHeight + "px");
                }
                if (this.$listDockedGrids.find(".filters-grid.shown").length == 1 && !this.isFiltersMinimized) {
                    this.$listDockedGrids.find(".filters-grid.shown .collapsible-grid-main-container")
                        .css("max-height", collapsibleGridMainContainerMaxHeight + "px");
                }
                if (this.$listDockedGrids.find(".groups-grid.shown").length == 1 && !this.isGroupsMinimized) {
                    this.$listDockedGrids.find(".groups-grid.shown .collapsible-grid-main-container")
                        .css("max-height", collapsibleGridMainContainerMaxHeight + "px");
                }
                this.$listHeader.find(".collapsible-grid.ui-draggable.shown")
                    .each(function () {
                    var headerHeight = $(this).find(".grids-header").outerHeight();
                    var footerHeight = $(this).find(".collapsile-grid-footer").outerHeight();
                    var totalHeight = this.$listDockedGrids.outerHeight();
                    $(this)
                        .find(".collapsible-grid-main-container")
                        .css("max-height", (totalHeight - (headerHeight + footerHeight)) + "px");
                });
                if (this.$listData.find(".no-results-row").length == 1) {
                    this.$listDataContainer.css("height", this.$listDataContainer.outerHeight() + "px");
                    this.$listData.css({
                        "width": dataContainerWidth + "px",
                        "position": "absolute",
                        "top": "0",
                        "left": "0"
                    });
                }
                this.$listHorizontalScrollbar.css({
                    width: (dataContainerWidth + this.scrollbarSize) + "px",
                    height: this.scrollbarSize + "px"
                });
                this.$listHorizontalScrollbar.find(".scrollbar-content-wrapper")
                    .css({ width: (dataContainerWidth + this.scrollbarSize) + "px", height: this.scrollbarSize + "px" });
                this.$listHorizontalScrollbar.find(".scrollbar-content")
                    .css({ width: (totalWidth + this.scrollbarSize) + "px", height: this.scrollbarSize });
                if (skipVerticalScrollbar !== true) {
                    this.$listVerticalScrollbar.css({
                        width: this.scrollbarSize + "px",
                        height: (this.$listColumnHeaderContainer.outerHeight() + dataContainerHeight + footerHeight) + "px"
                    });
                    this.$listVerticalScrollbar.find(".top-right-corner")
                        .css({ width: this.scrollbarSize + "px", height: this.$listColumnHeaderContainer.outerHeight() + "px" });
                    this.$listVerticalScrollbar.find(".bottom-right-corner")
                        .css({ width: this.scrollbarSize + "px", height: footerHeight + "px" });
                    this.$listVerticalScrollbar.find(".scrollbar-content")
                        .css({ width: this.scrollbarSize + "px", height: totalHeight + "px" });
                    if (self.options.standAlone !== false) {
                        this.$listVerticalScrollbar.find(".row-num-border")
                            .css({ width: this.scrollbarSize + "px", height: standaloneRemainingHeight + "px" });
                        this.$listVerticalScrollbar.find(".scrollbar-content-wrapper")
                            .css({
                            width: this.scrollbarSize + "px",
                            height: (dataContainerHeight - standaloneRemainingHeight) + "px"
                        });
                    }
                    else {
                        this.$listVerticalScrollbar.find(".row-num-border").css({ "display": "none" });
                        this.$listVerticalScrollbar.find(".scrollbar-content-wrapper")
                            .css({ width: this.scrollbarSize + "px", height: dataContainerHeight + "px" });
                    }
                }
                var showBottomCap = this.$listFooterContainer
                    .find(".list-aggregators-row:visible")
                    .children()
                    .length ==
                    0 &&
                    !showHorizontalScrollbar &&
                    (this.$listHeader
                        .outerHeight() +
                        this.$listColumnHeader.outerHeight() +
                        dataContainerHeight) <
                        containerMaxHeight;
                this.$listFooterContainer.toggleClass("bottom-cap", showBottomCap);
                this.$listVerticalScrollbar.find(".bottom-right-corner").toggleClass("bottom-cap", showBottomCap);
                this.$listHorizontalScrollbar.toggle(showHorizontalScrollbar);
                if (dataContainerHeight < totalHeight) {
                    this.$listVerticalScrollbar.find(".scrollbar-content-wrapper").css("overflow-y", "scroll");
                }
                else {
                    this.$listVerticalScrollbar.find(".scrollbar-content-wrapper").css("overflow-y", "hidden");
                }
                this.updateScrollPosition();
                this.options.$container.css({ "float": "left" });
                $(document).scrollTop(documentScroll);
                if (this.options.standAlone !== false) {
                    this.options.$container.css({ "height": containerMaxHeight + "px" });
                }
                this.updateActionButtonVisibility();
                this.updateActionButtonsMode();
                this.configureMobileMode();
                if (this.isMobileMode)
                    this.$listDataContainer.getNiceScroll().resize();
                if (this.options.useCustomScrollbar === true) {
                    this.$listVerticalScrollbar.find(".scrollbar-content-wrapper").perfectScrollbar("update");
                    this.$listHorizontalScrollbar.find(".scrollbar-content-wrapper").perfectScrollbar("update");
                }
            };
            ListControl.prototype.updateActionButtonsMode = function () {
                if (this.options.useContextMenuForRowActions === false)
                    return;
                var $actionButtons = this.$listHeader
                    .find("button.show-always:not(.hidden):not(.not-accessible), button.show-single:not(.hidden):not(.not-accessible), button.show-multi:not(.hidden):not(.not-accessible)");
                var $actionButtonsContainer = this.$listHeader.find(".list-action-buttons-container");
                var $actionsDropDown = this.$listHeader.find(".common-actions-dropdown");
                var headerToolbarWidth = this.$listHeader.find(".header-toolbar-container:not(.mobile):visible").width();
                var headerToolbarHeight = this.$listHeader.find(".header-toolbar-container:not(.mobile):visible").height();
                var headerLeftWidth = this.$listHeader.find(".header-toolbar-container:not(.mobile):visible .header-left")
                    .width();
                var headerRightWidth = this.$listHeader.find(".header-toolbar-container:not(.mobile):visible .header-right")
                    .width();
                var totalActionButtonsWidth = 0;
                var MARGIN = 100;
                var SINGLE_LINE_HEIGHT = 65;
                var webViewVisibility = this.$listHeader.find(".header-toolbar-container:not(.mobile)").is(":visible");
                this.$listHeader.find(".header-toolbar-container:not(.mobile)").show();
                $actionButtons.show();
                for (var i = 0; i < $actionButtons.length; i++) {
                    totalActionButtonsWidth += $actionButtons.eq(i).width();
                }
                var notEnoughSpaceForButtons = headerToolbarWidth <
                    headerLeftWidth + headerRightWidth + totalActionButtonsWidth + MARGIN ||
                    headerToolbarHeight > SINGLE_LINE_HEIGHT;
                $actionButtons.toggle(notEnoughSpaceForButtons === false);
                $actionsDropDown.toggle(notEnoughSpaceForButtons === true && $actionButtons.length > 0);
                $actionButtonsContainer.toggleClass("minimal", notEnoughSpaceForButtons === true);
                this.$listHeader.find(".header-toolbar-container:not(.mobile)").toggle(webViewVisibility);
            };
            ListControl.prototype.updateScrollPosition = function () {
                if (this.$listVerticalScrollbar != null) {
                    var $verticalScroll = this.$listVerticalScrollbar.find(".scrollbar-content-wrapper");
                    this.$listDataContainer.scrollTop($verticalScroll.scrollTop());
                }
                if (this.$listHorizontalScrollbar != null) {
                    var $horizontalScroll = this.$listHorizontalScrollbar.find(".scrollbar-content-wrapper");
                    this.$listColumnHeaderContainer.scrollLeft($horizontalScroll.scrollLeft());
                    this.$listDataContainer.scrollLeft($horizontalScroll.scrollLeft());
                    this.$listFooterContainer.scrollLeft($horizontalScroll.scrollLeft());
                }
            };
            ListControl.prototype.updateDraggableElementPositions = function () {
                if (this.options.standAlone === false || this.$listHeader == null)
                    return;
                if (this.draggableGroupingPosition != null) {
                    this.$listHeader.find(".groups-grid")
                        .css({
                        "top": this.draggableGroupingPosition.top + "px",
                        "left": this.draggableGroupingPosition
                            .left +
                            "px"
                    });
                }
                else {
                    this.$listHeader.find(".groups-grid")
                        .css({
                        "left": (this.$listHeader.find("button.btn-list-groups").offset().left -
                            this.$groupsContainer.find(".groups-grid").outerWidth()) +
                            "px"
                    });
                }
                if (this.draggablePreferencesPosition != null) {
                    this.$listHeader.find(".preferences-grid")
                        .css({
                        "top": this.draggablePreferencesPosition.top + "px",
                        "left": this.draggablePreferencesPosition.left + "px"
                    });
                }
                else {
                    this.$listHeader.find(".preferences-grid")
                        .css({
                        "left": (this.$listHeader.find("button.btn-list-preferences").offset().left -
                            this.$preferencesContainer.find(".preferences-grid").outerWidth()) +
                            "px"
                    });
                }
                if (this.draggableFiltersPosition != null) {
                    this.$listHeader.find(".filters-grid")
                        .css({
                        "top": this.draggableFiltersPosition.top + "px",
                        "left": this.draggableFiltersPosition.left + "px"
                    });
                }
                else {
                    this.$listHeader.find(".filters-grid")
                        .css({
                        "left": (this.$listHeader.find("button.btn-list-filters").offset().left -
                            this.$filtersContainer.find(".filters-grid").outerWidth()) +
                            "px"
                    });
                }
            };
            ListControl.prototype.flashElement = function ($element) {
                var initalBGcolor = $element.css("background-color");
                $element.animate({
                    opacity: 0.5,
                    "background-color": "#99ccff"
                }, 750, function () {
                    $element.animate({
                        opacity: 1,
                        "background-color": initalBGcolor
                    }, 750, function () {
                        if (initalBGcolor != "rgba(0, 0, 0, 0)")
                            return;
                        $element.css("background-color", "");
                    });
                });
            };
            ListControl.prototype.flashElements = function ($elements) {
                for (var i = 0; i < $elements.length; i++) {
                    this.flashElement($elements.eq(i));
                }
            };
            ListControl.prototype.highlightCurrentHeaderAndRowNumber = function (cell) {
                var $cell = $(cell);
                this.$listColumnHeader.find(".highlighted-cell").removeClass("highlighted-cell");
                this.$listColumnHeader.find(".column-title").eq($cell.index()).addClass("highlighted-cell");
            };
            ListControl.prototype.showLoadingOverlay = function (interval, onInit) {
            };
            ListControl.prototype.hideLoadingOverlay = function () {
            };
            ListControl.prototype.filtersCreatedByGlobalSearch = function () {
                var filters = this.status.filters;
                if (filters.length === 0 || filters.length !== this.status.columns.length)
                    return false;
                var filteredColumns = [];
                var term = filters[0].value;
                for (var i = 0; i < filters.length; i++) {
                    var filter = filters[i];
                    if (filter.operator !== Joove.FilterOperators.LIKE ||
                        filter.rowOperator === Joove.RowOperators.AND ||
                        filter.value !== term)
                        return false;
                    filteredColumns.push(filter.column);
                }
                for (var i = 0; i < this.status.columns.length; i++) {
                    if (filteredColumns.indexOf(this.status.columns[i].name) == -1)
                        return false;
                }
                return true;
            };
            ListControl.prototype.getColumnQuickFiltersValue = function (column) {
                var filters = this.status.filters;
                var quickFilterValues = [];
                for (var i = 0; i < filters.length; i++) {
                    var filter = filters[i];
                    if (filter.column !== column.name)
                        continue;
                    if (filter
                        .operator !==
                        Joove.FilterOperators.LIKE ||
                        filter.rowOperator === Joove.RowOperators.OR)
                        return [];
                    if (column.dataType === "DateTime") {
                        var formatted = Joove.Common
                            .getDateStringFromUtc(filter.value, this.getFormatOfDate(column.formatting));
                        quickFilterValues.push(formatted);
                    }
                    else {
                        quickFilterValues.push(filter.value);
                    }
                }
                return quickFilterValues;
            };
            ListControl.prototype.onColumnResized = function (event, ui) {
                var difference = ui.position.left - ui.originalPosition.left;
                var $handler = $(event.target);
                var columnName = $handler.closest("th").data("column");
                var column = this.getColumnInfoByName(columnName);
                var columnIndex = this.status.columns.indexOf(column);
                $handler.css("opacity", "0");
                for (var i = 0; i < this.status.columns.length; i++) {
                    if (this.columnMustBeRendered(this.status.columns[i]) === false)
                        continue;
                    if (i != columnIndex && this.status.columns[i].customWidth == null) {
                        this.status.columns[i].customWidth = this.$listColumnHeader
                            .find("th[data-column='" + this.status.columns[i].name + "']")
                            .outerWidth();
                    }
                    else if (i == columnIndex) {
                        var oldWidth = this.$listColumnHeader.find("th[data-column='" + this.status.columns[i].name + "']")
                            .outerWidth();
                        var newWidth = oldWidth + difference;
                        newWidth = newWidth < this.status.columns[i].minWidth ? this.status.columns[i].minWidth : newWidth;
                        this.status.columns[i].customWidth = newWidth;
                    }
                }
                this.updateControl({
                    refreshDimensions: true,
                    updateUiElements: true
                });
                if (this.$listHeader.find(".available-views:visible").length == 0 ||
                    this.$listHeader.find(".available-views:first option").length == 1)
                    this.$listHeader.find(".btn-list-reset").removeClass("hidden");
            };
            ListControl.prototype.getColumnInfoByName = function (name) {
                for (var i = 0; i < this.status.columns.length; i++) {
                    if (this.status.columns[i].name == name)
                        return this.status.columns[i];
                }
                return null;
            };
            ListControl.prototype.changeView = function (viewName) {
                if (viewName === "PREDEFINED") {
                    this.resetList(true);
                    return;
                }
                var $dropDown = this.$listHeader.find(".available-views");
                var $selectedOption = $dropDown.find("[value='" + viewName + "']");
                if ($selectedOption.length === 0)
                    return;
                var statusToLoad = JSON.parse($selectedOption.data("status"));
                this.status = statusToLoad;
                this.status.currentView = $selectedOption.val();
                this.status.startRow = 0;
                this.updateData();
            };
            ListControl.prototype.saveCurrentViewAsDefault = function () {
                if (confirm(this.resources.MakeDefaultConfirmation)) {
                    var $viewsDropDown = this.$listHeader.find(".available-views");
                    var selectedViewName = $viewsDropDown.val() == "PREDEFINED" ? "" : $viewsDropDown.val();
                    var defaultViewName = this.viewsCache != null ? this.viewsCache.DefaultView : "";
                    if (selectedViewName != defaultViewName && selectedViewName.length > 0) {
                        this.saveViewToProfile(selectedViewName, true);
                    }
                    else {
                        this.saveViewToProfile(defaultViewName, false);
                    }
                    this.viewsCache.DefaultView = selectedViewName;
                    this.updateControl({ createListHeader: true, updateUiElements: true });
                }
            };
            ListControl.prototype.createNotFoundRow = function () {
                var $row = $("<tr class='no-results-row warning'></tr>");
                var colspan = 0;
                for (var i = 0; i < this.status.columns.length; i++) {
                    if (this.columnMustBeRendered(this.status.columns[i]) === true)
                        colspan++;
                }
                if (this.options.showRowNumbers) {
                    $row.append("<td class='list-data-cell row-number'></td>");
                    colspan--;
                }
                $row.append("<td colspan='" + colspan + "'>                        <span class='info-icon glyphicon glyphicon-info-sign'></span>                        <span class='info-description'>" + this.resources.NoResults + "</span>                    </td>");
                return $row;
            };
            ListControl.prototype.createCell = function (value, columnInfo) {
                var itemClass = columnInfo.classes;
                if (itemClass == null)
                    itemClass = "";
                switch (columnInfo.itemType) {
                    case Joove.Widgets.ListColumnItemType.HYPERLINK:
                        return $("<a class='" + itemClass + "' href=\"#\" onclick=\"performRedirection('" + value + "', '_blank'); return false\">" + value + "</a>");
                    case Joove.Widgets.ListColumnItemType.DOWNLOADLINK:
                        return $("<a class='download-link " + itemClass + "' target='_blank' href='DownloadFileByPath?path=" + value + "'>" + value + "</a>");
                    case Joove.Widgets.ListColumnItemType.CHECKBOX:
                        var trueValues = ["true", "1", "yes", "ok"];
                        var unsafeValue = String(value).toLowerCase();
                        var isTrue = trueValues.indexOf(unsafeValue) > -1;
                        var checked = isTrue ? "checked='checked'" : "";
                        var $checkBox = $("<input type='checkbox' style='display:inline-block' />");
                        if (isTrue)
                            $checkBox.attr("checked", "checked");
                        $checkBox.addClass(itemClass);
                        $checkBox.toggleClass("list-editable", columnInfo.editable);
                        $checkBox.toggleClass("checkbox-in-data-cell", !columnInfo.editable);
                        return $checkBox;
                    case Joove.Widgets.ListColumnItemType.IMAGEBOX:
                        return $("<img class=\"img-thumbnail " + itemClass + "\" src=\"../../Upload/" + value + "\" >");
                    default:
                        if (value != null && String(value).toLowerCase() === "true")
                            value = this.resources.True;
                        if (value != null && String(value).toLowerCase() === "false")
                            value = this.resources.False;
                        if (value == null)
                            value = window._resourcesManager.getNullValueText();
                        if (columnInfo.editable) {
                            var $inputArea = $("<input type='text' class='default-input form-control list-editable " + itemClass + "'>");
                            $inputArea.val(value);
                            if (columnInfo.dataType === "DateTime" || columnInfo.dataType === "System.DateTime") {
                                this.convertElementToDatePicker($inputArea, columnInfo.formatting);
                            }
                            return $inputArea;
                        }
                        else {
                            if (this.options.enableCompactText !== false)
                                return $("<span class='text-compact " + itemClass + "'>" + value + "</span>");
                            else
                                return $("<span class='" + itemClass + "'>" + value + "</span>");
                        }
                }
            };
            ListControl.prototype.goToStandAloneMode = function () {
                $("[jb-type='BodyContainer']").css("width", "100%");
                $("body").css("overflow-x", "hidden");
                $("body").css("overflow-y", "hidden");
                if (this.$list != null) {
                    this.$list.parent().addClass("stand-alone");
                }
            };
            ListControl.prototype.showOnlyPredefinedFiltersFieldSet = function () {
                if (this.options.standAlone !== false)
                    this.goToStandAloneMode();
                this.$predefinedFiltersFieldSet.animate({
                    "opacity": "1"
                }, 500);
                return;
            };
            ListControl.prototype.startRefreshDimetionsInterval = function () {
                clearInterval(this.refreshDimentionsInterval);
                var self = this;
                this.refreshDimentionsInterval = setInterval(function () {
                    if (self.options.maxIterationsForRefreshDimentions < self.refreshDimetionsCounter) {
                        clearInterval(self.refreshDimentionsInterval);
                        return;
                    }
                    self.hidingData = false;
                    self.refreshDimetionsCounter++;
                    self.refreshDimensions();
                    if (self.refreshDimetionsCounter == 1 && self.options.isPickList) {
                        self.options.$container.animate({
                            "opacity": 1
                        }, 500);
                        self.removeInitializationLoadingElement();
                    }
                }, this.options.refreshDimentionsInterval);
            };
            ListControl.prototype.createInitializationLoadingElement = function () {
                if (this.options.waitForPredefinedFilters !== false)
                    return;
                if (this.options.standAlone !== false) {
                    this.showLoadingOverlay(0, false);
                    return;
                }
                var $loadingElement = $("<div class='list-init-loading'>\
                                        <div class='spinner'>\
                                            <div class='rect1'></div>\
                                            <div class='rect2'></div>\
                                            <div class='rect3'></div>\
                                            <div class='rect4'></div>\
                                            <div class='rect5'></div>\
                                        </div>\
                                      </div>");
                $loadingElement.css("width", "100%");
                this.options.$container.before($loadingElement);
            };
            ListControl.prototype.removeInitializationLoadingElement = function () {
                if (this.options.standAlone !== false) {
                    this.hideLoadingOverlay();
                    return;
                }
                window.clearTimeout(this.showInitializationLoadingTimeout);
                this.options.$container.prev(".list-init-loading").remove();
            };
            ListControl.prototype.disableActionButtons = function () {
                var $btnContainer = this.options.$container.find(".list-action-buttons-container")
                    .find("button")
                    .attr("disabled", "disabled");
            };
            ListControl.prototype.enableActionButtons = function () {
                var $btnContainer = this.options.$container.find(".list-action-buttons-container")
                    .find("button")
                    .removeAttr("disabled");
            };
            ListControl.prototype.onResize = function () {
                if ($("#rootElement").width() < 910) {
                    this.options.$container.addClass("small-width");
                }
                else {
                    this.options.$container.removeClass("small-width");
                }
                this.resizeTime = new Date();
                if (this.$list != null && this.resizeTimeout === false) {
                    this.resizeTimeout = true;
                    var self_1 = this;
                    setTimeout(function () { return self_1.resizeEnd(); }, this.resizeDelta);
                }
            };
            ListControl.prototype.resizeEnd = function () {
                if (+new Date() - +this.resizeTime < this.resizeDelta) {
                    var self_2 = this;
                    setTimeout(function () { return self_2.resizeEnd(); }, this.resizeDelta);
                }
                else {
                    this.resizeTimeout = false;
                    this.updateControl({ refreshDimensions: true });
                }
            };
            ;
            ListControl.prototype.updateControl = function (updateOptions) {
                if (typeof (updateOptions) !== "undefined") {
                    if (updateOptions.createListHeader === true) {
                        this.createListHeader();
                    }
                    if (updateOptions.createListColumnHeader === true) {
                        this.createListColumnHeader();
                    }
                    if (updateOptions.createListData === true) {
                        this.createListData();
                    }
                    if (updateOptions.createGroupsData === true) {
                        this.createGroupsData();
                    }
                    if (updateOptions.updateGroupAggregators === true) {
                        if (this.aggregatorsData == null) {
                            this.getPredefinedAggregators();
                        }
                        else {
                            this.updateAggregatorsData();
                        }
                    }
                    if (updateOptions.createRecordSetAggregators === true && this.status.groupBy.length == 0) {
                        this.createRecordSetAggregators(updateOptions.keepAggregatorsOfFullRecordSet);
                    }
                    if (updateOptions.updateActionButtonVisibility === true) {
                        this.updateActionButtonVisibility();
                    }
                    if (updateOptions.updateUiElements === true) {
                        this.updateUiElements();
                    }
                    if (updateOptions.applyConditionalFormattings === true) {
                        this.applyConditionalFormattings();
                    }
                    if (updateOptions.refreshDimensions === true) {
                        this.refreshDimensions(updateOptions.skipVertivalScrollbar);
                        if (this.options.standAlone !== false) {
                            this.updateDraggableElementPositions();
                        }
                        if (this.options.runRefreshDimentionsAtIntervals === true) {
                            this.refreshDimetionsCounter = 0;
                            this.startRefreshDimetionsInterval();
                        }
                    }
                    if (this.options.hasMultiselection !== false) {
                        this.updateSelectionButtonsStatus();
                    }
                    this.restoreSelectedItems();
                    this.handleGridButtonState();
                    this.synchronizeScrolling();
                }
            };
            ListControl.prototype.synchronizeScrolling = function () {
                var self = this;
                var scrollLock = this.scrollLock;
                var scrollTimeout = this.scrollTimeout;
                if (this.$listHorizontalScrollbar != null && this.$listVerticalScrollbar != null) {
                    var $horizontalScroll = this.$listHorizontalScrollbar.find(".scrollbar-content-wrapper");
                    var $verticalScroll = this.$listVerticalScrollbar.find(".scrollbar-content-wrapper");
                    $horizontalScroll.off("scroll");
                    $horizontalScroll.on("scroll", function (e) {
                        self.status.horizontalScrollPosition = $horizontalScroll.scrollLeft();
                        if (scrollLock == null || scrollLock == "horizontal") {
                            scrollLock = "horizontal";
                            clearTimeout(scrollTimeout);
                            self.$listColumnHeaderContainer.scrollLeft($(this).scrollLeft());
                            self.$listDataContainer.scrollLeft($(this).scrollLeft());
                            self.$listFooterContainer.scrollLeft($(this).scrollLeft());
                            scrollTimeout = setTimeout(function () {
                                scrollLock = null;
                            }, 300);
                        }
                    });
                    $verticalScroll.off("scroll");
                    $verticalScroll.on("scroll", function (e) {
                        self.status.verticalScrollPosition = $verticalScroll.scrollTop();
                        self.$rowContextMenu.hide();
                        if (scrollLock == null || scrollLock == "vertical") {
                            scrollLock = "vertical";
                            clearTimeout(scrollTimeout);
                            self.$listDataContainer.scrollTop($(this).scrollTop());
                            scrollTimeout = setTimeout(function () {
                                scrollLock = null;
                            }, 300);
                        }
                    });
                    this.$listDataContainer.off("scroll");
                    this.$listDataContainer.on("scroll", function (e) {
                        self.$rowContextMenu.hide();
                        if (scrollLock == null || scrollLock === "touch") {
                            scrollLock = "touch";
                            $verticalScroll.scrollTop($(this).scrollTop());
                            self.$listColumnHeaderContainer.scrollLeft($(this).scrollLeft());
                            $horizontalScroll.scrollLeft($(this).scrollLeft());
                            self.$listFooterContainer.scrollLeft($(this).scrollLeft());
                            scrollTimeout = setTimeout(function () {
                                scrollLock = null;
                            }, 777);
                        }
                    });
                }
            };
            ListControl.prototype.userCameBack = function () {
                return window.location.href.indexOf("comeback=true") > -1;
            };
            ListControl.prototype.populateExportPopUpContainer = function ($container, isNotPopUp) {
                var self = this;
                var groupColumns = this.status.groupBy;
                var allColumns = this.status.columns;
                var groupsDataOnly = this.status.getGroupsClosed;
                var row = $container.find(".row-table-export-pop-up[data-column='export-PDFportrait-orientation']")
                    .attr("disabled", "disabled");
                var nonGroupCnt = $container.find(".row-table-export-pop-up[data-column='export-total-count']");
                var rowColor = $container.find(".row-table-colors-export-pop-up[data-column='row-table-aggregate-color']")
                    .attr("disabled", "disabled");
                row.find(".export-portrait-orientation").attr("disabled", "disabled");
                $container.find(".export-include-grid-lines").attr("checked", "true");
                for (var i = 0; i < allColumns.length; i++) {
                    var isVisibleNotChecked = $container.find(".row-preference[data-column='" + allColumns[i].name + "']")
                        .find(".column-is-visible")
                        .is(":checked") ===
                        false;
                    var $temp = $container.find(".row-preference[data-column='" + allColumns[i].name + "']");
                    $temp.find(".count-is-visible").attr("disabled", "disabled");
                    if (isVisibleNotChecked) {
                        $temp.find(".sum-is-visible").attr("checked", "false");
                        $temp.find(".sum-is-visible").attr("disabled", "disabled");
                        $temp.find(".average-is-visible").attr("checked", "false");
                        $temp.find(".average-is-visible").attr("disabled", "disabled");
                        $temp.find(".count-is-visible").attr("checked", "false");
                        $temp.find(".count-is-visible").attr("disabled", "disabled");
                    }
                    else if (isVisibleNotChecked === false) {
                        if (allColumns[i].name == null || this.isDataTypeNumeric(allColumns[i].dataType) === false) {
                            var $nonNumericColumnsExport = $container
                                .find(".row-preference[data-column='" + allColumns[i].name + "']");
                            $nonNumericColumnsExport.find(".sum-is-visible").attr("checked", "false");
                            $nonNumericColumnsExport.find(".sum-is-visible").attr("disabled", "disabled");
                            $nonNumericColumnsExport.find(".average-is-visible").attr("checked", "false");
                            $nonNumericColumnsExport.find(".average-is-visible").attr("disabled", "disabled");
                            $nonNumericColumnsExport.addClass("non-numeric-column");
                        }
                        else if (allColumns[i].name != null &&
                            this.isDataTypeNumeric(allColumns[i].dataType) &&
                            this.status.aggregators != null) {
                            for (var j = 0; j < this.status.aggregators.length; j++) {
                                var $NumericColumn = $container
                                    .find(".row-preference[data-column='" + allColumns[i].name + "']");
                                if (this.status.aggregators[j].column == allColumns[i].name &&
                                    this.status.aggregators[j].type === Joove.AggregatorTypes.SUM) {
                                    $NumericColumn.find(".sum-is-visible").prop("checked", true);
                                }
                                if (this.status.aggregators[j].column == allColumns[i].name &&
                                    this.status.aggregators[j].type === Joove.AggregatorTypes.AVERAGE) {
                                    $NumericColumn.find(".average-is-visible").prop("checked", true);
                                }
                                if (this.status.aggregators[j].column == allColumns[i].name &&
                                    this.status.aggregators[j].type === Joove.AggregatorTypes.COUNT) {
                                    $NumericColumn.find(".count-is-visible").prop("checked", true);
                                }
                            }
                        }
                    }
                }
                if (groupColumns.length != 0) {
                    for (var i = 0; i < groupColumns.length; i++) {
                        var $currentRow = $container.find(".row-preference[data-column='" + groupColumns[i].column + "']");
                        if ($currentRow != null) {
                            $currentRow.find(".column-is-visible").prop("checked", true);
                            $currentRow.find(".column-is-visible").attr("disabled", "disabled");
                            $currentRow.find(".count-is-visible").removeAttr("disabled");
                        }
                    }
                    nonGroupCnt.attr("disabled", "disabled");
                    nonGroupCnt.find(".export-non-group-count").attr("checked", "false");
                    nonGroupCnt.find(".export-non-group-count").attr("disabled", "disabled");
                }
                else {
                    var exportGroupData = $container.find(".row-table-export-pop-up[data-column='export-group-data']")
                        .attr("disabled", "disabled");
                    exportGroupData.find(".export-only-group-data").attr("disabled", "disabled");
                    $container.find(".row-table-colors-export-pop-up[data-column='row-table-group-color']")
                        .attr("disabled", "disabled");
                    $container.find("#group-lines-color").attr("disabled", "disabled");
                    nonGroupCnt.removeAttr("disabled");
                    nonGroupCnt.find(".export-non-group-count").removeAttr("disabled");
                }
                $container.find(".checkall-header-isvisible")
                    .on("click", function () {
                    var checkAll = $(this).data("state") === "unchecked";
                    for (var i = 0; i < allColumns.length; i++) {
                        var rowWithNoVisibleDisabled = $container
                            .find(".row-preference[data-column='" + allColumns[i].name + "']")
                            .find(".column-is-visible")
                            .is(":disabled") ===
                            false;
                        var $temp = $container.find(".row-preference[data-column='" + allColumns[i].name + "']");
                        if (rowWithNoVisibleDisabled === false)
                            continue;
                        $temp.find(".column-is-visible").prop("checked", checkAll).change();
                    }
                    $(this).data("state", checkAll === true ? "checked" : "unchecked");
                });
                $container.find(".checkall-header-issum")
                    .on("click", function () {
                    var checkAll = $(this).data("state") === "unchecked";
                    for (var i = 0; i < allColumns.length; i++) {
                        var rowWithNoVisibleDisabled = $container
                            .find(".row-preference[data-column='" + allColumns[i].name + "']")
                            .find(".sum-is-visible")
                            .is(":disabled") ===
                            false;
                        var $temp = $container.find(".row-preference[data-column='" + allColumns[i].name + "']");
                        if (rowWithNoVisibleDisabled === false)
                            continue;
                        $temp.find(".sum-is-visible").prop("checked", checkAll).change();
                    }
                    $(this).data("state", checkAll === true ? "checked" : "unchecked");
                });
                $container.find(".checkall-header-isaverage")
                    .on("click", function () {
                    var checkAll = $(this).data("state") === "unchecked";
                    for (var i = 0; i < allColumns.length; i++) {
                        var rowWithNoVisibleDisabled = $container
                            .find(".row-preference[data-column='" + allColumns[i].name + "']")
                            .find(".average-is-visible")
                            .is(":disabled") ===
                            false;
                        var $temp = $container.find(".row-preference[data-column='" + allColumns[i].name + "']");
                        if (rowWithNoVisibleDisabled === false)
                            continue;
                        $temp.find(".average-is-visible").prop("checked", checkAll).change();
                    }
                    $(this).data("state", checkAll === true ? "checked" : "unchecked");
                });
                $container.find(".checkall-header-iscount")
                    .on("click", function () {
                    var checkAll = $(this).data("state") === "unchecked";
                    for (var i = 0; i < allColumns.length; i++) {
                        var rowWithNoVisibleDisabled = $container
                            .find(".row-preference[data-column='" + allColumns[i].name + "']")
                            .find(".count-is-visible")
                            .is(":disabled") ===
                            false;
                        var $temp = $container.find(".row-preference[data-column='" + allColumns[i].name + "']");
                        if (rowWithNoVisibleDisabled === false)
                            continue;
                        $temp.find(".count-is-visible").prop("checked", checkAll);
                    }
                    $(this).data("state", checkAll === true ? "checked" : "unchecked");
                });
                $container.find(".export-pop-up-btn-cancel")
                    .on("click", function () {
                    return;
                });
                $container.find(".export-pop-up-btn-ok")
                    .on("click", function () {
                    var type = $container.find(".export-type").val();
                    var onlyGroups = $container.find(".export-only-group-data").is(":checked") === true;
                    var range = $container.find(".export-range").val();
                    var fileName = $container.find(".export-filename").val();
                    var includeGridLines = $container.find(".export-include-grid-lines").is(":checked") === true;
                    var portraitOrientation = $container.find(".export-portrait-orientation").is(":checked") ===
                        true;
                    var nonGroupCount = $container.find(".export-non-group-count").is(":checked") === true;
                    var visibleColumnsCollection = self.populateVisibleColumns($container);
                    var groupColor = $container.find("#group-lines-color").css("background-color");
                    var headerColor = $container.find("#header-line-color").css("background-color");
                    var evenColor = $container.find("#even-lines-color").css("background-color");
                    var oddColor = $container.find("#odd-lines-color").css("background-color");
                    var aggregateColor = $container.find("#aggregate-lines-color").css("background-color");
                    var allColumnsNoVisible = visibleColumnsCollection.every(function (x) {
                        for (var i = 0; i < visibleColumnsCollection.length; i++) {
                            if (x.isVisible == true)
                                return false;
                        }
                        return true;
                    });
                    if (allColumnsNoVisible) {
                        alert("Error - None Visible Column");
                        return;
                    }
                    if (fileName == "") {
                        alert("Error - Empty FileName");
                        return;
                    }
                    var reservedChars = /^[^\\/:\*\?"<>\|]+$/;
                    if (!reservedChars.test(fileName)) {
                        alert("Error - FileName can not contain any of the following characters \/:*?\"<>| ");
                        return;
                    }
                    var forbiddenCharIndex = /^\./;
                    if (!reservedChars.test(fileName)) {
                        alert("Error - FileName can not start with char .");
                        return;
                    }
                    self.pushToAggregatorsStatusAtExportTime($container);
                    self.export({
                        type: type,
                        range: range,
                        onlyGroups: onlyGroups,
                        fileName: fileName,
                        includeGridLines: includeGridLines,
                        portraitOrientation: portraitOrientation,
                        visibleColumnsCollection: visibleColumnsCollection,
                        groupColor: groupColor,
                        headerColor: headerColor,
                        evenColor: evenColor,
                        oddColor: oddColor,
                        aggregateColor: aggregateColor,
                        nonGroupCount: nonGroupCount,
                    });
                    return;
                });
                $container.find("#disCols")
                    .click(function ($container) {
                    var state = $(this).data("state");
                    $("#exportDisplayColumns").removeClass("hideColumnsPopUp");
                    if (state == "collapsed") {
                        $(this).closest(".clms-pop-up").css("height", "725px");
                        $("#exportDisplayColumns").slideDown("fast");
                        $(this).data("state", "expand");
                    }
                    else {
                        var displayColumns = this;
                        $("#exportDisplayColumns")
                            .slideUp("fast", function () {
                            $(displayColumns).closest(".clms-pop-up").css("height", "470px");
                        });
                        $(this).data("state", "collapsed");
                    }
                });
                $container.find(".column-is-visible")
                    .on("change", function () {
                    var isVisible = $(this).is(":checked") === true;
                    var $parentRow = $(this).closest(".row-preference");
                    var $sumRowChkBox = $parentRow.find(".sum-is-visible");
                    var $avgRowChkBox = $parentRow.find(".average-is-visible");
                    if ($parentRow.hasClass("non-numeric-column") === true)
                        return;
                    if (isVisible === false) {
                        $sumRowChkBox.attr("checked", "false");
                        $sumRowChkBox.attr("disabled", "disabled");
                        $avgRowChkBox.attr("checked", "false");
                        $avgRowChkBox.attr("disabled", "disabled");
                    }
                    else if (isVisible === true) {
                        $sumRowChkBox.removeAttr("disabled");
                        $avgRowChkBox.removeAttr("disabled");
                    }
                });
                $container.find(".sum-is-visible")
                    .on("change", function () {
                    var isSumChecked = $(this).is(":checked") === true;
                    if (isSumChecked === false) {
                        for (var i = 0; i < self.status.columns.length; i++) {
                            var column = self.status.columns[i];
                            var currentRow = $container.find(".row-preference[data-column='" + column.name + "']");
                            var isCurrentAverageChecked = currentRow.find(".average-is-visible").is(":checked") === true;
                            if (isCurrentAverageChecked === true)
                                return;
                            var isTotalCountChecked = $container.find(".export-non-group-count").is(":checked") ===
                                true;
                            if (isTotalCountChecked === true)
                                return;
                        }
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-aggregate-color']")
                            .attr("disabled", "disabled");
                        $container.find("#aggregate-lines-color").attr("disabled", "disabled");
                    }
                    else if (isSumChecked === true) {
                        rowColor.removeAttr("disabled");
                        $container.find("#aggregate-lines-color").spectrum("enable");
                    }
                });
                $container.find(".average-is-visible")
                    .on("change", function () {
                    var isAverageChecked = $(this).is(":checked") === true;
                    if (isAverageChecked === false) {
                        for (var i = 0; i < self.status.columns.length; i++) {
                            var column = self.status.columns[i];
                            var currentRow = $container.find(".row-preference[data-column='" + column.name + "']");
                            var isCurrentSumChecked = currentRow.find(".sum-is-visible").is(":checked") === true;
                            if (isCurrentSumChecked === true)
                                return;
                            var isTotalCountChecked = $container.find(".export-non-group-count").is(":checked") ===
                                true;
                            if (isTotalCountChecked === true)
                                return;
                        }
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-aggregate-color']")
                            .attr("disabled", "disabled");
                        $container.find("#aggregate-lines-color").attr("disabled", "disabled");
                    }
                    else if (isAverageChecked === true) {
                        rowColor.removeAttr("disabled");
                        $container.find("#aggregate-lines-color").spectrum("enable");
                    }
                });
                $container.find(".export-only-group-data")
                    .on("change", function () {
                    var exportOnlyGroupData = $(this).is(":checked") === true;
                    var allColumns = self.status.columns;
                    var nonGroupColumns = allColumns.filter(function (x) {
                        for (var i = 0; i < self.status.groupBy.length; i++) {
                            if (x.name == self.status.groupBy[i].column)
                                return false;
                        }
                        return true;
                    });
                    if (exportOnlyGroupData === true) {
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-odd-color']")
                            .attr("disabled", "disabled");
                        $container.find("#odd-lines-color").attr("disabled", "disabled");
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-even-color']")
                            .attr("disabled", "disabled");
                        $container.find("#even-lines-color").attr("disabled", "disabled");
                        for (var i = 0; i < allColumns.length; i++) {
                            var $rowWithChkBoxes = $container
                                .find(".row-preference[data-column='" + allColumns[i].name + "']");
                            var groupColumnsFiltered = groupColumns.filter(function (obj) {
                                if (obj.column === allColumns[i].caption)
                                    return true;
                                return false;
                            });
                            var flag;
                            if (groupColumnsFiltered.length == 0)
                                flag = false;
                            else
                                flag = groupColumnsFiltered[0].column === allColumns[i].caption;
                            if (self.isDataTypeNumeric(allColumns[i].dataType) === true || flag) {
                                $rowWithChkBoxes.find(".column-is-visible").prop("checked", true).change();
                            }
                            else {
                                $rowWithChkBoxes.find(".column-is-visible").attr("checked", "false");
                                $rowWithChkBoxes.find(".column-is-visible").attr("disabled", "disabled");
                                $rowWithChkBoxes.removeAttr("disabled");
                            }
                        }
                    }
                    else {
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-odd-color']")
                            .removeAttr("disabled");
                        $container.find("#odd-lines-color").removeAttr("disabled");
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-even-color']")
                            .removeAttr("disabled");
                        $container.find("#even-lines-color").removeAttr("disabled");
                        for (var i = 0; i < nonGroupColumns.length; i++) {
                            var $rowWithChkBoxes = $container
                                .find(".row-preference[data-column='" + nonGroupColumns[i].name + "']");
                            $rowWithChkBoxes.find(".column-is-visible").removeAttr("disabled");
                            $rowWithChkBoxes.find(".column-is-visible").prop("checked", true).change();
                            $rowWithChkBoxes.removeAttr("disabled");
                        }
                    }
                });
                $container.find(".export-type")
                    .on("change", function () {
                    var $orientation = $container
                        .find(".row-table-export-pop-up[data-column='export-PDFportrait-orientation']");
                    if ($(this).val().toString() === "PDF") {
                        $orientation.removeAttr("disabled");
                        $orientation.find(".export-portrait-orientation").removeAttr("disabled");
                    }
                    else {
                        $orientation.attr("disabled", "disabled");
                        $orientation.find(".export-portrait-orientation").attr("checked", "false");
                        $orientation.find(".export-portrait-orientation").attr("disabled", "disabled");
                    }
                });
                $container.find(".export-non-group-count")
                    .on("change", function () {
                    var totalCountChecked = $(this).is(":checked") === true;
                    if (totalCountChecked === false) {
                        for (var i = 0; i < self.status.columns.length; i++) {
                            var column = self.status.columns[i];
                            var currentRow = $container.find(".row-preference[data-column='" + column.name + "']");
                            var isCurrentSumChecked = currentRow.find(".sum-is-visible").is(":checked") === true;
                            if (isCurrentSumChecked === true)
                                return;
                            var isCurrentAverageChecked = currentRow.find(".average-is-visible").is(":checked") === true;
                            if (isCurrentAverageChecked === true)
                                return;
                        }
                        $container.find(".row-table-colors-export-pop-up[data-column='row-table-aggregate-color']")
                            .attr("disabled", "disabled");
                        $container.find("#aggregate-lines-color").attr("disabled", "disabled");
                    }
                    else if (totalCountChecked === true) {
                        rowColor.removeAttr("disabled");
                    }
                });
                this.addScrollListener($container.find(".export-table-display-columns"));
            };
            ListControl.prototype.populateVisibleColumns = function ($container) {
                var $rows = $container.find(".row-preference");
                var JSONObj = [];
                for (var i = 0; i < $container.find(".row-preference").length; i++) {
                    var $row = $rows.eq(i);
                    var columnName = $row.data("column");
                    var columnIsVisible = $row.find(".column-is-visible").is(":checked") === true;
                    var sumIsVisible = $row.find(".sum-is-visible").is(":checked") === true;
                    var averageIsVisible = $row.find(".average-is-visible").is(":checked") === true;
                    var countIsVisible = $row.find(".count-is-visible").is(":checked") === true;
                    var item = {};
                    item["column"] = columnName;
                    item["isVisible"] = columnIsVisible;
                    item["sumIsVisible"] = sumIsVisible;
                    item["averageIsVisible"] = averageIsVisible;
                    item["countIsVisible"] = countIsVisible;
                    JSONObj.push(item);
                }
                return JSONObj;
            };
            ListControl.prototype.export = function (opts) {
                var self = this;
                var requestParameters = this.prepareRequestParameters({
                    type: opts.type,
                    range: opts.range,
                    onlyGroups: opts.onlyGroups,
                    filename: opts.fileName,
                    includeGridLines: opts.includeGridLines,
                    portraitOrientation: opts.portraitOrientation,
                    columnOptions: opts.visibleColumnsCollection,
                    groupColor: opts.groupColor,
                    headerColor: opts.headerColor,
                    evenColor: opts.evenColor,
                    oddColor: opts.oddColor,
                    aggregateColor: opts.aggregateColor,
                    nonGroupCount: opts.nonGroupCount
                });
                var $controlInstace = this.options.isPickList === true ? this.$ownerButton : this.options.$container;
                var controlName = this.elementId;
                Joove.Core.executeControllerActionNew({
                    action: controlName + "_Export",
                    controller: window._context.currentController,
                    postData: {
                        model: "{}",
                        exportData: requestParameters,
                        datasourceRequest: this.prepareDatasourceRequestInfo()
                    },
                    verb: "POST",
                    cb: function (downloadInfo) {
                        if (downloadInfo == null || downloadInfo.Data == null) {
                            window._popUpManager.error("Could not prepare list export file for download!");
                            return;
                        }
                        window.open(window._context.siteRoot + "/" + window._context.currentController + "/DownloadFile?id=" + downloadInfo.Data, "_blank");
                    }
                });
            };
            ListControl.prototype.pushToAggregatorsStatusAtExportTime = function ($container) {
                var self = this;
                for (var i = 0; i < self.status.columns.length; i++) {
                    var temp = self.status.columns[i];
                    var currentRow = $container.find(".row-preference[data-column='" + temp.name + "']");
                    var isCurrentSumeChecked = currentRow.find(".sum-is-visible").is(":checked") === true;
                    if (isCurrentSumeChecked)
                        self.pushToAggregatorsStatus(new Widgets
                            .ListAggregatorInfo(temp.name, Joove.AggregatorTypes.SUM, "PopUpMenu"));
                    var isCurrentAverageChecked = currentRow.find(".average-is-visible").is(":checked") === true;
                    if (isCurrentAverageChecked)
                        self
                            .pushToAggregatorsStatus(new Widgets.ListAggregatorInfo(temp.name, Joove.AggregatorTypes.AVERAGE, "PopUpMenu"));
                }
            };
            ListControl.prototype.spliceFromAggregatorsStatus = function () {
                var self = this;
                for (var i = self.status.aggregators.length - 1; i >= 0; i--) {
                    if (self.status.aggregators[i].origin === "PopUpMenu") {
                        self.status.aggregators.splice(i, 1);
                    }
                }
            };
            ListControl.prototype.updateCellValue = function ($item) {
                var requestParameters = {
                    "key": $item.parents(".list-data-row").attr("data-key"),
                    "property": this.$listColumnHeader.find(".column-titles-container")
                        .children("th:nth-child(" + ($item.closest("td").index() + 1) + ")")
                        .data()
                        .column,
                    "value": $item.is("input[type='checkbox']") ? $item.is(":checked") : $item.val()
                };
                if (typeof (this.options.onUpdateAction) === "undefined") {
                    var options = {
                        controller: window._context.currentController,
                        action: this.elementId + "_UpdateCell",
                        postData: requestParameters
                    };
                    Joove.Core.executeControllerActionNew(options);
                }
                else {
                    Joove.Core.getScope().actions[this.options
                        .onUpdateAction](requestParameters.key, requestParameters.property, requestParameters.value);
                }
            };
            ListControl.prototype.initGlobalListeners = function () {
                var _this = this;
                var self = this;
                self.$list.on("click", ".header-toolbar-container .toggle-quick-filters", function () {
                    self.toggleQuickFiltersRow(this);
                });
                self.$list.on("click", ".list-column-header .show-quick-filters", function () {
                    _this.showQuickFiltersRow();
                });
                self.$list.on("click", ".list-column-header .hide-quick-filters", function () {
                    _this.hideQuickFiltersRow();
                });
                self.$list.on("click", ".header-toolbar-container .global-search-btn", function () {
                    _this.applyGlobalFilter();
                });
                self.$list.on("keydown", ".header-toolbar-container .global-search-input", function (e) {
                    if (e.keyCode === 13)
                        _this.applyGlobalFilter();
                });
                self.$list.on("click", ".header-toolbar-container .global-search-clear", function () {
                    _this.clearGlobalSearch();
                });
                self.$list.on("click", ".list-header .select-all-page-rows", function (event) {
                    var action = $(event.target).data("action");
                    _this.toggleVisibleRowsSelection(action);
                });
                self.$list.on("click", ".list-header .select-all-rows", function (event) {
                    var action = $(event.target).data("action");
                    self.toggleAllRowsSelection(action);
                });
                self.$list.on("click", ".header-toolbar-container .btn-list-reset", function () {
                    _this.resetList();
                });
                self.$list.on("click", ".list-header .btn-list-refresh", function () {
                });
                self.$list.on("click", ".list-header .btn-list-prev-state", function () {
                    self.goBackToClosedGroups();
                });
                self.$list.on("click", ".header-toolbar-container .btn-list-filters", function () {
                    if (_this.options.usePopUpsForPreferences) {
                        _this.showFiltersPopUp();
                    }
                    else {
                        _this.toggleGrids("filters-grid");
                    }
                });
                self.$list.on("click", ".header-toolbar-container .btn-list-groups", function () {
                    if (self.options.usePopUpsForPreferences) {
                        self.showGroupsPopUp();
                    }
                    else {
                        self.toggleGrids("groups-grid");
                    }
                });
                self.$list.on("click", ".header-toolbar-container .btn-list-preferences", function () {
                    if (self.options.usePopUpsForPreferences) {
                        self.showPreferencesPopUp();
                    }
                    else {
                        self.toggleGrids("preferences-grid");
                    }
                });
                self.$list.on("change", ".header-toolbar-container .available-views", function (event) {
                    _this.changeView($(event.target).val());
                });
                self.$list.on("click", ".header-toolbar-container .btn-save-view", function () {
                    _this.showSaveViewPopUp();
                });
                self.$list.on("click", ".header-toolbar-container .btn-make-default-view", function () {
                    _this.saveCurrentViewAsDefault();
                });
                self.$list.on("click", ".header-toolbar-container .btn-remove-view", function () {
                    _this.showDeleteViewPopUp();
                });
                self.$list.on("click", ".header-toolbar-container .clear-all-filters", function () {
                    _this.clearAllFilters();
                });
                self.$list.on("click", ".header-toolbar-container .clear-all-aggregators", function () {
                    _this.clearAllAggregators();
                });
                self.$list.on("click", ".header-toolbar-container .btn-list-export", function () {
                    _this.showExportPopUp();
                });
                self.$list.on("click", ".header-toolbar-container .btn-list-import", function () {
                    _this.showImportPopUp();
                });
                self.$list.on("click", ".column-title .title:not(.not-sortable)", function () {
                    self.sortByColumn(this);
                });
                self.$list.on("click", ".column-title .move-column-right", function () {
                    self.moveColumn(this);
                });
                self.$list.on("click", ".column-title .move-column-left", function () {
                    self.moveColumn(this);
                });
                self.$list.on("mouseenter", ".column-title .row-resize-handler", function () {
                    $(".move-column-right").addClass("no-opacity");
                    $(".move-column-left").addClass("no-opacity");
                });
                self.$list.on("mouseleave", ".column-title .row-resize-handler", function () {
                    $(".move-column-right").removeClass("no-opacity");
                    $(".move-column-left").removeClass("no-opacity");
                });
                self.$list.on("mouseenter", ".list-data-table .list-data-cell", function () {
                    self.highlightCurrentHeaderAndRowNumber(this);
                    $(this).closest("tr").addClass("row-hover").addClass(self.options.hoverRowClass);
                });
                self.$list.on("mouseout", ".list-data-table .list-data-cell", function () {
                    _this.$listHeader.find(".highlighted-cell").removeClass("highlighted-cell");
                    _this.$listData.find(".row-hover").removeClass("row-hover").removeClass(_this.options.hoverRowClass);
                });
                self.$list.on("click", ".list-data-table .list-data-row", function (e) {
                    var clickedRow = this;
                    setTimeout(function () {
                        var dblclick = parseInt($(clickedRow).data("double"), 10);
                        if (dblclick > 0) {
                            $(clickedRow).data("double", dblclick - 1);
                        }
                        else {
                            self.onRowClick(clickedRow);
                            if ($(clickedRow).hasClass(self.options.selectedRowClass) === false)
                                return;
                        }
                    }, 300);
                });
                if ($.inArray(true, this.status.columns.map(function (c) { return c.editable; }))) {
                    self.$list.on("dblclick", ".list-data-table .list-data-row", function () {
                        $(this).data("double", 2);
                        self.onRowDblClick(this);
                    });
                }
                self.$list.on("change", ".list-data-table .list-data-row .list-editable", function () {
                    self.updateCellValue($(this));
                });
                self.$list.on("click", ".list-data-table .list-data-row .list-editable", function (e) {
                    var $row = $(this).closest(".list-data-row");
                    if ($row.hasClass(self.options.selectedRowClass)) {
                        e.stopPropagation();
                    }
                });
                self.$list.on("contextmenu", ".list-data-table .list-data-row", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    if ($(this).hasClass(self.options.selectedRowClass) === false)
                        self.onRowClick(this);
                    self.showRowContextMenu(e);
                });
                self.$list.on("mouseenter", ".list-data-table .list-data-row", function () {
                    $(this).addClass("row-hover").addClass(self.options.hoverRowClass);
                });
                self.$list.on("mouseout", ".list-data-table .list-data-row", function () {
                    _this.$listData.find(".row-hover").removeClass("row-hover").removeClass(_this.options.hoverRowClass);
                });
                self.$list.on("click", ".list-data-table .checkbox-in-data-cell", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                });
                self.$list.on("click", ".list-pager .list-prev-page", function () {
                    if (_this.status.currentPage < 2)
                        return;
                    _this.changePage("-");
                });
                self.$list.on("click", ".list-pager .list-next-page", function () {
                    _this.changePage("+");
                });
                self.$list.on("click", ".list-pager .list-first-page", function () {
                    var $currentPageInput = _this.$list.find(".list-pager .list-current-page:visible").eq(0);
                    $currentPageInput.val("1");
                    $currentPageInput.change();
                });
                self.$list.on("click", ".list-pager .list-last-page", function () {
                    var $currentPageInput = _this.$list.find(".list-pager .list-current-page:visible").eq(0);
                    $currentPageInput.val(String(_this.status.totalPages));
                    $currentPageInput.change();
                });
                self.$list.on("change", ".pager-container .select-page-size", function () {
                    self.changePageSize($(this).val());
                });
                self.$list.on("change", ".list-pager .list-current-page", function () {
                    self.changePage($(this).val());
                });
                self.$list.on("keydown", ".list-pager .list-current-page", function (e) {
                    if (e.keyCode === 13)
                        self.changePage($(this).val());
                });
                self.$list.on("mouseover", ".list-data-table .group-header", function () {
                    $(".group-header").removeClass("hover");
                    $(".group-aggregators-row").removeClass("hover");
                    $(this).addClass("hover");
                });
                self.$list.on("mouseout", ".list-data-table .group-header", function () {
                    $(".group-header").removeClass("hover");
                    $(".group-aggregators-row").removeClass("hover");
                });
                self.$list.on("click", ".list-data-table .group-header", function () {
                    $(this).find(".group-toggle").eq(0).click();
                });
                self.$list.on("click", ".group-header .group-toggle", function (e) {
                    e.stopPropagation();
                    self.toggleGroup(e.target);
                });
                self.$list.on("click", ".group-header .display-group-items", function (e) {
                    e.stopPropagation();
                    var parentGroupInfo = $(e.target).closest(".group-header").data("groupInfo");
                    self.displayClosedGroupContents(parentGroupInfo);
                });
                self.$list.on("dblclick", ".group-header", function (e) {
                    $(e.target).find(".display-group-items").click();
                });
                self.$list.on("mouseover", ".group-aggregators-row", function () {
                    $(".group-header").removeClass("hover");
                    $(".group-aggregators-row").removeClass("hover");
                    $(this).addClass("hover");
                });
                self.$list.on("mouseout", ".group-aggregators-row", function () {
                    $(".group-header").removeClass("hover");
                    $(".group-aggregators-row").removeClass("hover");
                });
                self.$list.on("click", ".group-aggregators-row", function (e) {
                    $(e.target).prev().click();
                });
                self.$list.on("keydown", ".quick-filters-container .quick-filter", function (e) {
                    if (e.keyCode !== 13)
                        return;
                    if ($(this).val().trim() !== "") {
                        self.applyQuickFilters();
                    }
                    else {
                        self.clearQuickFilter($(this).siblings(".remove-quick-filter").eq(0));
                    }
                });
                self.$list.on("keyup", ".quick-filters-container .quick-filter", function (e) {
                    var isNotEmpty = $(this).val().trim() !== "";
                    $(this).siblings(".apply-quick-filter").toggle(isNotEmpty);
                    if (isNotEmpty === false && $(this).hasClass("quick-filter-applied") === true) {
                        $(this).siblings(".remove-quick-filter").addClass("alone");
                    }
                    else {
                        $(this).siblings(".remove-quick-filter").removeClass("alone");
                    }
                });
                self.$list.on("click", ".quick-filters-container .apply-quick-filter", function () {
                    self.applyQuickFilters();
                });
                self.$list.on("click", ".quick-filters-container .remove-quick-filter", function () {
                    self.clearQuickFilter(this);
                });
                self.$list.on("change", ".quick-filters-container [jb-type='DropDownBox']", function (e) {
                    var value = $(this).find(".clmscombobox.form-control").combobox("getValue");
                    $(this).closest(".quick-filter-wrapper").find("input.quick-filter").val(value);
                    self.applyQuickFilters();
                });
                self.$list.on("change", ".quick-filters-container .bool-quick-filter", function (e) {
                    self.applyQuickFilters();
                });
                self.$list.on("click", ".collapsile-grid-footer .cancel-grid", function () {
                    self.toggleGrids($(this).data("cls"));
                    var $target = self.$list.find(".list-preferences-fieldsets-container");
                    switch ($(this).data("cls")) {
                        case "preferences-grid":
                            self.createViewPreferencesFieldSet($target);
                            break;
                        case "filters-grid":
                            self.createFiltersFieldSet($target);
                            break;
                        case "groups-grid":
                            self.createGroupsFieldSet($target);
                            break;
                    }
                });
                self.$list.on("click", ".collapsile-grid-footer .apply-filters-from-grid", function () {
                    var $source = $(this).closest(".collapsible-grid").find(".filters-table-body");
                    self.updateFilters($source);
                });
                self.$list.on("click", ".collapsile-grid-footer .clear-filters-from-grid", function () {
                    $(this).closest(".collapsible-grid").find(".filters-table-body").children().remove();
                    var $source = $(this).closest(".collapsible-grid").find(".filters-table-body");
                    self.updateFilters($source);
                });
                self.$list.on("click", ".collapsile-grid-footer .apply-preferences-from-grid", function () {
                    var $source = $(this).closest(".collapsible-grid").find(".preferences-table-body");
                    self.updatePreferences($source);
                });
                self.$list.on("click", ".collapsile-grid-footer .apply-groups-from-grid", function (evt) {
                    var getGroupsClosed = self.$list.find(".get-groups-closed").is(":checked");
                    self.updateGroups(_this.groupWidget.getDataSourceTerms(), getGroupsClosed);
                });
                self.$list.on("click", ".collapsile-grid-footer .clear-groups-from-grid", function (evt) {
                    $(evt.target).closest(".collapsible-grid").find(".grouping-columns").children().remove();
                    $(evt.target).closest(".collapsible-grid").find(".available-columns").children().show();
                    var groupsArray = [];
                    self.updateGroups(groupsArray, false);
                });
                self.$list.on("contextmenu", ".column-titles-container .column-title", function (evt) {
                    evt.stopPropagation();
                    evt.preventDefault();
                    self.showColumnTitleContextMenu(evt.target, evt);
                });
                $("body")
                    .on("click", function (evt) {
                    $(".title-context-menu").hide();
                    $(".row-context-menu").hide();
                });
                this.$titleContextMenu.on("click", "[data-action]", function (e) {
                    $(".title-context-menu").hide();
                    var action = $(this).data("action");
                    var wasSelected = $(this).data("selected");
                    var column = self.$titleContextMenu.data("column");
                    if (wasSelected === true) {
                        self.removeFromAggregatorsStatus(new Joove.Widgets.ListAggregatorInfo(column, action));
                        if (self.status.groupBy == null ||
                            self.status.groupBy.length == 0) {
                            self.createRecordSetAggregators(true);
                            self.updateControl({ refreshDimensions: true });
                        }
                        else {
                            self.parseAggregatorsOfGroup(self.Groups);
                            self.createGroupAggregatorRows();
                        }
                    }
                    else {
                        self.getAggregatorsForColumn(column, action);
                    }
                });
                self.$rowContextMenu.on("click", "[data-target]", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var $target = $("[jb-id='" + $(this).data("target") + "']");
                    $(".title-context-menu").hide();
                    if ($target.hasClass("not-accessible") === false)
                        $target.click();
                });
                self.$list.on("click", ".common-actions-dropdown [data-target], .mobile-dropdown-menu [data-target]", function () {
                    $("[jb-id='" + $(this).data("target") + "']").click();
                });
            };
            ListControl.prototype.initPredefinedFiltersListeners = function () {
                var _this = this;
                var self = this;
                $("[data-filter-for-list='" + this.elementId + "']:not(.quick-filter)")
                    .on("keydown", function (e) {
                    if (e.keyCode === 13)
                        _this.applyPredefinedFilters();
                });
                this.$predefinedFiltersFieldSet.find(".panel-heading")
                    .on("click", function () {
                    setTimeout(function () {
                        self.refreshDimensions();
                    }, 500);
                });
                this.$predefinedFiltersFieldSet.find(".panel-heading > span > span")
                    .on("click", function () {
                    setTimeout(function () {
                        self.refreshDimensions();
                    }, 500);
                });
            };
            ListControl.prototype.createPreferencesFieldSets = function () {
                this.createViewPreferencesFieldSet(this.$preferencesContainer);
                this.createFiltersFieldSet(this.$filtersContainer);
                this.createGroupsFieldSet(this.$groupsContainer);
            };
            ListControl.prototype.createViewPreferencesFieldSet = function ($target) {
                var self = this;
                $target.find(".preferences-grid").remove();
                var docked = $target === this.$listDockedGrids ? " draggable-docked" : "";
                var arrowDirection = this.isPreferencesMinimized ? "down" : "up";
                var $contents = $("<div class='preferences-grid collapsible-grid" + docked + "'>                             <div class='grids-header preferences-header'>                                   <span class='preferences-fieldset-caption'>" + this.resources.PreferencesPopUpTitle + "</span>                                  <span class='glyphicon glyphicon-remove draggable-action'></span>                                  <span class='glyphicon glyphicon-chevron-" + arrowDirection + " draggable-action'></span>                                  <span class='glyphicon glyphicon-screenshot draggable-action'></span>                              </div><div id=\"listsetting-preferences-container\"></div><div class='collapsile-grid-footer'>                                  <input class='btn btn-sm btn-primary apply-preferences-from-grid' type='button' value='" + this.resources.Apply + "'/>                             </div>                          </div>");
                this.orderWidget = new Widgets.OrderDatasourceWidget({
                    container: $("#listsetting-preferences-container", $contents),
                    resources: this.resources,
                    columns: this.status.columns,
                    orderBy: this.status.orderBy,
                    controlName: this.elementId
                });
                if (this.isPreferencesMinimized) {
                    $contents.find(".collapsible-grid-main-container, .collapsile-grid-footer").css("display", "none");
                }
                $target.append($contents);
                $contents.find(".draggable-action")
                    .on("click", function (event) { self.collapsibleGridActions($(this), "preferences-grid", event); });
                if (this.options.standAlone !== false && docked.length == 0) {
                    $contents.draggable({
                        stop: function (event, ui) {
                            self.draggablePreferencesPosition = ui.position;
                        },
                        containment: self.options.$container
                    });
                }
            };
            ListControl.prototype.createGroupsFieldSet = function ($target) {
                var self = this;
                $target.find(".groups-grid").remove();
                var docked = $target === this.$listDockedGrids ? " draggable-docked" : "";
                var arrowDirection = this.isGroupsMinimized ? "down" : "up";
                var $contents = $("<div class='groups-grid collapsible-grid" + docked + "'>                             <div class='grids-header groups-header'>                                   <span class='preferences-fieldset-caption'>" + this.resources.GroupingOrder + "</span>                                  <span class='glyphicon glyphicon-remove draggable-action'></span>                                  <span class='glyphicon glyphicon-chevron-" + arrowDirection + " draggable-action'></span>                                  <span class='glyphicon glyphicon-screenshot draggable-action'></span>                              </div><div class=\"groups-preferences-container\"></div><div class='collapsile-grid-footer'>                                  <input class='btn btn-sm btn-default clear-groups-from-grid' type='button' value='" + this.resources.ClearAll + "'/>                                  <input class='btn btn-sm btn-primary apply-groups-from-grid' type='button' value='" + this.resources.Apply + "'/>                             </div>                             </div>");
                this.groupWidget = new Widgets.GroupDatasourceWidget({
                    container: $(".groups-preferences-container", $contents),
                    resources: this.resources,
                    columns: this.status.columns,
                    groupBy: this.status.groupBy,
                    controlName: this.elementId
                });
                if (this.isGroupsMinimized) {
                    $contents.find(".collapsible-grid-main-container, .collapsile-grid-footer").css("display", "none");
                }
                $target.append($contents);
                $contents.find(".draggable-action")
                    .on("click", function (event) { self.collapsibleGridActions($(this), "groups-grid", event); });
                if (this.options.standAlone !== false && docked.length === 0) {
                    $contents.draggable({
                        stop: function (event, ui) {
                            self.draggableGroupingPosition = ui.position;
                        },
                        containment: self.options.$container
                    });
                }
                if (this.options.standAlone !== false) {
                    $contents.find(".grids-header")
                        .on("click", function () {
                        if ($(this).parent().hasClass("draggable-docked")) {
                            $(this).find(".glyphicon-chevron-up, .glyphicon-chevron-down").click();
                        }
                    });
                }
            };
            ListControl.prototype.createFiltersFieldSet = function ($target) {
                var self = this;
                $target.find(".filters-grid").remove();
                var docked = $target === this.$listDockedGrids ? " draggable-docked" : "";
                var arrowDirection = this.isFiltersMinimized ? "down" : "up";
                var $contents = $("<div class='filters-grid collapsible-grid" + docked + "'>                                <div class='grids-header filters-header'>                                    <span class='preferences-fieldset-caption'>" + this.resources.FiltersPopUpTitle + "</span>                                    <span class='glyphicon glyphicon-remove draggable-action'></span>                                    <span class='glyphicon glyphicon-chevron-" + arrowDirection + " draggable-action'></span>                                    <span class='glyphicon glyphicon-screenshot draggable-action'></span>                                </div>                                <div class='filters-container collapsible-grid-main-container'></div>                                <div class='collapsile-grid-footer'>                                     <input class='btn btn-sm btn-default clear-filters-from-grid' type='button' value='" + this.resources.ClearAll + "'/>                                     <input class='btn btn-sm btn-primary apply-filters-from-grid' type='button' value='" + this.resources.Apply + "'/>                                 </div>                         </div>");
                this.filterWidget = new Widgets.FilterDatasourceWidget({
                    container: $(".filters-container", $contents),
                    resources: this.resources,
                    columns: this.status.columns,
                    filters: this.status.filters,
                    controlName: this.elementId
                });
                if (this.isFiltersMinimized) {
                    $contents.find(".collapsible-grid-main-container, .collapsile-grid-footer").css("display", "none");
                }
                $target.append($contents);
                $contents.find(".draggable-action")
                    .on("click", function (event) { self.collapsibleGridActions($(this), "filters-grid", event); });
                if (this.options.standAlone !== false && docked.length === 0) {
                    $contents.draggable({
                        stop: function (event, ui) {
                            self.draggableFiltersPosition = ui.position;
                        },
                        containment: self.options.$container
                    });
                }
                if (this.options.standAlone !== false) {
                    $contents.find(".grids-header")
                        .on("click", function () {
                        if ($(this).parent().hasClass("draggable-docked")) {
                            $(this).find(".glyphicon-chevron-up, .glyphicon-chevron-down").click();
                        }
                    });
                }
            };
            ListControl.prototype.collapsibleGridActions = function (target, gridClass, event) {
                var _this = this;
                var self = this;
                var insideDockArea = target.parent().parent().hasClass("draggable-docked");
                if (insideDockArea || target.hasClass("glyphicon-screenshot")) {
                    event.stopPropagation();
                }
                if (target.hasClass("glyphicon-remove")) {
                    self.toggleGrids(gridClass);
                }
                else if (target.hasClass("glyphicon-chevron-up")) {
                    target.parent().siblings().hide();
                    target.removeClass("glyphicon-chevron-up");
                    target.addClass("glyphicon-chevron-down");
                    switch (gridClass) {
                        case "preferences-grid":
                            this.isPreferencesMinimized = true;
                            break;
                        case "groups-grid":
                            this.isGroupsMinimized = true;
                            break;
                        case "filters-grid":
                            this.isFiltersMinimized = true;
                            break;
                    }
                }
                else if (target.hasClass("glyphicon-chevron-down")) {
                    target.parent().siblings().show();
                    target.removeClass("glyphicon-chevron-down");
                    target.addClass("glyphicon-chevron-up");
                    if (insideDockArea) {
                        this.restrictOneDockedGrid(gridClass);
                    }
                    switch (gridClass) {
                        case "preferences-grid":
                            this.isPreferencesMinimized = false;
                            break;
                        case "groups-grid":
                            this.isGroupsMinimized = false;
                            break;
                        case "filters-grid":
                            this.isFiltersMinimized = false;
                            break;
                    }
                }
                else if (target.hasClass("glyphicon-screenshot")) {
                    var $gridContainer = this.$listHeader.find("." + gridClass);
                    var $dockedGridContainer = this.$listDockedGrids.find("." + gridClass);
                    var $resultContainer;
                    if ($gridContainer.hasClass("ui-draggable")) {
                        $gridContainer.draggable("destroy");
                        $gridContainer.addClass("draggable-docked");
                        $gridContainer.appendTo(this.$listDockedGrids);
                        $resultContainer = this.$listDockedGrids;
                        this.restrictOneDockedGrid(gridClass);
                    }
                    else {
                        $dockedGridContainer.detach();
                        $dockedGridContainer.appendTo(this.$listHeader.find(".list-preferences-fieldsets-container"));
                        $resultContainer = this.$listHeader.find(".list-preferences-fieldsets-container");
                        $dockedGridContainer.draggable({
                            stop: function (e, ui) {
                                switch (gridClass) {
                                    case "preferences-grid":
                                        _this.draggablePreferencesPosition = ui.position;
                                        break;
                                    case "groups-grid":
                                        _this.draggableGroupingPosition = ui.position;
                                        break;
                                    case "filters-grid":
                                        _this.draggableFiltersPosition = ui.position;
                                        break;
                                }
                            },
                            containment: self.options.$container
                        });
                        $dockedGridContainer.removeClass("draggable-docked");
                        $dockedGridContainer.find("draggable-docked");
                        $dockedGridContainer.find(".grids-header .glyphicon-chevron-down").click();
                    }
                    switch (gridClass) {
                        case "preferences-grid":
                            this.$preferencesContainer = $resultContainer;
                            break;
                        case "groups-grid":
                            this.$groupsContainer = $resultContainer;
                            break;
                        case "filters-grid":
                            this.$filtersContainer = $resultContainer;
                            break;
                    }
                }
                self.updateControl({ "refreshDimensions": true });
            };
            ListControl.prototype.restrictOneDockedGrid = function (gridClass) {
                this.$listDockedGrids.children()
                    .each(function () {
                    if (!$(this).hasClass(gridClass)) {
                        if ($(this).is(":visible")) {
                            $(this).find(".grids-header .glyphicon-chevron-up").click();
                        }
                    }
                    else {
                        $(this).find(".grids-header .glyphicon-chevron-down").click();
                    }
                });
            };
            ListControl.prototype.showColumnTitleContextMenu = function (element, event) {
                var self = this;
                $(".row-context-menu").hide();
                var $element = $(element);
                var column = null;
                if ($element.hasClass("column-title") === true) {
                    column = this.getColumnInfoByName($element.data("column"));
                }
                else {
                    column = this.getColumnInfoByName($element.closest(".column-title").data("column"));
                }
                if (column == null)
                    return;
                this.$titleContextMenu.children("li[data-action!='" + Joove.AggregatorTypes.COUNT + "']")
                    .toggle(column.supportsAggregators);
                if (typeof (self.status.aggregators) == "undefined")
                    self.status.aggregators = [];
                this.$titleContextMenu.children("li")
                    .each(function () {
                    var isSelected = false;
                    var action = $(this).attr("data-action");
                    for (var i = 0; i < self.status.aggregators.length; i++) {
                        if (action == self.status.aggregators[i].type &&
                            column.name == self.status.aggregators[i].column) {
                            isSelected = true;
                            break;
                        }
                    }
                    $(this).toggleClass("bold", isSelected).data("selected", isSelected);
                });
                this.$titleContextMenu.data("column", column.name)
                    .css({
                    "top": (event.pageY - self.options.$container.offset().top) + "px",
                    "left": (event.pageX - self.options.$container.offset().left) + "px"
                })
                    .show();
            };
            ListControl.prototype.createRowContextMenu = function () {
                var $defaultActionBtn = this.options.$container.find(".list-default-action");
                var $buttons = this.options.$container.find(".show-single, .show-multi, .show-always");
                var getMenuEntryClass = function ($btn) {
                    return $btn.hasClass("show-always") === true
                        ? "show-always"
                        : $defaultActionBtn.hasClass("show-multi") === true ? "show-multi" : "show-single";
                };
                if ($defaultActionBtn.length == 0 && $buttons.length == 0) {
                    this.$rowContextMenu = $("<ul></ul>");
                    return;
                }
                this
                    .$rowContextMenu =
                    $("<ul class='row-context-menu dropdown-menu' role='menu' style='display:none'></ul>");
                var extraClass = getMenuEntryClass($defaultActionBtn);
                if ($defaultActionBtn.length > 0) {
                    this.$rowContextMenu.append("<li data-target='" + $defaultActionBtn
                        .attr("jb-id") + "' class='default-action " + extraClass + "'>                                     <a tabindex='-1' href='javascript:void(0)'>                                         <span class='" + ListControlAsset.Icons.menuItem.bs + "'></span>                                         <span>" + $defaultActionBtn.find("[jb-type='Label']").text() + "</span>                                     </a>                                 </li>");
                }
                for (var i = 0; i < $buttons.length; i++) {
                    var $btn = $buttons.eq(i);
                    if ($btn.hasClass("list-default-action") === true)
                        continue;
                    extraClass = getMenuEntryClass($btn);
                    this.$rowContextMenu.append("<li data-target='" + $btn.attr("jb-id") + "' class='" + extraClass + "'>                                         <a tabindex='-1' href='javascript:void(0)'>                                             <span class='" + ListControlAsset.Icons.menuItem.bs + "'></span>                                             <span>" + $btn.find("[jb-type='Label']").text() + "</span>                                         </a>                                     </li>");
                }
                this.options.$container.append(this.$rowContextMenu);
            };
            ListControl.prototype.showRowContextMenu = function (event) {
                var self = this;
                this.$rowContextMenu.css({
                    "top": (event.pageY - self.options.$container.offset().top) + "px",
                    "left": (event.pageX - self.options.$container.offset().left) + "px"
                })
                    .toggle(this.$rowContextMenu.find("li:not(.hidden)").length > 0);
            };
            ListControl.prototype.applyConditionalFormattings = function () {
                if (this.ruleEvaluations == null || this.ruleEvaluations.length == 0)
                    return;
                var rulesData = window[this.options.parentForm + "_" + this.elementId + "_ConditionalFormattings"];
                if (rulesData == null) {
                    console.error("No c.f. Rules Data found for list!");
                    return;
                }
                for (var i = 0; i < this.ruleEvaluations.length; i++) {
                    var rule = this.ruleEvaluations[i];
                    var state = rule.Status;
                    var ruleInfo = rulesData[rule.RuleName];
                    if (ruleInfo == null) {
                        console.error("No data Rule Info found for list c.f. " + rule.RuleName);
                        continue;
                    }
                    var $rowToApply = this.$list.find(".list-data-row[data-key='" + rule.Key + "']").eq(0);
                    if (rule.ApplyToRow === true) {
                        var ruleInfoForRow = ruleInfo["forRow"];
                        if (ruleInfoForRow == null) {
                            console.error("Row action cf data not found " + rule.RuleName);
                        }
                        else {
                            var actions = state === true
                                ? ruleInfoForRow["whenTrue"]
                                : ruleInfoForRow["whenFalse"];
                            if (actions != null) {
                                window._ruleEngine.applyConditionalFormattingOnControl($rowToApply, state, actions);
                            }
                        }
                    }
                    if (rule.ApplyToColumn === true) {
                        for (var j = 0; j < rule.ColumnNames.length; j++) {
                            var columnToApply = this.options.$container
                                .find(".column-title[data-column='" + rule.ColumnNames[j] + "']");
                            if (columnToApply.length === 0)
                                continue;
                            var ruleInfoForColumn = ruleInfo["forColumns"][rule.ColumnNames[j]];
                            if (ruleInfoForColumn == null) {
                                console.error("column action cf data not found " + rule.ColumnNames[j]);
                                continue;
                            }
                            var actions = state === true
                                ? ruleInfoForColumn["whenTrue"]
                                : ruleInfoForColumn["whenFalse"];
                            if (actions == null)
                                continue;
                            var index = columnToApply.index();
                            var $cellToApply = $rowToApply.children("td").eq(index);
                            window._ruleEngine.applyConditionalFormattingOnControl($cellToApply, state, actions);
                        }
                    }
                }
            };
            ListControl.prototype.isDataTypeNumeric = function (datatype) {
                var numericTypes = ["int", "long", "float", "double", "decimal"];
                return numericTypes.indexOf(datatype) > -1;
            };
            ListControl.prototype.handleError = function (error, jqXhr, textStatus, errorThrown) {
                var ignoredErrorTypes = ["RESTORE_STATE"];
                if (ignoredErrorTypes.indexOf(error.type) > -1 || this.errorOccured)
                    return;
                this.errorOccured = true;
                setTimeout(function () {
                    return;
                }, 500);
                console.log(ListControlAsset.Errors.RESTORE_STATE, jqXhr, textStatus, errorThrown);
            };
            ListControl.prototype.columnMustBeRendered = function (column) {
                if (this.data.ConditionalFormattings == null)
                    return column.isVisible;
                for (var i = 0; i < this.data.ConditionalFormattings.length; i++) {
                    var rule = this.data.ConditionalFormattings[i];
                    if (rule.State === true &&
                        rule.ApplyToColumns.indexOf(column.name) > -1 &&
                        rule.ActionName.indexOf("_Hide_") > -1)
                        return false;
                }
                return column.isVisible;
            };
            ListControl.prototype.getExportPopUpMarkUp = function () {
                return "<div class='export-preferences-container'>             <table class='table' style='margin-bottom:0px;'>                <thead>                    <tr>                        <th style='vertical-align: middle'>" + this.resources.ExportType + "</th>                         <th>                             <select class='form-control export-type'>                                <option value='EXCEL'>Excel</option>                                 <option value='WORD'>Word</option>                                 <option value='PDF'>PDF</option>                             </select>                        </th>                    </tr>                    <tr>                        <th style='vertical-align: middle'>" + this.resources.ExportRange + "</th>                         <th>                             <select class='form-control export-range'>                                <option value='CURRENT'>" + this.resources.ExportRangeCurrent + "</option>                                 <option value='TOP100'>" + this.resources.ExportRange100 + "</option>                                 <option value='ALL'>" + this.resources.ExportRangeAll + "</option>                             </select>                        </th>                    </tr>                    <tr>                         <th style='vertical-align: middle'>                            <span>" + this.resources.FileName + "</span>                        </th>                        <th>                            <input class='default-input form-control export-filename' type='text' value='" + this.elementId + "'>                         </th>                    </tr>                 </thead>             </table>            <fieldset>            <table class='table' style='width:50%; float:left;'>                    <thead>                         <tr class='row-table-export-pop-up' data-column='export-group-data'>                             <th>                                <span>" + this.resources.ExportOnlyGroups + "</span>                            </th>                            <th>                                <input type='checkbox' class='export-only-group-data'>                             </th>                        </tr>                         <tr class='row-table-export-pop-up' data-column='export-PDFportrait-orientation'>                             <th>                                <span>" + this.resources.PortraitOrientation + "</span>                            </th>                            <th>                                <input type='checkbox' class='export-portrait-orientation'>                             </th>                        </tr>                         <tr>                            <th>                                <span>" + this.resources.IncludeGridLines + "</span>                            </th>                            <th>                                <input type='checkbox' class='export-include-grid-lines'>                             </th>                        </tr>                        <tr class='row-table-export-pop-up' data-column='export-total-count'>                            <th>                                <span>" + this.resources.TotalNonGroupCount + "</span>                            </th>                            <th>                                <input type='checkbox' class='export-non-group-count'>                             </th>                        </tr>                        <tr>                             <th>                            <span>" + this.resources.DisplayColumns + "</span>                            </th>                        <th style='padding:0px 0px 0px 0px; vertical-align:middle;'>                            <button id='disCols' jb-id='disCols' title='" + this.resources.DisplayColumns + "' type='button' class='btn btn-default btn-list-preferences' data-state='collapsed' style='padding:5px'>                                <span class='" + ListControlAsset.Icons.prefs.bs + "'></span>                                 </button>                             </th>                        </tr>                     </thead>                </table>            <table class='table' style='width:50%'; float:right;>                <thead style='border-left: medium #DDDDDD; border-left-style: solid;'>                     <tr class='row-table-colors-export-pop-up' data-column='row-table-group-color'>                         <th>                            <span>" + this.resources.GroupColor + "</span>                        </th>                        <th style='padding:0px 0px 0px 0px; vertical-align:middle;'>                            <button id='group-lines-color' jb-id='group-lines-color' class=\"jscolor {closable:true,closeText:'OK', valueElement:null} color-picker-button\" title='Select color'>                             </button>                         </th>                    </tr>                     <tr class='row-table-colors-export-pop-up' data-column='row-table-header-color'>                         <th>                            <span>" + this.resources.HeaderColor + "</span>                        </th>                        <th  style='padding:0px 0px 0px 0px; vertical-align:middle;'>                            <button id='header-line-color' jb-id='header-line-color' class=\"jscolor {closable:true ,closeText:'OK' , valueElement:null, value:'66ccff'} color-picker-button\" title='Select color'>                         </th>                    </tr>                     <tr class='row-table-colors-export-pop-up' data-column='row-table-even-color'>                        <th>                            <span>" + this.resources.EvenColor + "</span>                        </th>                        <th  style='padding:0px 0px 0px 0px; vertical-align:middle;'>                            <button id='even-lines-color' jb-id='even-lines-color' class=\"jscolor {closable:true ,closeText:'OK', valueElement:null, value:'DBD7D0'} color-picker-button\" title='Select color'>                         </th>                    </tr>                    <tr class='row-table-colors-export-pop-up' data-column='row-table-odd-color'>                         <th>                            <span>" + this.resources.OddColor + "</span>                        </th>                        <th  style='padding:0px 0px 0px 0px; vertical-align:middle;'>                            <button id='odd-lines-color' id='jb-odd-lines-color'  class=\"jscolor {closable:true ,closeText:'OK', valueElement:null, value:'D1BFDB'} color-picker-button\" title='Select color'>                         </th>                    </tr>                     <tr class='row-table-colors-export-pop-up' data-column='row-table-aggregate-color'>                         <th>                            <span>" + this.resources.AggregateColor + "</span>                        </th>                        <th  style='padding:0px 0px 0px 0px; vertical-align:middle;'>                            <button id='aggregate-lines-color' jb-id='aggregate-lines-color' class=\"jscolor {closable:true,closeText:'OK', valueElement:null, value:'DBDBDB'} color-picker-button\" title='Select color'>                         </th>                    </tr>                 </thead>             </table>        </fieldset>        </div>";
            };
            ListControl.prototype.updateFilters = function ($filtersTable, filterWidget) {
                this.status.startRow = 0;
                this.status.filters = [];
                this.clearGlobalSearch(true);
                this.clearAllQuickFilters(true);
                var widget = filterWidget || this.filterWidget;
                this.status.filters = widget.getDataSourceTerms();
                this.updateData();
            };
            ListControl.prototype.updatePreferences = function ($preferencesTable, orderWidget) {
                this.status.startRow = 0;
                var widget = orderWidget || this.orderWidget;
                this.status.orderBy = widget.getDataSourceTerms();
                this.status.columns = widget.getColumns();
                this.updateData();
            };
            ListControl.prototype.updateGroups = function (groupsArray, getGroupsClosed) {
                this.status.startRow = 0;
                this.status.currentPage = 1;
                this.status.groupBy = groupsArray;
                this.status.getGroupsClosed = getGroupsClosed;
                if (getGroupsClosed === true)
                    this.openedGroups = [];
                this.updateData();
            };
            ListControl.prototype.showPopUpNew = function (options) {
                window._popUpManager.destroyPopUp(options.name);
                window._popUpManager.registerPopUp({
                    name: options.name,
                    width: options.width || "80%",
                    height: options.height || "60%",
                    cancelButton: options.cancelButton || true,
                    okButton: options.okButton || true,
                    okCallback: function ($container) {
                        options.okCallback && options.okCallback($container);
                    },
                    title: options.title,
                    cssClass: options.cssClass,
                    $elementContent: options.$elementContent,
                    onShowCallback: function () {
                        window["jscolor"].installByClassName("jscolor");
                    }
                });
                window._popUpManager.showPopUp(options.name);
            };
            ListControl.prototype.showPopUp = function (contents, title, name, cb) {
                this.showPopUpNew({
                    name: name,
                    width: "80%",
                    height: "60%",
                    cancelButton: true,
                    okButton: true,
                    okCallback: function ($container) {
                        cb && cb($container);
                    },
                    title: title,
                    cssClass: null,
                    $elementContent: contents
                });
            };
            ListControl.prototype.showFiltersPopUp = function () {
                var _this = this;
                var self = this;
                var contents = $("<div class='filters-pop-up'><div id=\"filter-preferences-popup-container\"></div></div>");
                this.filterPopUpWidget = new Widgets.FilterDatasourceWidget({
                    container: $("#filter-preferences-popup-container", contents),
                    resources: this.resources,
                    columns: this.status.columns,
                    filters: this.status.filters,
                    controlName: this.elementId
                });
                this.showPopUp(contents, this.resources.FiltersPopUpTitle, "filter-preferences-popup", function () {
                    var $source = $(_this).closest(".collapsible-grid").find(".filters-table-body");
                    self.updateFilters($source, _this.filterPopUpWidget);
                    _this.filterWidget.redraw(_this.status.filters);
                });
            };
            ListControl.prototype.showGroupsPopUp = function () {
                var _this = this;
                var contents = $("<div class='groups-pop-up'><div id=\"group-preferences-popup-container\"></div></div>");
                this.groupPopUpWidget = new Widgets.GroupDatasourceWidget({
                    container: $("#group-preferences-popup-container", contents),
                    resources: this.resources,
                    columns: this.status.columns,
                    groupBy: this.status.groupBy,
                    controlName: this.elementId
                });
                this.showPopUp(contents, this.resources.GroupingOrder, "group-preferences-popup", function () {
                    var getGroupsClosed = _this.$list.find(".get-groups-closed").is(":checked");
                    _this.updateGroups(_this.groupPopUpWidget.getDataSourceTerms(), getGroupsClosed);
                    _this.groupWidget.redraw(_this.status.groupBy);
                });
            };
            ListControl.prototype.showPreferencesPopUp = function () {
                var _this = this;
                var contents = $("<div class='preferences-pop-up'><div id=\"order-preferences-popup-container\"></div></div>");
                this.orderPopUpWidget = new Widgets.OrderDatasourceWidget({
                    container: $("#order-preferences-popup-container", contents),
                    resources: this.resources,
                    columns: this.status.columns,
                    orderBy: this.status.orderBy,
                    controlName: this.elementId
                });
                this.showPopUp(contents, this.resources.PreferencesPopUpTitle, "order-preferences-popup", function ($source) {
                    _this.updatePreferences($source, _this.orderPopUpWidget);
                    _this.orderWidget.redraw(_this.status.orderBy, { columns: _this.status.columns });
                });
            };
            ListControl.prototype.showExportPopUp = function () {
                var _this = this;
                var $contents = $("<div class='export-pop-up'>" + this.getExportPopUpMarkUp() + this.getExportDisplayColumns());
                this.populateExportPopUpContainer($contents, false);
                var popUpOptions = {
                    $elementContent: $contents,
                    cancelButton: true,
                    okButton: true,
                    width: "40%",
                    height: "60%",
                    name: "export-list-popup",
                    cssClass: "list-popup",
                    title: this.resources.Export,
                    okCallback: function ($container) {
                        var type = $container.find(".export-type").val();
                        var onlyGroups = $container.find(".export-only-group-data").is(":checked") === true;
                        var range = $container.find(".export-range").val();
                        var fileName = $container.find(".export-filename").val();
                        var includeGridLines = $container.find(".export-include-grid-lines").is(":checked") === true;
                        var portraitOrientation = $container.find(".export-portrait-orientation").is(":checked") === true;
                        var nonGroupCount = $container.find(".export-non-group-count").is(":checked") === true;
                        var visibleColumnsCollection = _this.populateVisibleColumns($container);
                        var groupColor = $container.find("#group-lines-color").css("background-color");
                        var headerColor = $container.find("#header-line-color").css("background-color");
                        var evenColor = $container.find("#even-lines-color").css("background-color");
                        var oddColor = $container.find("#odd-lines-color").css("background-color");
                        var aggregateColor = $container.find("#aggregate-lines-color").css("background-color");
                        var allColumnsNoVisible = visibleColumnsCollection.every(function (x) {
                            for (var i = 0; i < visibleColumnsCollection.length; i++) {
                                if (x.isVisible == true)
                                    return false;
                            }
                            return true;
                        });
                        if (allColumnsNoVisible) {
                            alert("Error - None Visible Column");
                            return;
                        }
                        if (fileName == "") {
                            alert("Error - Empty FileName");
                            return;
                        }
                        var reservedChars = /^[^\\/:\*\?"<>\|]+$/;
                        if (!reservedChars.test(fileName)) {
                            alert("Error - FileName can not contain any of the following characters \/:*?\"<>| ");
                            return;
                        }
                        var forbiddenCharIndex = /^\./;
                        if (!reservedChars.test(fileName)) {
                            alert("Error - FileName can not start with char .");
                            return;
                        }
                        _this.pushToAggregatorsStatusAtExportTime($container);
                        _this.export({
                            type: type,
                            range: range,
                            onlyGroups: onlyGroups,
                            fileName: fileName,
                            includeGridLines: includeGridLines,
                            portraitOrientation: portraitOrientation,
                            visibleColumnsCollection: visibleColumnsCollection,
                            groupColor: groupColor,
                            headerColor: headerColor,
                            evenColor: evenColor,
                            oddColor: oddColor,
                            aggregateColor: aggregateColor,
                            nonGroupCount: nonGroupCount,
                        });
                    }
                };
                this.showPopUpNew(popUpOptions);
            };
            ListControl.prototype.showImportPopUp = function () {
                var contents = "<div class='import-pop-up'>                             <button class='btn btn-default btn-csv-download'>" + this.resources.DownloadCsv + "</button>                             <button class='btn btn-primary btn-csv-upload'>" + this.resources.UploadCsv + "</button>                             </br>                            <i>" + this.resources.PreferedEncoding + "</i>                            <input class='hidden' type='file' id='csvFile' jb-id='csvFile' name='csvFile'>                         </div>                     </div>";
                return;
            };
            ListControl.prototype.showSaveViewPopUp = function () {
                var _this = this;
                var contents = "<div class='save-view-pop-up'>                            <div class='save-view-container'>                                 <table class='table'>                                     <thead>                                        <tr>                                            <th>" + this.resources.ViewName + "</th>                                            <th>" + this.resources.IsDefault + "</th>                                        </tr>                                    </thead>                                    <tbody>                                         <tr>                                            <td>                                                <input class='view-name form-control' type='text' />                                            </td>                                            <td>                                                <input class='view-is-default' type='checkbox' />                                            </td>                                        </tr>                                    </tbody>                                 </table>                             </div>                         </div>";
                var $container = $(contents);
                var $viewsDropDown = this.$listHeader.find(".available-views");
                var $viewName = $container.find(".view-name");
                var $isDefault = $container.find(".view-is-default");
                var selectedViewName = $viewsDropDown.val() == "PREDEFINED" ? "" : $viewsDropDown.val();
                $viewName.val(selectedViewName);
                if (this.viewsCache != null && this.viewsCache.DefaultView == selectedViewName && selectedViewName.length > 0) {
                    $isDefault.prop("checked", true);
                }
                this.showPopUpNew({
                    $elementContent: $container,
                    height: "200px",
                    width: "500px",
                    name: "ListExport",
                    title: this.resources.SaveCurrentView,
                    okCallback: function () {
                        var viewName = $viewName.val().trim();
                        var overwrite = false;
                        if (viewName.length == 0) {
                            alert(_this.resources.SaveCurrentViewNameAlert);
                            return;
                        }
                        if ($viewsDropDown.find("[value='" + viewName + "']").length > 0) {
                            var ok = confirm(_this.resources.OverwriteCurrentView);
                            if (ok === false)
                                return;
                            overwrite = true;
                        }
                        _this.viewsCache = null;
                        if (overwrite === false) {
                            $viewsDropDown.append("<option value='" + viewName + "'>" + viewName + "</option>");
                        }
                        $viewsDropDown.val(viewName);
                        _this.status.currentView = viewName;
                        _this.saveViewToProfile(viewName, $isDefault.is(":checked") === true);
                    },
                });
                window.setTimeout(function () {
                    $viewName.focus();
                }, 500);
            };
            ListControl.prototype.showDeleteViewPopUp = function () {
                var _this = this;
                var contents = "<div class='delete-view-pop-up'>                            <div class='delete-view-container'>                                 <table class='table'>                                     <thead>                                        <tr>                                             <th>" + this.resources.ViewName + "</th>                                            <th>" + this.resources.IsDefault + "</th>                                        </tr>                                    </thead>                                    <tbody>                                         <tr>                                            <td>                                                <input class='view-name form-control disabled' type='text' disabled='disabled' />                                            </td>                                            <td>                                                <input class='view-is-default disabled' type='checkbox' disabled='disabled' />                                            </td>                                        </tr>                                    </tbody>                                 </table>                             </div>                         </div>";
                var $container = $(contents);
                var $viewsDropDown = this.$listHeader.find(".available-views");
                var $viewName = $container.find(".view-name");
                var $isDefault = $container.find(".view-is-default");
                var selectedViewName = $viewsDropDown.val() == "PREDEFINED" ? "" : $viewsDropDown.val();
                $viewName.val(selectedViewName);
                if (this.viewsCache != null && this.viewsCache.DefaultView == selectedViewName && selectedViewName.length > 0) {
                    $isDefault.prop("checked", true);
                }
                this.showPopUpNew({
                    $elementContent: $container,
                    height: "200px",
                    width: "500px",
                    name: "ListExport",
                    title: this.resources.DeleteCurrentView,
                    okCallback: function () {
                        _this.deleteViewFromProfile(selectedViewName);
                    },
                });
            };
            return ListControl;
        }(Widgets.ListControlBase));
        Widgets.ListControl = ListControl;
    })(Widgets = Joove.Widgets || (Joove.Widgets = {}));
})(Joove || (Joove = {}));
