var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup(function (event) {
    if (event.which === 123 && event.ctrlKey && event.shiftKey) {
        var debugConsole = new Joove.Widgets.DebugConsole("#debugConsole", "/MasterPageSignIn/DebugPage", true);
        debugConsole.minmaxModal(false, null);
    }
});
var DSS2_SynchromodalityCapacityOptimisation;
(function (DSS2_SynchromodalityCapacityOptimisation) {
    var Controllers;
    (function (Controllers) {
        var _treeNodesConfiguration = {};
        var MasterPageSignInConditionalFormattings = [];
        var MasterPageSignInDataValidations = [];
        var MasterPageSignInCalculatedExpressions = [];
        var MasterPageSignInController = (function () {
            function MasterPageSignInController($scope, $timeout) {
                var _this = this;
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_MasterPageSignIn.model = window.scope_MasterPageSignIn.dehydrate();
                    //
                    DSS2_SynchromodalityCapacityOptimisation.ViewModels.MasterPageSignIn.MasterPageSignInViewModel._lightCast(window.scope_MasterPageSignIn.model);
                    // Joove.Common.applyScope(window.scope_MasterPageSignIn);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_MasterPageSignIn = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope._ready = false;
                window._context.currentMasterPageObject = this;
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS2_SynchromodalityCapacityOptimisation.ViewModels.MasterPageSignIn.MasterPageSignInViewModel._initializeFrom($scope.model, context);
                };
                $scope._validations = { summary: []
                };
                var onSuccess = function (data, textStatus, jqXhr) {
                    Joove.Core.checkAppVersion();
                    Joove.Core.handleServerResponse("MasterPageSignIn", data);
                    _this.init($scope, $timeout);
                    //Joove.Common.applyScope($scope);
                    //window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {
                    $scope._ready = true;
                    CLMS.Framework.Utilities.FocusOnFirstInputElementOfModal();
                    //});
                }; //end onSuccess()
                window._backEndInfoAggregator.get(false, { success: onSuccess });
            }
            MasterPageSignInController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                $scope.getRules = function () {
                    {
                        return window.$form._validations;
                    }
                };
                $scope.getModelForDebugConsole = function () {
                    {
                        return Joove.Common.getModel();
                    }
                };
                //}
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {};
                // Dataset Handler
                $scope.datasets = {};
                // Controller actions
                $scope.actions = {
                    Render: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("MasterPageSignIn", "Render", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); }
                };
                // Events
                $scope.eventCallbacks = {};
                // Rules
                window._ruleEngine.addDataValidations(MasterPageSignInDataValidations);
                window._ruleEngine.addConditionalFormattings(MasterPageSignInConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(MasterPageSignInCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
            };
            return MasterPageSignInController;
        }());
        angular.module("Application").controller("MasterPageSignInController", ["$scope", "$timeout", MasterPageSignInController]);
    })(Controllers = DSS2_SynchromodalityCapacityOptimisation.Controllers || (DSS2_SynchromodalityCapacityOptimisation.Controllers = {}));
})(DSS2_SynchromodalityCapacityOptimisation || (DSS2_SynchromodalityCapacityOptimisation = {}));
