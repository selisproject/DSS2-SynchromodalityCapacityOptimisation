// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS2_SynchromodalityCapacityOptimisation.ViewModels.ManageOperation {
export class ManageOperationViewModel extends DSS2_SynchromodalityCapacityOptimisation.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
ApplicationOperation:
                true
            }
        } else {
            this._members["ApplicationOperation"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.ApplicationOperation != null)
            instance.ApplicationOperation = ApplicationOperation_ApplicationOperationViewModel._lightCast(instance.ApplicationOperation);
        return instance;
    }

    public static _initializeFrom(original: ManageOperationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ManageOperationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ManageOperationViewModel = new ManageOperationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateManageOperationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateManageOperationViewModel(original: ManageOperationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageForSlideViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.ApplicationOperation !== undefined) this.ApplicationOperation = ApplicationOperation_ApplicationOperationViewModel._initializeFrom(original.ApplicationOperation, ignoreReadOnlyProperties, context);
        this.Button2SelectedItemKeys = original.Button2SelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ManageOperationViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            ManageOperationViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ManageOperationViewModel {
        var reduced = ManageOperationViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        ManageOperationViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: ManageOperationViewModel) {
        if (reduced == null) return;


        DSS2_SynchromodalityCapacityOptimisation.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public ApplicationOperation:
    any;
public Button2SelectedItemKeys:
    any[];
}

export class ApplicationOperation_ApplicationOperationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,IsAvailableToAllAuthorizedUsers:
true,IsAvailableToAnonymous:
true,Name:
true,ParentControllerName:
true,Type:
true,Permissions:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["IsAvailableToAllAuthorizedUsers"] = true;
            this._members["IsAvailableToAnonymous"] = true;
            this._members["Name"] = true;
            this._members["ParentControllerName"] = true;
            this._members["Type"] = true;
            this._members["Permissions"] = true;
        }

        this.Permissions = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Permissions != null) {
            for(let i = 0; i < instance.Permissions.length; i++) {
                instance.Permissions[i] = ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel._lightCast(instance.Permissions[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: ApplicationOperation_ApplicationOperationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ApplicationOperation_ApplicationOperationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ApplicationOperation_ApplicationOperationViewModel = new ApplicationOperation_ApplicationOperationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateApplicationOperation_ApplicationOperationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateApplicationOperation_ApplicationOperationViewModel(original: ApplicationOperation_ApplicationOperationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.IsAvailableToAllAuthorizedUsers !== undefined) this.IsAvailableToAllAuthorizedUsers = original.IsAvailableToAllAuthorizedUsers;
        if(original.IsAvailableToAnonymous !== undefined) this.IsAvailableToAnonymous = original.IsAvailableToAnonymous;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.ParentControllerName !== undefined) this.ParentControllerName = original.ParentControllerName;
        if(original.Type !== undefined) this.Type = original.Type;

        if(original.Permissions != null) {
            for(let i = 0; i < original.Permissions.length; i++) {
                this.Permissions.push(ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel._initializeFrom(original.Permissions[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ApplicationOperation_ApplicationOperationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ApplicationOperation_ApplicationOperationViewModel {
        var reduced = ApplicationOperation_ApplicationOperationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public IsAvailableToAllAuthorizedUsers:
    any;
public IsAvailableToAnonymous:
    any;
public Name:
    any;
public ParentControllerName:
    any;
public Type:
    any;
public Permissions:
    Array<any>;
    public _versionTimestamp?: string;
}

export class ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,IsCustom:
true,Name:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["IsCustom"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel = new ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel(original: ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.IsCustom !== undefined) this.IsCustom = original.IsCustom;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel {
        var reduced = ApplicationOperation_ApplicationOperation_Permissions_ApplicationPermissionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public IsCustom:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

}
