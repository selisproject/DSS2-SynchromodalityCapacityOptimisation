/// <reference types="jquery.datatables" />
declare namespace Joove.Widgets {
    class DataListControl {
        private static readonly MAX_ROWS;
        private static readonly DOUBLE_CLICK_THRESHOLD;
        private static readonly STANDALONE_OUTER_ELEMENTS_DUMMY_CLASS;
        private static readonly PICKLIST_POPUP_MODAL_CLASS;
        private static readonly DEFAULT_DATATABLES_MIN_HEIGHT;
        private static readonly GROUP_PATH_SEPARATOR;
        private static readonly GROUP_VALUE_SEPARATOR;
        private static readonly SANITIZE_COLUMN_REPLACEMENT_VALUE;
        private static readonly DEFAULT_PAGE_SIZE;
        static readonly DEFAULT_DATETIME_FORMAT: string;
        static instancesDic: {
            [name: string]: Widgets.DataListControl;
        };
        $element: JQuery;
        $scopeElement: JQuery;
        serversideElementId: string;
        clientsideElementId: string;
        dataTableInstance: DataTables.DataTable;
        options: IDataListOptions;
        status: IDataListStatus;
        $wrapperElement: JQuery;
        $loadingPanel: JQuery;
        resources: DataListControlResources;
        isInitialized: any;
        drawCallbackExtraFunctionality: Function;
        private aggregatorsInfo;
        private cache;
        private updateFromCache;
        private ruleEvaluations;
        private fromMasterPage;
        private dataSetName;
        private exportHelper;
        private viewsHelper;
        private importHelper;
        private compositeFiltersHelper;
        private lastSearchEventTimestamp;
        private destroyInProgress;
        private resetInProgress;
        constructor(element: JQuery, options: any);
        reInit(): void;
        private instantiate(element, options, fromReInit);
        getColumnInfoKey(): string;
        resetColumnInfo(): void;
        init(scopeElement?: JQuery): void;
        onDataTablesInit(dataTableSettings: any): void;
        listSelectionChanged(): void;
        configureViewsHelper(): UserViewsHelper;
        initializationComplete(settings: any, json: any): void;
        setColumnVisibility(forReset?: boolean): void;
        prepareDatasourceRequestInfo(): DatasourceRequest;
        updateDatasourceFromCache(): void;
        makeDatasourceRequest(data: any, callback: any, settings: any): void;
        makeAggregatorRequest(): void;
        setSelectedItemKeys(selectedItemKeys: any): void;
        maxSelectedRowsReached(numberOfRowsToCheck?: number): boolean;
        updateDirectiveScopeAndModel(callback?: any): void;
        showFullImage($img: JQuery): void;
        updateCellValue($input: JQuery): void;
        getReferencesAccrossViewModel(key: any, runtimeType: any): any[];
        getColumnsConfiguration(): Array<any>;
        cellRender(data: any, type: string, row: any, columnInfo: DataListColumnInfo): string;
        getColumnHeaderHTML(columnInfo: any, index: any): string;
        getDatatablesButtonsConfiguration(): Object[];
        getPageSizeInfo(): (string[] | number[])[];
        getColumnInfoForElement($columnHeader: any): DataListColumnInfo;
        getAggregator(columnName: any, aggregatorType: any): DataListAggregatorInfo;
        isAggregatorDisabled($columnHeader: any, aggregatorType: any): boolean;
        sanitizeColumnName(name: any): any;
        handleError(error: any): void;
        dataTablePageEvent(): void;
        dataTablePageSizeEvent(): void;
        dataTableOrderEvent(event: any): void;
        dataTableColumnReorderEvent(details: any): void;
        dataTableColumnVisibilityEvent(event: any, settings: any, columnIndex: any, state: any): void;
        addGlobalSearch(globalSearchTerm: string, autoApply: boolean): void;
        getFilterOperatorBasedOnColumnDataType(col: DataListColumnInfo): FilterOperators;
        removeFiltersFromGlobalSearch(): void;
        addQuickFilter(columnInfo: DataListColumnInfo, quickFilterSearchTerm: string): void;
        removeQuickFilterFromColumn(col: ColumnInfo): void;
        addCustomFilter(term: string, columnName: string, controlId: string, filterOp: string, rowOp: string, overwriteExisting: boolean, autoApply: boolean): void;
        removeCustomFilterByControlId(id: string): void;
        removeCustomFilterFromColumn(col: ColumnInfo): void;
        removeAllCustomFilters(): void;
        getColumnInfoByName(name: string): DataListColumnInfo;
        clearAllSearchFields(): void;
        dataTableSearchEvent(): void;
        dataTableSelectEvent(event: any, datatable: any, type: any, indexes: any): void;
        initializeDatepickerPlugIn(): void;
        drawCallback(): void;
        fixPager(): void;
        updateDataTableSize(): void;
        updateRowNumbers(): void;
        configureGlobalSearch(): void;
        configureQuickFilters(): void;
        configureCustomFunctionalityButtons(): void;
        getGroupDialogContent(): JQuery;
        initializeGroupingOptions($content: any): void;
        updateGroupingDialogState(): void;
        applyGrouping(): void;
        renderGroups(): void;
        configureGrouping(): void;
        applyPredefinedGrouping(): void;
        configureActionButtons(): void;
        configureActionButtonContextMenu(): void;
        configureSelectionButtons(): void;
        deselectAll(): void;
        actionContextMenuSelect(event: any, ui: any): void;
        actionContextMenuBeforeOpen(event: any, ui: any): void;
        updateActionButtonVisibility(): void;
        convertInputToSearchElement($input: any): JQuery;
        attachSearchElementEventHandlers($searchElement: any): void;
        applySearch($searchElement: any, event: any): void;
        configureAggregators(): void;
        applyPredefinedAggregators(): void;
        aggregatorContextMenuBeforeOpen(event: any, ui: any): void;
        aggregatorContextMenuSelect(event: any, ui: any): void;
        renderAggregators(row: any, data: any, start: any, end: any, display: any): void;
        configureColumnResize(): void;
        intializeDateTimePicker($element: any): void;
        static getTotalRecords(jbID: string): number;
        getModalDialogElement(dialogId: string, title: string, withCancel: boolean): JQuery;
        reset(): void;
        applyNumericMask($inputElement: any): void;
        private getRowElementByRecordKey(key);
        private getHeaderColumnElementByName(name);
        private applyConditionalFormattings();
        getInputSelection(el: any): {
            start: number;
            end: number;
        };
        setInputSelection(el: any, startOffset: any, endOffset: any): void;
        offsetToRangeCharacterMove(el: any, offset: any): number;
    }
}
