// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS2_SynchromodalityCapacityOptimisation.BO {
export class Domain_LocalResourcesDefinition  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Domain_LocalResourcesDefinition";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
    }
OrdersBO_Res_ASSOC_CustomVolume_ShippingOrder_PlannedVolume:
    any;
OrdersBO_Res_ASSOC_CustomVolume_ShippingOrder_ActualVolume:
    any;
Order_Res_ASSOC_Warehouse_GeoCoordinates_GeoCoordinates_Warehouse:
    any;
Order_Res_ASSOC_Warehouse_RegionalAgentsService_RegionalAgent_WarehousesSupport:
    any;
RegionalAgent_Res_ASSOC_RegionalAgent_AddressCoordinates_GeoCoordinates_RegionalAgent:
    any;
RegionalAgent_Res_ASSOC_RegionalAgent_AreaSupport_GeoArea_RegionalAgent:
    any;
ScheduledRoutes_Res_ASSOC_RegionalAgent_ScheduledRouteTemplates_ScheduledRouteTemplate_Owner:
    any;
OrderProposal_Res_ASSOC_SalesForecast_OrderForecasts_OrderForecast_SalesForecast:
    any;
}

export class tblDhlEvent  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlEvent";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.EventID = 0;
    }
EventID:
    any;
EntryDate:
    any;
EventType:
    any;
System:
    any;
RouteIdentifier:
    any;
EventLevel:
    any;
Latitude:
    any;
Longitude:
    any;
Description:
    any;
StatusCode:
    any;
EventDateTime:
    any;
LastUpdated:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.EventID == null || $this.EventID == 0;
    }
}

export class tblDhlIncident  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlIncident";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.IncidentID = 0;
    }
IncidentID:
    any;
EntryDate:
    any;
MessageType:
    any;
System:
    any;
RouteIdentifier:
    any;
IncidentIdentifier:
    any;
StopIdentifier:
    any;
InternalCode:
    any;
OperationIdentifier:
    any;
OperationCode:
    any;
ClientIdentifier:
    any;
Latitude:
    any;
Longitude:
    any;
ReasonIdentifier:
    any;
ReasonDescription:
    any;
IncidentDatetime:
    any;
LastUpdated:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.IncidentID == null || $this.IncidentID == 0;
    }
}

export class tblDhlPlannedRoute  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPlannedRoute";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.PlannedRouteID = 0;
    }
PlannedRouteID:
    any;
EntryDate:
    any;
RouteIdentifier:
    any;
RouteNumber:
    any;
RouteDescription:
    any;
VehicleIdentifier:
    any;
DriverIdentifier:
    any;
DriverName:
    any;
RouteDate:
    any;
LastUpdated:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.PlannedRouteID == null || $this.PlannedRouteID == 0;
    }
}

export class tblDhlPurchase  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPurchase";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Purchase_ID = 0;
    }
Purchase_ID:
    any;
PurchaseOrder:
    any;
OriginCountry:
    any;
OriginProvince:
    any;
OriginCity:
    any;
OriginZipCode:
    any;
OriginAddress:
    any;
OriginLat:
    any;
OriginLng:
    any;
DestinationCountry:
    any;
DestinationProvince:
    any;
DestinationCity:
    any;
DestinationZipCode:
    any;
DestinationAddress:
    any;
DestinationName:
    any;
DestinationLat:
    any;
DestinationLng:
    any;
RouteNumber:
    any;
RouteType:
    any;
FlowType:
    any;
NumberOfStops:
    any;
LoadingType:
    any;
Master:
    any;
RouteKm:
    any;
SupplierName:
    any;
TaxIdentificationNumberSupplier:
    any;
OracleSupplier:
    any;
CustomerName:
    any;
TaxIdentificationNumberCustomer:
    any;
OracleCustomer:
    any;
TotalUtilizationTruck:
    any;
NumberOfPallets:
    any;
OrderM3:
    any;
OrderKgs:
    any;
LoadingDateTime:
    any;
DeliveryDateTime:
    any;
EntryIngress:
    any;
Cost:
    any;
AbsolutMargin:
    any;
Margin:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Purchase_ID == null || $this.Purchase_ID == 0;
    }
}

export class tblDhlRouteStopOperation  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStopOperation";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.RouteStopOperationID = 0;
    }
RouteStopOperationID:
    any;
EntryDate:
    any;
PlannedRouteIdentifier:
    any;
RouteStopIdentifier:
    any;
OperationDescription:
    any;
OperationIdentifier:
    any;
OperationCode:
    any;
ClientIdentifier:
    any;
ClientDescription:
    any;
Weight:
    any;
Volume:
    any;
Packages:
    any;
LinealMeasure:
    any;
Pallets:
    any;
LastUpdated:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.RouteStopOperationID == null || $this.RouteStopOperationID == 0;
    }
}

export class tblDhlRouteStop  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStop";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.RouteStopID = 0;
    }
RouteStopID:
    any;
EntryDate:
    any;
PlannedRouteIdentifier:
    any;
StopIdentifier:
    any;
Order:
    any;
Latitude:
    any;
Longitude:
    any;
NearEstimatedInitialDate:
    any;
FarEstimatedInitialDate:
    any;
NearRequiredInitialDate:
    any;
FarRequiredInitialDate:
    any;
TimeRange:
    any;
Duration:
    any;
LastUpdated:
    any;
tblDhlPlannedRoute:
    any;
tblDhlRouteStopOperation:
    any;
    static settblDhlPlannedRoute = ($this, value) => {
        var oldValue = $this.tblDhlPlannedRoute;
        $this.tblDhlPlannedRoute = value;
        if (value != null) {
        }
    }
    static settblDhlRouteStopOperation = ($this, value) => {
        var oldValue = $this.tblDhlRouteStopOperation;
        $this.tblDhlRouteStopOperation = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.RouteStopID == null || $this.RouteStopID == 0;
    }
}

export class tblDhlTracking  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlTracking";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.TrackingID = 0;
    }
TrackingID:
    any;
EntryDate:
    any;
RouteIdentifier:
    any;
Latitude:
    any;
Longitude:
    any;
Speed:
    any;
Course:
    any;
LastUpdated:
    any;
tblDhlPlannedRoute:
    any;
    static settblDhlPlannedRoute = ($this, value) => {
        var oldValue = $this.tblDhlPlannedRoute;
        $this.tblDhlPlannedRoute = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.TrackingID == null || $this.TrackingID == 0;
    }
}

export class Shipment  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Shipment";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.ShippingOrders = [];
        this.ShipmentStatus = [];
        this.AcceptedConditions = [];
        this.Path = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Owner:
    any;
DepartureTime:
    any;
CurrentStatus:
    any;
Temperature:
    any;
LoadPercentage:
    any;
TotalVolume:
    any;
AverageVolume:
    any;
MaxTravelTime:
    any;
ShippingOrders:
    any;
ShipmentStatus:
    any;
DeparturePoint:
    any;
FinalDestination:
    any;
Driver:
    any;
OccupiedVolume:
    any;
AcceptedConditions:
    any;
VehiculeType:
    any;
Path:
    any;
    static setShippingOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.ShippingOrders == null) $this.ShippingOrders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ShippingOrders.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removeShippingOrders($this, $this.ShippingOrders[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyShippingOrders($this, copyItems);
    }
    static addManyShippingOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShippingOrders($this, items[i]);
        }
    }
    static addShippingOrders = ($this, item) => {
        if ($this.ShippingOrders == null) $this.ShippingOrders = [];
        if (item == null || $this.ShippingOrders.indexOf(item) > -1) return;
        $this.ShippingOrders.push(item);
        ShippingOrder.addShipment(item, $this);
    }
    static addRangeShippingOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShippingOrders($this, item));
    }
    static removeShippingOrders = ($this, item) => {
        if ($this == null || $this.ShippingOrders == null || $this.ShippingOrders.indexOf(item) === -1) return;
        var _index = $this.ShippingOrders.indexOf(item);
        $this.ShippingOrders.splice(_index, 1);
        ShippingOrder.removeShipment(item, $this);
    }
    static clearShippingOrders = ($this) => {
        $this.ShippingOrders = null;
    }
    static setShipmentStatus = ($this, items) => {
        if (items == null) items = [];
        if ($this.ShipmentStatus == null) $this.ShipmentStatus = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ShipmentStatus.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removeShipmentStatus($this, $this.ShipmentStatus[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyShipmentStatus($this, copyItems);
    }
    static addManyShipmentStatus = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShipmentStatus($this, items[i]);
        }
    }
    static addShipmentStatus = ($this, item) => {
        if ($this.ShipmentStatus == null) $this.ShipmentStatus = [];
        if (item == null || $this.ShipmentStatus.indexOf(item) > -1) return;
        $this.ShipmentStatus.push(item);
    }
    static addRangeShipmentStatus = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShipmentStatus($this, item));
    }
    static removeShipmentStatus = ($this, item) => {
        if ($this == null || $this.ShipmentStatus == null || $this.ShipmentStatus.indexOf(item) === -1) return;
        var _index = $this.ShipmentStatus.indexOf(item);
        $this.ShipmentStatus.splice(_index, 1);
    }
    static clearShipmentStatus = ($this) => {
        $this.ShipmentStatus = null;
    }
    static setDeparturePoint = ($this, value) => {
        var oldValue = $this.DeparturePoint;
        $this.DeparturePoint = value;
        if (value != null) {
        }
    }
    static setFinalDestination = ($this, value) => {
        var oldValue = $this.FinalDestination;
        $this.FinalDestination = value;
        if (value != null) {
        }
    }
    static setDriver = ($this, value) => {
        var oldValue = $this.Driver;
        $this.Driver = value;
        if (value != null) {
        }
    }
    static setOccupiedVolume = ($this, value) => {
        var oldValue = $this.OccupiedVolume;
        $this.OccupiedVolume = value;
        if (value != null) {
        }
    }
    static setAcceptedConditions = ($this, items) => {
        if (items == null) items = [];
        if ($this.AcceptedConditions == null) $this.AcceptedConditions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AcceptedConditions.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removeAcceptedConditions($this, $this.AcceptedConditions[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyAcceptedConditions($this, copyItems);
    }
    static addManyAcceptedConditions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addAcceptedConditions($this, items[i]);
        }
    }
    static addAcceptedConditions = ($this, item) => {
        if ($this.AcceptedConditions == null) $this.AcceptedConditions = [];
        if (item == null || $this.AcceptedConditions.indexOf(item) > -1) return;
        $this.AcceptedConditions.push(item);
    }
    static addRangeAcceptedConditions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addAcceptedConditions($this, item));
    }
    static removeAcceptedConditions = ($this, item) => {
        if ($this == null || $this.AcceptedConditions == null || $this.AcceptedConditions.indexOf(item) === -1) return;
        var _index = $this.AcceptedConditions.indexOf(item);
        $this.AcceptedConditions.splice(_index, 1);
    }
    static clearAcceptedConditions = ($this) => {
        $this.AcceptedConditions = null;
    }
    static setVehiculeType = ($this, value) => {
        var oldValue = $this.VehiculeType;
        $this.VehiculeType = value;
        if (value != null) {
        }
    }
    static setPath = ($this, items) => {
        if (items == null) items = [];
        if ($this.Path == null) $this.Path = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Path.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removePath($this, $this.Path[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyPath($this, copyItems);
    }
    static addManyPath = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addPath($this, items[i]);
        }
    }
    static addPath = ($this, item) => {
        if ($this.Path == null) $this.Path = [];
        if (item == null || $this.Path.indexOf(item) > -1) return;
        $this.Path.push(item);
    }
    static addRangePath = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addPath($this, item));
    }
    static removePath = ($this, item) => {
        if ($this == null || $this.Path == null || $this.Path.indexOf(item) === -1) return;
        var _index = $this.Path.indexOf(item);
        $this.Path.splice(_index, 1);
    }
    static clearPath = ($this) => {
        $this.Path = null;
    }
    static Get_AverageVolume($this: any): any{return Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.Path.linq.sum((a) => Joove.Common.nullSafe<any>(() => a.CurrentLoad, 0)), 0)) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.Path.length, 0)))) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.TotalVolume, 0));

                                                 }
        static Get_CurrentStatus($this: any): any{if ((Joove.Common.nullSafe<any>(() => $this.ShipmentStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeReported, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null), null) != null && Joove.Common.nullSafe<any>(() => $this.ShipmentStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeReported, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status, null) != null)) {
    return Joove.Common.nullSafe<any>(() => $this.ShipmentStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeReported, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status.Description, "");
    }

    return null;

                                             }
    static GetCostSplit($this: any, WeightVolume: any,WeightPoints: any,WeightPath: any): any{return null;

                                                                                                 }
        static GetVolumeSpread($this: any): any{return Joove.Common.nullSafe<any>(() => $this.Path.linq.select((a) => Joove.Common.nullSafe<any>(() => a.CurrentLoad, 0)).toArray(), null);

                                               }
        static MaxVolume($this: any): any{return Joove.Common.nullSafe<any>(() => $this.Path.linq.select((a) => Joove.Common.nullSafe<any>(() => a.CurrentLoad, 0)).max(), 0);

                                         }
        static OrderFits($this: any, Order: any): any{return CLMS.Framework.Number.LessThanOrEqual(() => Joove.Common.safeNumber(DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.MaxVolume($this)) + Joove.Common.safeNumber(DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.Get_AggregateVolume(Order)), () => $this.TotalVolume);

                                                     }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ShipmentStatus  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ShipmentStatus";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TimeReported:
    any;
Description:
    any;
User:
    any;
Status:
    any;
    static setStatus = ($this, value) => {
        var oldValue = $this.Status;
        $this.Status = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Point  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Point";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LocId:
    any;
Time:
    any;
Distance:
    any;
CurrentLoad:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ShippingOrder  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Shipment = [];
        this.StatusEvolution = [];
        this.PlannedVolume = [];
        this.ActualVolume = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DepartureDate:
    any;
ArrivalDate:
    any;
Shipper:
    any;
Carrier:
    any;
CurrentStatus:
    any;
ItemDescription:
    any;
Conditions:
    any;
AggregateVolume:
    any;
Priority:
    any;
Shipment:
    any;
DeparturePoint:
    any;
ArrivalPoint:
    any;
StatusEvolution:
    any;
Parent:
    any;
PlannedVolume:
    any;
ActualVolume:
    any;
ItemType:
    any;
    static setShipment = ($this, items) => {
        if (items == null) items = [];
        if ($this.Shipment == null) $this.Shipment = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Shipment.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removeShipment($this, $this.Shipment[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyShipment($this, copyItems);
    }
    static addManyShipment = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addShipment($this, items[i]);
        }
    }
    static addShipment = ($this, item) => {
        if ($this.Shipment == null) $this.Shipment = [];
        if (item == null || $this.Shipment.indexOf(item) > -1) return;
        $this.Shipment.push(item);
        Shipment.addShippingOrders(item, $this);
    }
    static addRangeShipment = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addShipment($this, item));
    }
    static removeShipment = ($this, item) => {
        if ($this == null || $this.Shipment == null || $this.Shipment.indexOf(item) === -1) return;
        var _index = $this.Shipment.indexOf(item);
        $this.Shipment.splice(_index, 1);
        Shipment.removeShippingOrders(item, $this);
    }
    static clearShipment = ($this) => {
        $this.Shipment = null;
    }
    static setDeparturePoint = ($this, value) => {
        var oldValue = $this.DeparturePoint;
        $this.DeparturePoint = value;
        if (value != null) {
        }
    }
    static setArrivalPoint = ($this, value) => {
        var oldValue = $this.ArrivalPoint;
        $this.ArrivalPoint = value;
        if (value != null) {
        }
    }
    static setStatusEvolution = ($this, items) => {
        if (items == null) items = [];
        if ($this.StatusEvolution == null) $this.StatusEvolution = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.StatusEvolution.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removeStatusEvolution($this, $this.StatusEvolution[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyStatusEvolution($this, copyItems);
    }
    static addManyStatusEvolution = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addStatusEvolution($this, items[i]);
        }
    }
    static addStatusEvolution = ($this, item) => {
        if ($this.StatusEvolution == null) $this.StatusEvolution = [];
        if (item == null || $this.StatusEvolution.indexOf(item) > -1) return;
        $this.StatusEvolution.push(item);
    }
    static addRangeStatusEvolution = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addStatusEvolution($this, item));
    }
    static removeStatusEvolution = ($this, item) => {
        if ($this == null || $this.StatusEvolution == null || $this.StatusEvolution.indexOf(item) === -1) return;
        var _index = $this.StatusEvolution.indexOf(item);
        $this.StatusEvolution.splice(_index, 1);
    }
    static clearStatusEvolution = ($this) => {
        $this.StatusEvolution = null;
    }
    static setParent = ($this, value) => {
        var oldValue = $this.Parent;
        $this.Parent = value;
        if (value != null) {
        }
    }
    static setPlannedVolume = ($this, items) => {
        if (items == null) items = [];
        if ($this.PlannedVolume == null) $this.PlannedVolume = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PlannedVolume.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removePlannedVolume($this, $this.PlannedVolume[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyPlannedVolume($this, copyItems);
    }
    static addManyPlannedVolume = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addPlannedVolume($this, items[i]);
        }
    }
    static addPlannedVolume = ($this, item) => {
        if ($this.PlannedVolume == null) $this.PlannedVolume = [];
        if (item == null || $this.PlannedVolume.indexOf(item) > -1) return;
        $this.PlannedVolume.push(item);
    }
    static addRangePlannedVolume = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addPlannedVolume($this, item));
    }
    static removePlannedVolume = ($this, item) => {
        if ($this == null || $this.PlannedVolume == null || $this.PlannedVolume.indexOf(item) === -1) return;
        var _index = $this.PlannedVolume.indexOf(item);
        $this.PlannedVolume.splice(_index, 1);
    }
    static clearPlannedVolume = ($this) => {
        $this.PlannedVolume = null;
    }
    static setActualVolume = ($this, items) => {
        if (items == null) items = [];
        if ($this.ActualVolume == null) $this.ActualVolume = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ActualVolume.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removeActualVolume($this, $this.ActualVolume[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyActualVolume($this, copyItems);
    }
    static addManyActualVolume = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addActualVolume($this, items[i]);
        }
    }
    static addActualVolume = ($this, item) => {
        if ($this.ActualVolume == null) $this.ActualVolume = [];
        if (item == null || $this.ActualVolume.indexOf(item) > -1) return;
        $this.ActualVolume.push(item);
    }
    static addRangeActualVolume = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addActualVolume($this, item));
    }
    static removeActualVolume = ($this, item) => {
        if ($this == null || $this.ActualVolume == null || $this.ActualVolume.indexOf(item) === -1) return;
        var _index = $this.ActualVolume.indexOf(item);
        $this.ActualVolume.splice(_index, 1);
    }
    static clearActualVolume = ($this) => {
        $this.ActualVolume = null;
    }
    static setItemType = ($this, value) => {
        var oldValue = $this.ItemType;
        $this.ItemType = value;
        if (value != null) {
        }
    }
    static CalculateOrderCost($this: any): any{return 1.00;

                                                  }
        static Get_AggregateLoad($this: any): any{let TotalMass = null;

                for (let _ii = 0; _ii < (Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null).length); _ii++) {
    var i = Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null)[_ii];
        TotalMass = Joove.Common.safeNumber(TotalMass) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => i.Weight, 0));
    }

    return TotalMass;

                                             }
    static Get_AggregateVolume($this: any): any{let TotalVolume = null;

                for (let _ii = 0; _ii < (Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null).length); _ii++) {
    var i = Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null)[_ii];
        TotalVolume = Joove.Common.safeNumber(TotalVolume) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => i.VolumeComposition.linq.where().firstOrDefault(null).VolumeComponent.StandardVolume, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => i.VolumeComposition.linq.where().firstOrDefault(null).Units, 0));
    }

    Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Error, "Agregate " + Joove.Common.safeNumber(TotalVolume)), null);

    return TotalVolume;

                                               }
    static Get_CurrentStatus($this: any): any{if ((Joove.Common.nullSafe<any>(() => $this.StatusEvolution.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeChanged, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null), null) != null && Joove.Common.nullSafe<any>(() => $this.StatusEvolution.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeChanged, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status, null) != null)) {
    return Joove.Common.nullSafe<any>(() => $this.StatusEvolution.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeChanged, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status.Description, "");
    }

    return null;

                                             }
    static NewOperation($this: any): any{}
        static NewOperation1($this: any): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StatusEvolution  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StatusEvolution";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TimeChanged:
    any;
Description:
    any;
User:
    any;
Status:
    any;
    static setStatus = ($this, value) => {
        var oldValue = $this.Status;
        $this.Status = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Volume  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Volume";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Pallets:
    any;
Items:
    any;
Weight:
    any;
Supplier:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ItemType  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ItemType";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
Temperature:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Priority  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Priority";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Status  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Status";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Location  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Location";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Driver = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Street:
    any;
City:
    any;
Country:
    any;
Number:
    any;
PostCode:
    any;
Label:
    any;
Driver:
    any;
Coordinates:
    any;
    static setDriver = ($this, items) => {
        if (items == null) items = [];
        if ($this.Driver == null) $this.Driver = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Driver.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Location.removeDriver($this, $this.Driver[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Location.addManyDriver($this, copyItems);
    }
    static addManyDriver = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Location.addDriver($this, items[i]);
        }
    }
    static addDriver = ($this, item) => {
        if ($this.Driver == null) $this.Driver = [];
        if (item == null || $this.Driver.indexOf(item) > -1) return;
        $this.Driver.push(item);
        if (item.Employer != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Driver.setEmployer(item, $this);
        }
    }
    static addRangeDriver = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Location.addDriver($this, item));
    }
    static removeDriver = ($this, item) => {
        if ($this == null || $this.Driver == null || $this.Driver.indexOf(item) === -1) return;
        var _index = $this.Driver.indexOf(item);
        $this.Driver.splice(_index, 1);
        item.Employer = null;
    }
    static clearDriver = ($this) => {
        $this.Driver = null;
    }
    static setCoordinates = ($this, value) => {
        var oldValue = $this.Coordinates;
        $this.Coordinates = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Coordinates  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Coordinates";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoordinateX:
    any;
CoordinateY:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Reason  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Reason";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
test:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Condition  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Condition";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class LegVolumeDetails  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.LegVolumeDetails";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FreeSpace:
    any;
Time:
    any;
Distance:
    any;
CurrentLoad:
    any;
Origin:
    any;
Destination:
    any;
    static setOrigin = ($this, value) => {
        var oldValue = $this.Origin;
        $this.Origin = value;
        if (value != null) {
        }
    }
    static setDestination = ($this, value) => {
        var oldValue = $this.Destination;
        $this.Destination = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PathVolumeDetail  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Legs = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalTime:
    any;
Legs:
    any;
Shipment:
    any;
    static setLegs = ($this, items) => {
        if (items == null) items = [];
        if ($this.Legs == null) $this.Legs = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Legs.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.removeLegs($this, $this.Legs[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.addManyLegs($this, copyItems);
    }
    static addManyLegs = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.addLegs($this, items[i]);
        }
    }
    static addLegs = ($this, item) => {
        if ($this.Legs == null) $this.Legs = [];
        if (item == null || $this.Legs.indexOf(item) > -1) return;
        $this.Legs.push(item);
    }
    static addRangeLegs = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.addLegs($this, item));
    }
    static removeLegs = ($this, item) => {
        if ($this == null || $this.Legs == null || $this.Legs.indexOf(item) === -1) return;
        var _index = $this.Legs.indexOf(item);
        $this.Legs.splice(_index, 1);
    }
    static clearLegs = ($this) => {
        $this.Legs = null;
    }
    static setShipment = ($this, value) => {
        var oldValue = $this.Shipment;
        $this.Shipment = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CostSplit  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Cost:
    any;
Shipper:
    any;
StandAloneCost:
    any;
Orders:
    any;
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.removeOrders($this, $this.Orders[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StatusRule  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StatusRule";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Limit:
    any;
Case:
    any;
Carrier:
    any;
Shipper:
    any;
MailShipper:
    any;
MailCarrier:
    any;
CustomMail:
    any;
Status:
    any;
ForcedStatus:
    any;
    static setStatus = ($this, value) => {
        var oldValue = $this.Status;
        $this.Status = value;
        if (value != null) {
        }
    }
    static setForcedStatus = ($this, value) => {
        var oldValue = $this.ForcedStatus;
        $this.ForcedStatus = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Vehicule  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OverHeadCost:
    any;
CalculatedTimeCost:
    any;
CalculatedDistanceCost:
    any;
CalculatedOwnershipCost:
    any;
VehiculeType:
    any;
Volume:
    any;
CO2perKm:
    any;
AmortizationType:
    any;
MaximumLoad:
    any;
DistanceCosts:
    any;
TimeCosts:
    any;
OwnershipCost:
    any;
AmortizationType1:
    any;
    static setDistanceCosts = ($this, value) => {
        var oldValue = $this.DistanceCosts;
        $this.DistanceCosts = value;
        if (value != null) {
        }
    }
    static setTimeCosts = ($this, value) => {
        var oldValue = $this.TimeCosts;
        $this.TimeCosts = value;
        if (value != null) {
        }
    }
    static setOwnershipCost = ($this, value) => {
        var oldValue = $this.OwnershipCost;
        $this.OwnershipCost = value;
        if (value != null) {
            if (oldValue != null && oldValue.Vehicule != null) {
                oldValue.Vehicule = null;
            }
            if ($this.OwnershipCost.Vehicule !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost.setVehicule(value, $this);
            }
        }
    }
    static setAmortizationType1 = ($this, value) => {
        var oldValue = $this.AmortizationType1;
        $this.AmortizationType1 = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DistanceCosts  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.PropulsionTypeCost = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalDistanceDriven:
    any;
TotalDistanceService:
    any;
OilCost:
    any;
OilConsumption:
    any;
TireCost:
    any;
YearlyReparationCost:
    any;
Cost:
    any;
TireConsumption:
    any;
PropulsionTypeCost:
    any;
    static setPropulsionTypeCost = ($this, items) => {
        if (items == null) items = [];
        if ($this.PropulsionTypeCost == null) $this.PropulsionTypeCost = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PropulsionTypeCost.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.removePropulsionTypeCost($this, $this.PropulsionTypeCost[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.addManyPropulsionTypeCost($this, copyItems);
    }
    static addManyPropulsionTypeCost = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.addPropulsionTypeCost($this, items[i]);
        }
    }
    static addPropulsionTypeCost = ($this, item) => {
        if ($this.PropulsionTypeCost == null) $this.PropulsionTypeCost = [];
        if (item == null || $this.PropulsionTypeCost.indexOf(item) > -1) return;
        $this.PropulsionTypeCost.push(item);
    }
    static addRangePropulsionTypeCost = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.addPropulsionTypeCost($this, item));
    }
    static removePropulsionTypeCost = ($this, item) => {
        if ($this == null || $this.PropulsionTypeCost == null || $this.PropulsionTypeCost.indexOf(item) === -1) return;
        var _index = $this.PropulsionTypeCost.indexOf(item);
        $this.PropulsionTypeCost.splice(_index, 1);
    }
    static clearPropulsionTypeCost = ($this) => {
        $this.PropulsionTypeCost = null;
    }
    static SetCost($this: any, Cost: any): any{$this.Cost = Cost;

                                                  }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TimeCosts  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TimeCosts";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DriverSalary:
    any;
DriverWorkHours:
    any;
DriverServiceHours:
    any;
VehiculeHoursPerDay:
    any;
VehiculeDaysPerYear:
    any;
RoadTax:
    any;
VehiculeInsurance:
    any;
GoodsInssurance:
    any;
Maintainance:
    any;
DaysOfReplacementVehicules:
    any;
CostOfReplacement:
    any;
Cost:
    any;
    static SetCost($this: any, Cost: any): any{$this.Cost = Cost;

                                                  }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OwnershipCost  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
VehiculePurchaseCost:
    any;
RefrigerationSystemCost:
    any;
LetteringCost:
    any;
InterestRate:
    any;
PaybackPeriod:
    any;
TotalDistancePerVehicule:
    any;
AmortizationPeriod:
    any;
ResidualValue:
    any;
UtilizationPeriod:
    any;
Cost:
    any;
Vehicule:
    any;
    static setVehicule = ($this, value) => {
        var oldValue = $this.Vehicule;
        $this.Vehicule = value;
        if (value != null) {
            if (oldValue != null && oldValue.OwnershipCost != null) {
                oldValue.OwnershipCost = null;
            }
            if ($this.Vehicule.OwnershipCost !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule.setOwnershipCost(value, $this);
            }
        }
    }
    static SetCost($this: any, Cost: any): any{$this.Cost = Cost;

                                                  }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PropulsionTypeCost  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PropulsionTypeCost";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Cost:
    any;
AverageConsumption:
    any;
Percentage:
    any;
OilType:
    any;
    static setOilType = ($this, value) => {
        var oldValue = $this.OilType;
        $this.OilType = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OilType  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OilType";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Oil:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AmortizationType  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AmortizationType";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Label:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class VolumePerShipper  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.VolumePerShipper";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
Volume:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CO2PerCarrier  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.CO2PerCarrier";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
KgCO2:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CustomVolume  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.VolumeComposition = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Weight:
    any;
Label:
    any;
VolumeComposition:
    any;
    static setVolumeComposition = ($this, items) => {
        if (items == null) items = [];
        if ($this.VolumeComposition == null) $this.VolumeComposition = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.VolumeComposition.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.removeVolumeComposition($this, $this.VolumeComposition[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.addManyVolumeComposition($this, copyItems);
    }
    static addManyVolumeComposition = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.addVolumeComposition($this, items[i]);
        }
    }
    static addVolumeComposition = ($this, item) => {
        if ($this.VolumeComposition == null) $this.VolumeComposition = [];
        if (item == null || $this.VolumeComposition.indexOf(item) > -1) return;
        $this.VolumeComposition.push(item);
    }
    static addRangeVolumeComposition = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.addVolumeComposition($this, item));
    }
    static removeVolumeComposition = ($this, item) => {
        if ($this == null || $this.VolumeComposition == null || $this.VolumeComposition.indexOf(item) === -1) return;
        var _index = $this.VolumeComposition.indexOf(item);
        $this.VolumeComposition.splice(_index, 1);
    }
    static clearVolumeComposition = ($this) => {
        $this.VolumeComposition = null;
    }
    static Compare($this: any, Volume: any): any{let compare = 0;

                for (var i = 0; CLMS.Framework.Number.LessThan(() => i, () => $this.VolumeComposition.length); i = Joove.Common.safeNumber(i) + Joove.Common.safeNumber(1)) {
    if ((CLMS.Framework.Number.NotEqual(() => $this.VolumeComposition[i].Units, () => Volume.VolumeComposition[i].Units))) {
            compare = Joove.Common.safeNumber(compare) + Joove.Common.safeNumber(1);
        }
    }


    return compare;

                                                }
    static CustomCopy($this: any): any{let returnVolume = Joove.Common.nullSafe<any>(() => new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume(), null);

                                           returnVolume.Label = Joove.Common.nullSafe<any>(() => $this.Label, "");

                                           returnVolume.Weight = Joove.Common.nullSafe<any>(() => $this.Weight, 0);

                                           for (let _ij = 0; _ij < (Joove.Common.nullSafe<any>(() => $this.VolumeComposition, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.VolumeComposition, null).length); _ij++) {
    var j = Joove.Common.nullSafe<any>(() => $this.VolumeComposition, null)[_ij];
        let currentVolume = Joove.Common.nullSafe<any>(() => new DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition(), null);
        currentVolume.Units = Joove.Common.nullSafe<any>(() => j.Units, 0);
        DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition.setVolumeComponent(currentVolume, Joove.Common.nullSafe<any>(() => j.VolumeComponent, null));
        Joove.Common.nullSafe<any>(() => returnVolume.VolumeComposition.add(currentVolume), null);
    }

    return returnVolume;

                                      }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class VolumeComponent  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComponent";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
StandardVolume:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class VolumeComposition  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
VolumeComponent:
    any;
    static setVolumeComponent = ($this, value) => {
        var oldValue = $this.VolumeComponent;
        $this.VolumeComponent = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Solution  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Solution";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Routes = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalTime:
    any;
TotalDistance:
    any;
Routes:
    any;
    static setRoutes = ($this, items) => {
        if (items == null) items = [];
        if ($this.Routes == null) $this.Routes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Routes.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Solution.removeRoutes($this, $this.Routes[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Solution.addManyRoutes($this, copyItems);
    }
    static addManyRoutes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Solution.addRoutes($this, items[i]);
        }
    }
    static addRoutes = ($this, item) => {
        if ($this.Routes == null) $this.Routes = [];
        if (item == null || $this.Routes.indexOf(item) > -1) return;
        $this.Routes.push(item);
    }
    static addRangeRoutes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Solution.addRoutes($this, item));
    }
    static removeRoutes = ($this, item) => {
        if ($this == null || $this.Routes == null || $this.Routes.indexOf(item) === -1) return;
        var _index = $this.Routes.indexOf(item);
        $this.Routes.splice(_index, 1);
    }
    static clearRoutes = ($this) => {
        $this.Routes = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Route  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Route";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Activities = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalTime:
    any;
TotalDistance:
    any;
Vehicule:
    any;
Activities:
    any;
    static setVehicule = ($this, value) => {
        var oldValue = $this.Vehicule;
        $this.Vehicule = value;
        if (value != null) {
        }
    }
    static setActivities = ($this, items) => {
        if (items == null) items = [];
        if ($this.Activities == null) $this.Activities = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Activities.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Route.removeActivities($this, $this.Activities[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Route.addManyActivities($this, copyItems);
    }
    static addManyActivities = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Route.addActivities($this, items[i]);
        }
    }
    static addActivities = ($this, item) => {
        if ($this.Activities == null) $this.Activities = [];
        if (item == null || $this.Activities.indexOf(item) > -1) return;
        $this.Activities.push(item);
    }
    static addRangeActivities = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Route.addActivities($this, item));
    }
    static removeActivities = ($this, item) => {
        if ($this == null || $this.Activities == null || $this.Activities.indexOf(item) === -1) return;
        var _index = $this.Activities.indexOf(item);
        $this.Activities.splice(_index, 1);
    }
    static clearActivities = ($this) => {
        $this.Activities = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Activity  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Activity";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TravelDistance:
    any;
TravelDuration:
    any;
Order:
    any;
Point:
    any;
    static setOrder = ($this, value) => {
        var oldValue = $this.Order;
        $this.Order = value;
        if (value != null) {
        }
    }
    static setPoint = ($this, value) => {
        var oldValue = $this.Point;
        $this.Point = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderDTO  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderDTO";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.OrderDTOKey = 0;
    }
OrdID:
    any;
OrdOrderID_Remote:
    any;
OrdOrderExternalCode:
    any;
OrdOrderDescr:
    any;
OrdRegDateTime:
    any;
OrdDateTime:
    any;
OrdDeliveryDateTime:
    any;
OrdDepositorCode:
    any;
OrdDepositorFullName:
    any;
OrdCustomerCode:
    any;
OrdCustomerFullName:
    any;
OrdStatus:
    any;
OrdMemo:
    any;
OrdPurpose:
    any;
OrdDeliveryValue:
    any;
OrdDeliveryNotes:
    any;
OrdIsReturn:
    any;
OrdPrdTypeDescr:
    any;
OrdWrhRoutingCode:
    any;
OrdDlsId:
    any;
OrdDlsDescr:
    any;
OrdDlsAddress:
    any;
OrdDlsZipCode:
    any;
OrdDlsCity:
    any;
OrdDlsArea:
    any;
OrdRoutingStatus:
    any;
OrdLfdWeight:
    any;
OrdLfdVol:
    any;
OrdLfdCtn:
    any;
OrdLfdBar:
    any;
OrdLfdPalEuro:
    any;
OrdLfdPalInd:
    any;
OrdLfdPalElsa:
    any;
OrdLfdParOU:
    any;
OrdLfdVar:
    any;
OrdVoucherDateTime:
    any;
OrdVoucherNumber:
    any;
OrdVoucherSeries:
    any;
OrdVoucherId:
    any;
OrdAgencyCode:
    any;
OrdAgencyDescr:
    any;
OrdAgencyAddress:
    any;
OrdTelRouteId:
    any;
OrdVchPlateNr:
    any;
OrdVchRouteNr:
    any;
OrdVhrDate:
    any;
OrdVhrID:
    any;
OrdLastUpdateDateTime:
    any;
OrdReadyForLoading:
    any;
Warehouse:
    any;
WarehouseAddress:
    any;
Polyline:
    any;
OrderDTOKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.OrderDTOKey == null || $this.OrderDTOKey == 0;
    }
}

export class OrderStatistics  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderStatistics";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalDeliveries:
    any;
TotalOnTime:
    any;
TotalInFull:
    any;
TotalAsOrdered:
    any;
TotalImpeachments:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class LSP  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.LSP";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.LSPUsers = [];
        this.PrivateTemplates = [];
        this.WorkContracts = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LSPName:
    any;
LSPDescription:
    any;
LSPUsers:
    any;
PrivateTemplates:
    any;
WorkContracts:
    any;
    static setLSPUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.LSPUsers == null) $this.LSPUsers = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.LSPUsers.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeLSPUsers($this, $this.LSPUsers[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addManyLSPUsers($this, copyItems);
    }
    static addManyLSPUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addLSPUsers($this, items[i]);
        }
    }
    static addLSPUsers = ($this, item) => {
        if ($this.LSPUsers == null) $this.LSPUsers = [];
        if (item == null || $this.LSPUsers.indexOf(item) > -1) return;
        $this.LSPUsers.push(item);
        if (item.LSP != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser.setLSP(item, $this);
        }
    }
    static addRangeLSPUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addLSPUsers($this, item));
    }
    static removeLSPUsers = ($this, item) => {
        if ($this == null || $this.LSPUsers == null || $this.LSPUsers.indexOf(item) === -1) return;
        var _index = $this.LSPUsers.indexOf(item);
        $this.LSPUsers.splice(_index, 1);
        item.LSP = null;
    }
    static clearLSPUsers = ($this) => {
        $this.LSPUsers = null;
    }
    static setPrivateTemplates = ($this, items) => {
        if (items == null) items = [];
        if ($this.PrivateTemplates == null) $this.PrivateTemplates = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PrivateTemplates.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removePrivateTemplates($this, $this.PrivateTemplates[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addManyPrivateTemplates($this, copyItems);
    }
    static addManyPrivateTemplates = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addPrivateTemplates($this, items[i]);
        }
    }
    static addPrivateTemplates = ($this, item) => {
        if ($this.PrivateTemplates == null) $this.PrivateTemplates = [];
        if (item == null || $this.PrivateTemplates.indexOf(item) > -1) return;
        $this.PrivateTemplates.push(item);
        ScheduledRouteTemplate.addVisibleTo(item, $this);
    }
    static addRangePrivateTemplates = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addPrivateTemplates($this, item));
    }
    static removePrivateTemplates = ($this, item) => {
        if ($this == null || $this.PrivateTemplates == null || $this.PrivateTemplates.indexOf(item) === -1) return;
        var _index = $this.PrivateTemplates.indexOf(item);
        $this.PrivateTemplates.splice(_index, 1);
        ScheduledRouteTemplate.removeVisibleTo(item, $this);
    }
    static clearPrivateTemplates = ($this) => {
        $this.PrivateTemplates = null;
    }
    static setWorkContracts = ($this, items) => {
        if (items == null) items = [];
        if ($this.WorkContracts == null) $this.WorkContracts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.WorkContracts.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeWorkContracts($this, $this.WorkContracts[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addManyWorkContracts($this, copyItems);
    }
    static addManyWorkContracts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addWorkContracts($this, items[i]);
        }
    }
    static addWorkContracts = ($this, item) => {
        if ($this.WorkContracts == null) $this.WorkContracts = [];
        if (item == null || $this.WorkContracts.indexOf(item) > -1) return;
        $this.WorkContracts.push(item);
        if (item.LSP != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.setLSP(item, $this);
        }
    }
    static addRangeWorkContracts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addWorkContracts($this, item));
    }
    static removeWorkContracts = ($this, item) => {
        if ($this == null || $this.WorkContracts == null || $this.WorkContracts.indexOf(item) === -1) return;
        var _index = $this.WorkContracts.indexOf(item);
        $this.WorkContracts.splice(_index, 1);
        item.LSP = null;
    }
    static clearWorkContracts = ($this) => {
        $this.WorkContracts = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderWMS  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrdID:
    any;
OrdOrderID_Remote:
    any;
OrdOrderExternalCode:
    any;
OrdOrderDescr:
    any;
OrdRegDateTime:
    any;
OrdDateTime:
    any;
OrdDeliveryDateTime:
    any;
OrdDepositorCode:
    any;
OrdDepositorFullName:
    any;
OrdCustomerCode:
    any;
OrdCustomerFullName:
    any;
OrdStatus:
    any;
OrdMemo:
    any;
OrdPurpose:
    any;
OrdDeliveryValue:
    any;
OrdDeliveryNotes:
    any;
OrdIsReturn:
    any;
OrdPrdTypeDescr:
    any;
OrdWrhRoutingCode:
    any;
OrdDlsId:
    any;
OrdDlsDescr:
    any;
OrdDlsAddress:
    any;
OrdDlsZipCode:
    any;
OrdDlsCity:
    any;
OrdDlsArea:
    any;
OrdRoutingStatus:
    any;
OrdLfdWeight:
    any;
OrdLfdVol:
    any;
OrdLfdCtn:
    any;
OrdLfdBar:
    any;
OrdLfdPalEuro:
    any;
OrdLfdPalInd:
    any;
OrdLfdPalElsa:
    any;
OrdLfdParOU:
    any;
OrdLfdVar:
    any;
OrdVoucherDateTime:
    any;
OrdVoucherNumber:
    any;
OrdVoucherSeries:
    any;
OrdVoucherId:
    any;
OrdAgencyCode:
    any;
OrdAgencyDescr:
    any;
OrdAgencyAddress:
    any;
OrdTelRouteId:
    any;
OrdVchPlateNr:
    any;
OrdVchRouteNr:
    any;
OrdVhrDate:
    any;
OrdVhrID:
    any;
OrdLastUpdateDateTime:
    any;
OrdReadyForLoading:
    any;
OrdStatusString:
    any;
Polyline:
    any;
Warehouse:
    any;
Truck:
    any;
WarehouseAddress:
    any;
ETA:
    any;
ATA:
    any;
DestLat:
    any;
DestLong:
    any;
COE:
    any;
ProofOfDelivery:
    any;
    static setProofOfDelivery = ($this, value) => {
        var oldValue = $this.ProofOfDelivery;
        $this.ProofOfDelivery = value;
        if (value != null) {
            if (oldValue != null && oldValue.OrderWMS != null) {
                oldValue.OrderWMS = null;
            }
            if ($this.ProofOfDelivery.OrderWMS !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery.setOrderWMS(value, $this);
            }
        }
    }
    static AssignOrdersTrucks(): any{}
        static CopyFields($this: any, order: any): any{$this.OrdID = Joove.Common.nullSafe<any>(() => order.OrdID, 0);

                $this.OrdOrderID_Remote = Joove.Common.nullSafe<any>(() => order.OrdOrderID_Remote, 0);

                $this.OrdOrderExternalCode = Joove.Common.nullSafe<any>(() => order.OrdOrderExternalCode, "");

                $this.OrdOrderDescr = Joove.Common.nullSafe<any>(() => order.OrdOrderDescr, "");

                $this.OrdRegDateTime = Joove.Common.nullSafe<any>(() => order.OrdRegDateTime, new Date('1753-01-01'));

                $this.OrdDateTime = Joove.Common.nullSafe<any>(() => order.OrdDateTime, new Date('1753-01-01'));

                $this.OrdDeliveryDateTime = Joove.Common.nullSafe<any>(() => order.OrdDeliveryDateTime, new Date('1753-01-01'));

                $this.OrdDepositorCode = Joove.Common.nullSafe<any>(() => order.OrdDepositorCode, "");

                $this.OrdDepositorFullName = Joove.Common.nullSafe<any>(() => order.OrdDepositorFullName, "");

                $this.OrdCustomerCode = Joove.Common.nullSafe<any>(() => order.OrdCustomerCode, "");

                $this.OrdCustomerFullName = Joove.Common.nullSafe<any>(() => order.OrdCustomerFullName, "");

                $this.OrdStatus = Joove.Common.nullSafe<any>(() => order.OrdStatus, 0);

                $this.OrdMemo = Joove.Common.nullSafe<any>(() => order.OrdMemo, "");

                $this.OrdPurpose = Joove.Common.nullSafe<any>(() => order.OrdPurpose, "");

                $this.OrdDeliveryValue = Joove.Common.nullSafe<any>(() => order.OrdDeliveryValue, 0);

                $this.OrdDeliveryNotes = Joove.Common.nullSafe<any>(() => order.OrdDeliveryNotes, "");

                $this.OrdIsReturn = Joove.Common.nullSafe<any>(() => order.OrdIsReturn, 0);

                $this.OrdPrdTypeDescr = Joove.Common.nullSafe<any>(() => order.OrdPrdTypeDescr, "");

                $this.OrdWrhRoutingCode = Joove.Common.nullSafe<any>(() => order.OrdWrhRoutingCode, "");

                $this.OrdDlsId = Joove.Common.nullSafe<any>(() => order.OrdDlsId, 0);

                $this.OrdDlsDescr = Joove.Common.nullSafe<any>(() => order.OrdDlsDescr, "");

                $this.OrdDlsAddress = Joove.Common.nullSafe<any>(() => order.OrdDlsAddress, "");

                $this.OrdDlsCity = Joove.Common.nullSafe<any>(() => order.OrdDlsCity, "");

                $this.OrdDlsArea = Joove.Common.nullSafe<any>(() => order.OrdDlsArea, "");

                $this.OrdRoutingStatus = Joove.Common.nullSafe<any>(() => order.OrdRoutingStatus, 0);

                $this.OrdLfdWeight = Joove.Common.nullSafe<any>(() => order.OrdLfdWeight, 0);

                $this.OrdLfdVol = Joove.Common.nullSafe<any>(() => order.OrdLfdVol, 0);

                $this.OrdLfdCtn = Joove.Common.nullSafe<any>(() => order.OrdLfdCtn, 0);

                $this.OrdLfdCtn = Joove.Common.nullSafe<any>(() => order.OrdLfdCtn, 0);

                $this.OrdLfdBar = Joove.Common.nullSafe<any>(() => order.OrdLfdBar, 0);

                $this.OrdLfdPalEuro = Joove.Common.nullSafe<any>(() => order.OrdLfdPalEuro, 0);

                $this.OrdLfdPalInd = Joove.Common.nullSafe<any>(() => order.OrdLfdPalInd, 0);

                $this.OrdLfdPalElsa = Joove.Common.nullSafe<any>(() => order.OrdLfdPalElsa, 0);

                $this.OrdLfdParOU = Joove.Common.nullSafe<any>(() => order.OrdLfdParOU, 0);

                $this.OrdLfdVar = Joove.Common.nullSafe<any>(() => order.OrdLfdVar, 0);

                $this.OrdVoucherDateTime = Joove.Common.nullSafe<any>(() => order.OrdVoucherDateTime, new Date('1753-01-01'));

                $this.OrdVoucherNumber = Joove.Common.nullSafe<any>(() => order.OrdVoucherNumber, "");

                $this.OrdVoucherSeries = Joove.Common.nullSafe<any>(() => order.OrdVoucherSeries, "");

                $this.OrdVoucherId = Joove.Common.nullSafe<any>(() => order.OrdVoucherId, 0);

                $this.OrdAgencyCode = Joove.Common.nullSafe<any>(() => order.OrdAgencyCode, "");

                $this.OrdAgencyAddress = Joove.Common.nullSafe<any>(() => order.OrdAgencyAddress, "");

                $this.OrdAgencyDescr = Joove.Common.nullSafe<any>(() => order.OrdAgencyDescr, "");

                $this.OrdTelRouteId = Joove.Common.nullSafe<any>(() => order.OrdTelRouteId, 0);

                $this.OrdVchPlateNr = Joove.Common.nullSafe<any>(() => order.OrdVchPlateNr, "");

                $this.OrdVchRouteNr = Joove.Common.nullSafe<any>(() => order.OrdVchRouteNr, 0);

                $this.OrdVhrDate = Joove.Common.nullSafe<any>(() => order.OrdVhrDate, new Date('1753-01-01'));

                $this.OrdVhrID = Joove.Common.nullSafe<any>(() => order.OrdVhrID, 0);

                $this.OrdLastUpdateDateTime = Joove.Common.nullSafe<any>(() => order.OrdLastUpdateDateTime, new Date('1753-01-01'));

                $this.OrdReadyForLoading = Joove.Common.nullSafe<any>(() => order.OrdReadyForLoading, 0);

                $this.Polyline = Joove.Common.nullSafe<any>(() => order.Polyline, "");

                $this.Warehouse = Joove.Common.nullSafe<any>(() => order.Warehouse, "");

                $this.Truck = Joove.Common.nullSafe<any>(() => order.Truck, "");

                                                      }
        static NewOperation($this: any): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProofOfDelivery  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DateIssued:
    any;
PODNumber:
    any;
QualityStatus:
    any;
QuantityStatus:
    any;
DeliveryStatus:
    any;
PODAttachment:
    any;
Comments:
    any;
DamagedPackaging:
    any;
DamagedProducts:
    any;
CloseToExpiry:
    any;
TruckDriver:
    any;
OrderWMS:
    any;
    static setTruckDriver = ($this, value) => {
        var oldValue = $this.TruckDriver;
        $this.TruckDriver = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.removeProofOfDelivery(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addProofOfDelivery(value, $this);
        }
    }
    static setOrderWMS = ($this, value) => {
        var oldValue = $this.OrderWMS;
        $this.OrderWMS = value;
        if (value != null) {
            if (oldValue != null && oldValue.ProofOfDelivery != null) {
                oldValue.ProofOfDelivery = null;
            }
            if ($this.OrderWMS.ProofOfDelivery !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS.setProofOfDelivery(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class RegionalAgent  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.WarehousesSupport = [];
        this.RAUsers = [];
        this.AreaSupport = [];
        this.Trucks = [];
        this.ScheduledRouteTemplates = [];
        this.WorkContract = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
AgencyCode:
    any;
AgencyDescription:
    any;
AgencyAddress:
    any;
IsSelected:
    any;
Rating:
    any;
WarehousesSupport:
    any;
RAUsers:
    any;
AddressCoordinates:
    any;
AreaSupport:
    any;
Trucks:
    any;
ScheduledRouteTemplates:
    any;
WorkContract:
    any;
    static setWarehousesSupport = ($this, items) => {
        if (items == null) items = [];
        if ($this.WarehousesSupport == null) $this.WarehousesSupport = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.WarehousesSupport.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeWarehousesSupport($this, $this.WarehousesSupport[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyWarehousesSupport($this, copyItems);
    }
    static addManyWarehousesSupport = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWarehousesSupport($this, items[i]);
        }
    }
    static addWarehousesSupport = ($this, item) => {
        if ($this.WarehousesSupport == null) $this.WarehousesSupport = [];
        if (item == null || $this.WarehousesSupport.indexOf(item) > -1) return;
        $this.WarehousesSupport.push(item);
        Warehouse.addRegionalAgentsService(item, $this);
    }
    static addRangeWarehousesSupport = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWarehousesSupport($this, item));
    }
    static removeWarehousesSupport = ($this, item) => {
        if ($this == null || $this.WarehousesSupport == null || $this.WarehousesSupport.indexOf(item) === -1) return;
        var _index = $this.WarehousesSupport.indexOf(item);
        $this.WarehousesSupport.splice(_index, 1);
        Warehouse.removeRegionalAgentsService(item, $this);
    }
    static clearWarehousesSupport = ($this) => {
        $this.WarehousesSupport = null;
    }
    static setRAUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.RAUsers == null) $this.RAUsers = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.RAUsers.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeRAUsers($this, $this.RAUsers[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyRAUsers($this, copyItems);
    }
    static addManyRAUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addRAUsers($this, items[i]);
        }
    }
    static addRAUsers = ($this, item) => {
        if ($this.RAUsers == null) $this.RAUsers = [];
        if (item == null || $this.RAUsers.indexOf(item) > -1) return;
        $this.RAUsers.push(item);
        if (item.RegionalAgent != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser.setRegionalAgent(item, $this);
        }
    }
    static addRangeRAUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addRAUsers($this, item));
    }
    static removeRAUsers = ($this, item) => {
        if ($this == null || $this.RAUsers == null || $this.RAUsers.indexOf(item) === -1) return;
        var _index = $this.RAUsers.indexOf(item);
        $this.RAUsers.splice(_index, 1);
        item.RegionalAgent = null;
    }
    static clearRAUsers = ($this) => {
        $this.RAUsers = null;
    }
    static setAddressCoordinates = ($this, value) => {
        var oldValue = $this.AddressCoordinates;
        $this.AddressCoordinates = value;
        if (value != null) {
        }
    }
    static setAreaSupport = ($this, items) => {
        if (items == null) items = [];
        if ($this.AreaSupport == null) $this.AreaSupport = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AreaSupport.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeAreaSupport($this, $this.AreaSupport[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyAreaSupport($this, copyItems);
    }
    static addManyAreaSupport = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addAreaSupport($this, items[i]);
        }
    }
    static addAreaSupport = ($this, item) => {
        if ($this.AreaSupport == null) $this.AreaSupport = [];
        if (item == null || $this.AreaSupport.indexOf(item) > -1) return;
        $this.AreaSupport.push(item);
    }
    static addRangeAreaSupport = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addAreaSupport($this, item));
    }
    static removeAreaSupport = ($this, item) => {
        if ($this == null || $this.AreaSupport == null || $this.AreaSupport.indexOf(item) === -1) return;
        var _index = $this.AreaSupport.indexOf(item);
        $this.AreaSupport.splice(_index, 1);
    }
    static clearAreaSupport = ($this) => {
        $this.AreaSupport = null;
    }
    static setTrucks = ($this, items) => {
        if (items == null) items = [];
        if ($this.Trucks == null) $this.Trucks = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Trucks.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeTrucks($this, $this.Trucks[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyTrucks($this, copyItems);
    }
    static addManyTrucks = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addTrucks($this, items[i]);
        }
    }
    static addTrucks = ($this, item) => {
        if ($this.Trucks == null) $this.Trucks = [];
        if (item == null || $this.Trucks.indexOf(item) > -1) return;
        $this.Trucks.push(item);
        if (item.RegionalAgent != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Truck.setRegionalAgent(item, $this);
        }
    }
    static addRangeTrucks = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addTrucks($this, item));
    }
    static removeTrucks = ($this, item) => {
        if ($this == null || $this.Trucks == null || $this.Trucks.indexOf(item) === -1) return;
        var _index = $this.Trucks.indexOf(item);
        $this.Trucks.splice(_index, 1);
        item.RegionalAgent = null;
    }
    static clearTrucks = ($this) => {
        $this.Trucks = null;
    }
    static setScheduledRouteTemplates = ($this, items) => {
        if (items == null) items = [];
        if ($this.ScheduledRouteTemplates == null) $this.ScheduledRouteTemplates = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ScheduledRouteTemplates.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeScheduledRouteTemplates($this, $this.ScheduledRouteTemplates[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyScheduledRouteTemplates($this, copyItems);
    }
    static addManyScheduledRouteTemplates = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addScheduledRouteTemplates($this, items[i]);
        }
    }
    static addScheduledRouteTemplates = ($this, item) => {
        if ($this.ScheduledRouteTemplates == null) $this.ScheduledRouteTemplates = [];
        if (item == null || $this.ScheduledRouteTemplates.indexOf(item) > -1) return;
        $this.ScheduledRouteTemplates.push(item);
        if (item.Owner != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.setOwner(item, $this);
        }
    }
    static addRangeScheduledRouteTemplates = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addScheduledRouteTemplates($this, item));
    }
    static removeScheduledRouteTemplates = ($this, item) => {
        if ($this == null || $this.ScheduledRouteTemplates == null || $this.ScheduledRouteTemplates.indexOf(item) === -1) return;
        var _index = $this.ScheduledRouteTemplates.indexOf(item);
        $this.ScheduledRouteTemplates.splice(_index, 1);
        item.Owner = null;
    }
    static clearScheduledRouteTemplates = ($this) => {
        $this.ScheduledRouteTemplates = null;
    }
    static setWorkContract = ($this, items) => {
        if (items == null) items = [];
        if ($this.WorkContract == null) $this.WorkContract = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.WorkContract.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeWorkContract($this, $this.WorkContract[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyWorkContract($this, copyItems);
    }
    static addManyWorkContract = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWorkContract($this, items[i]);
        }
    }
    static addWorkContract = ($this, item) => {
        if ($this.WorkContract == null) $this.WorkContract = [];
        if (item == null || $this.WorkContract.indexOf(item) > -1) return;
        $this.WorkContract.push(item);
        if (item.RegionalAgent != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.setRegionalAgent(item, $this);
        }
    }
    static addRangeWorkContract = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWorkContract($this, item));
    }
    static removeWorkContract = ($this, item) => {
        if ($this == null || $this.WorkContract == null || $this.WorkContract.indexOf(item) === -1) return;
        var _index = $this.WorkContract.indexOf(item);
        $this.WorkContract.splice(_index, 1);
        item.RegionalAgent = null;
    }
    static clearWorkContract = ($this) => {
        $this.WorkContract = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class GeoCoordinates  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Latitude:
    any;
Longitude:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class GeoArea  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.GeoArea";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Area:
    any;
PostalCode:
    any;
County:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum TruckContent {
    Frozen,
    Dry,
    Mixed,
    Maintenance,
}

export class Truck  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Truck";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PlateNumber:
    any;
Type:
    any;
Content:
    any;
CurrentLocation:
    any;
RegionalAgent:
    any;
TruckDriver:
    any;
    static setCurrentLocation = ($this, value) => {
        var oldValue = $this.CurrentLocation;
        $this.CurrentLocation = value;
        if (value != null) {
        }
    }
    static setRegionalAgent = ($this, value) => {
        var oldValue = $this.RegionalAgent;
        $this.RegionalAgent = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeTrucks(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addTrucks(value, $this);
        }
    }
    static setTruckDriver = ($this, value) => {
        var oldValue = $this.TruckDriver;
        $this.TruckDriver = value;
        if (value != null) {
            if (oldValue != null && oldValue.Truck != null) {
                oldValue.Truck = null;
            }
            if ($this.TruckDriver.Truck !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.setTruck(value, $this);
            }
        }
    }
    static NewOperation($this: any): any{let is = "ok";

                                            }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrdersPerMonth  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrdersPerMonth";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Label:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ChartWorkaround  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ChartWorkaround";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Label:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MapPoints  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.MapPoints";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Lat:
    any;
Long:
    any;
Title:
    any;
Type:
    any;
Icon:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderGenerator  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderGenerator";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.OrderGeneratorKey = 0;
    }
OrderGeneratorKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.OrderGeneratorKey == null || $this.OrderGeneratorKey == 0;
    }
}

export class PubSub  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PubSub";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.PubSubKey = 0;
    }
PubSubKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.PubSubKey == null || $this.PubSubKey == 0;
    }
}

export class Utils  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Utils";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.UtilsKey = 0;
    }
UtilsKey:
    any;
    static DesirializePubMessage(message: any,objectType: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(objectType), false))) {}

switch ((objectType)) {
case "OrderWMS": {
    let order = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.Utils.InitOrderWMS(message), null);
        break;
    }
    }

                                                                   }
    static InitOrderWMS(message: any): any{let order = Joove.Common.nullSafe<any>(() => new DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS(), null);

                                               for (let _iattr = 0; _iattr < (message == null ? 0 : message.length); _iattr++) {
    var attr = message[_iattr];
        switch ((Joove.Common.nullSafe<any>(() => attr.key, ""))) {
        case "OrdID": {
            order.OrdID = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdOrderID_Remote": {
            order.OrdOrderID_Remote = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdOrderExternalCode": {
            order.OrdOrderExternalCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdOrderDescr": {
            order.OrdOrderDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdRegDateTime": {
            order.OrdRegDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdDateTime": {
            order.OrdDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdDeliveryDateTime": {
            order.OrdDeliveryDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdDepositorCode": {
            order.OrdDepositorCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDepositorFullName": {
            order.OrdDepositorFullName = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdCustomerCode": {
            order.OrdCustomerCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdCustomerFullName": {
            order.OrdCustomerFullName = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdStatus": {
            order.OrdStatus = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdMemo": {
            order.OrdMemo = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdPurpose": {
            order.OrdPurpose = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDeliveryval": {
            order.OrdDeliveryValue = Joove.Common.nullSafe<any>(() => CLMS.Framework.Float.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdDeliveryNotes": {
            order.OrdDeliveryNotes = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdIsReturn": {
            order.OrdIsReturn = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdPrdTypeDescr": {
            order.OrdPrdTypeDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdWrhRoutingCode": {
            order.OrdWrhRoutingCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsId": {
            order.OrdDlsId = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdDlsDescr": {
            order.OrdDlsDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsCity": {
            order.OrdDlsCity = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsArea": {
            order.OrdDlsArea = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsAddress": {
            order.OrdDlsAddress = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsZipCode": {
            order.OrdDlsZipCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdRoutingStatus": {
            order.OrdRoutingStatus = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdBar": {
            order.OrdLfdBar = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdCtn": {
            order.OrdLfdCtn = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdPalElsa": {
            order.OrdLfdPalElsa = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdPalEuro": {
            order.OrdLfdPalEuro = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdPalInd": {
            order.OrdLfdPalInd = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdParOU": {
            order.OrdLfdParOU = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdVar": {
            order.OrdLfdVar = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdVol": {
            order.OrdLfdVol = Joove.Common.nullSafe<any>(() => CLMS.Framework.Float.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdWeight": {
            order.OrdLfdWeight = Joove.Common.nullSafe<any>(() => CLMS.Framework.Float.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdVoucherId": {
            order.OrdVoucherId = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdVoucherDateTime": {
            order.OrdVoucherDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdVoucherNumber": {
            order.OrdVoucherNumber = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdVoucherSeries": {
            order.OrdVoucherSeries = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdAgencyCode": {
            order.OrdAgencyCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdAgencyAddress": {
            order.OrdAgencyAddress = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdAgencyDescr": {
            order.OrdAgencyDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdTelRouteId": {
            break;
        }
        case "OrdVchRouteNr": {
            order.OrdVchRouteNr = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdVchPlateNr": {
            order.OrdVchPlateNr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdVhrID": {
            break;
        }
        case "OrdVhrDate": {
            order.OrdVhrDate = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdLastUpdateDateTime": {
            order.OrdLastUpdateDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdReadyForLoading": {
            order.OrdReadyForLoading = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "Polyline": {
            order.Polyline = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdStatusString": {
            order.OrdStatusString = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        }
    }

    return order;

                                          }
    static InitPubMessage(obj: any): any{let messages = [];

                                             let type = Joove.Common.nullSafe<any>(() => obj.GetType(), null);

                                             let properties = Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.ThrowException("type()").Test, null);

                                             for (let _iproperty = 0; _iproperty < (properties == null ? 0 : properties.length); _iproperty++) {
    var property = properties[_iproperty];
        let value = Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.ThrowException("property(obj)").Test, null);
        let name = Joove.Common.nullSafe<any>(() => property.Name, "");
        let datatype = Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.ThrowException("StdLib.RuntimeType.Name()").Test, "");
        Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "property value " + value + " property Name " + name + " property type " + datatype), null);
        if ((value == null)) {
            value = "";
        }
        let message = Joove.Common.nullSafe<any>(() => new DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage(), null);
        if ((datatype == "Guid")) {
            continue;
        }
        let valueString = Joove.Common.nullSafe<any>(() => value.toString(), "");
        if ((Joove.Common.nullSafe<any>(() => Joove.Common.stringContains(valueString, "Sarmed", true), false))) {
            continue;
        }
        if ((Joove.Common.nullSafe<any>(() => Joove.Common.stringContains(datatype, "Date"), false))) {
            message.type = "DateTime";
            message.key = name;
            let time = Joove.Common.cast(value, "DateTime?");
            message.val = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ToString(time, "yyyy-MM-ddThh-mm-ss"), "");
        }
        if ((datatype == "Int64")) {
            message.type = "long";
            message.key = name;
            message.val = Joove.Common.nullSafe<any>(() => value.toString(), "");
        }
        if ((datatype == "Int32")) {
            message.type = "int";
            message.key = name;
            message.val = Joove.Common.nullSafe<any>(() => value.toString(), "");
        }
        if ((datatype == "Single")) {
            message.type = "double";
            message.key = name;
            message.val = Joove.Common.nullSafe<any>(() => value.toString(), "");
        }
        if ((datatype == "String")) {
            message.type = "string";
            message.key = name;
            message.val = Joove.Common.cast(value, "string");
        }
        Joove.Common.nullSafe<any>(() => messages.add(message), null);
    }

    return messages;

                                        }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UtilsKey == null || $this.UtilsKey == 0;
    }
}

export class PubMessage  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.PubMessageKey = 0;
    }
key:
    any;
val:
    any;
type:
    any;
PubMessageKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.PubMessageKey == null || $this.PubMessageKey == 0;
    }
}

export class GPSLocation  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.GPSLocationKey = 0;
    }
order_id:
    any;
truck_license_plate:
    any;
timestamp:
    any;
latitude:
    any;
longitude:
    any;
GPSLocationKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GPSLocationKey == null || $this.GPSLocationKey == 0;
    }
}

export class TruckRecommendation  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TruckRecommendation";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.TruckRecommendationKey = 0;
    }
order_id:
    any;
trucks_recommended:
    any;
TruckRecommendationKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.TruckRecommendationKey == null || $this.TruckRecommendationKey == 0;
    }
}

export class truck_eta  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.truck_eta";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.truck_etaKey = 0;
    }
truck_license_plate:
    any;
eta:
    any;
order_id:
    any;
truck_etaKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.truck_etaKey == null || $this.truck_etaKey == 0;
    }
}

export class truck_emission  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.truck_emission";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.truck_emissionKey = 0;
    }
truck_license_plate:
    any;
co2_emission:
    any;
truck_emissionKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.truck_emissionKey == null || $this.truck_emissionKey == 0;
    }
}

export class AVGTime  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AVGTime";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
truck_license_plate:
    any;
avg_delivery_time:
    any;
Id:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DashboardStatistics  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DashboardStatistics";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OnTime:
    any;
InFull:
    any;
AsOrdered:
    any;
Impeachment:
    any;
TotalDelivered:
    any;
Supplier:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StatePeriod  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StatePeriod";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
StartDate:
    any;
EndDate:
    any;
Active:
    any;
State:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum State {
    Registration,
    Negotiation,
    Finalized,
}

export class ScheduledRouteTemplate  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.VisibleTo = [];
        this.VisibleToRAs = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Origin:
    any;
Destination:
    any;
DaysOfWeek:
    any;
PricePerPallet:
    any;
PricePerKilogram:
    any;
PricePerCubicMeter:
    any;
TotalAvailableCapacityKG:
    any;
EffectiveFrom:
    any;
EffectiveTo:
    any;
TypeOfGoods:
    any;
AvailableCapacityLaden:
    any;
CreatedOn:
    any;
Frequency:
    any;
IsPrivate:
    any;
TotalAvailableCapacityLaden:
    any;
TotalAvailableCapacityM3:
    any;
AvailableCapacityKG:
    any;
AvailableCapacityM3:
    any;
FixedPrice:
    any;
TruckPlate:
    any;
DeliveryDate:
    any;
ByRA:
    any;
Owner:
    any;
VisibleTo:
    any;
OwnerLSP:
    any;
VisibleToRAs:
    any;
    static setOwner = ($this, value) => {
        var oldValue = $this.Owner;
        $this.Owner = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeScheduledRouteTemplates(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addScheduledRouteTemplates(value, $this);
        }
    }
    static setVisibleTo = ($this, items) => {
        if (items == null) items = [];
        if ($this.VisibleTo == null) $this.VisibleTo = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.VisibleTo.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.removeVisibleTo($this, $this.VisibleTo[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addManyVisibleTo($this, copyItems);
    }
    static addManyVisibleTo = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleTo($this, items[i]);
        }
    }
    static addVisibleTo = ($this, item) => {
        if ($this.VisibleTo == null) $this.VisibleTo = [];
        if (item == null || $this.VisibleTo.indexOf(item) > -1) return;
        $this.VisibleTo.push(item);
        LSP.addPrivateTemplates(item, $this);
    }
    static addRangeVisibleTo = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleTo($this, item));
    }
    static removeVisibleTo = ($this, item) => {
        if ($this == null || $this.VisibleTo == null || $this.VisibleTo.indexOf(item) === -1) return;
        var _index = $this.VisibleTo.indexOf(item);
        $this.VisibleTo.splice(_index, 1);
        LSP.removePrivateTemplates(item, $this);
    }
    static clearVisibleTo = ($this) => {
        $this.VisibleTo = null;
    }
    static setOwnerLSP = ($this, value) => {
        var oldValue = $this.OwnerLSP;
        $this.OwnerLSP = value;
        if (value != null) {
        }
    }
    static setVisibleToRAs = ($this, items) => {
        if (items == null) items = [];
        if ($this.VisibleToRAs == null) $this.VisibleToRAs = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.VisibleToRAs.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.removeVisibleToRAs($this, $this.VisibleToRAs[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addManyVisibleToRAs($this, copyItems);
    }
    static addManyVisibleToRAs = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleToRAs($this, items[i]);
        }
    }
    static addVisibleToRAs = ($this, item) => {
        if ($this.VisibleToRAs == null) $this.VisibleToRAs = [];
        if (item == null || $this.VisibleToRAs.indexOf(item) > -1) return;
        $this.VisibleToRAs.push(item);
    }
    static addRangeVisibleToRAs = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleToRAs($this, item));
    }
    static removeVisibleToRAs = ($this, item) => {
        if ($this == null || $this.VisibleToRAs == null || $this.VisibleToRAs.indexOf(item) === -1) return;
        var _index = $this.VisibleToRAs.indexOf(item);
        $this.VisibleToRAs.splice(_index, 1);
    }
    static clearVisibleToRAs = ($this) => {
        $this.VisibleToRAs = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ScheduledRoute  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRoute";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Origin:
    any;
Destination:
    any;
DaysOfWeek:
    any;
PricePerPallet:
    any;
PricePerKilogram:
    any;
PricePerCubicMeter:
    any;
TotalAvailableCapacityKG:
    any;
EffectiveFrom:
    any;
EffectiveTo:
    any;
TypeOfGoods:
    any;
Revision:
    any;
GUID:
    any;
ReservedCapacityLaden:
    any;
State:
    any;
BaseId:
    any;
Frequency:
    any;
TotalAvailableCapacityM3:
    any;
TotalAvailableCapacityLaden:
    any;
ReservedCapacityKG:
    any;
ReservedCapacityM3:
    any;
FixedPrice:
    any;
OriginComments:
    any;
DestinationComments:
    any;
TruckPlate:
    any;
stringenum:
    any;
DeliveryDate:
    any;
Attribute:
    any;
WorkContract:
    any;
    static setWorkContract = ($this, value) => {
        var oldValue = $this.WorkContract;
        $this.WorkContract = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.removeScheduledRoutes(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addScheduledRoutes(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum ScheduledRouteState {
    UnderNegotiation,
    PendingActionByLSP,
    PendingActionByRA,
    Finalized,
}

export enum RouteFrequency {
    Weekly,
    Biweekly,
    Monthly,
    Once,
}

export class WorkContract  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.ScheduledRoutes = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CreationDate:
    any;
LastUpdate:
    any;
Status:
    any;
RegionalAgent:
    any;
ScheduledRoutes:
    any;
LSP:
    any;
    static setRegionalAgent = ($this, value) => {
        var oldValue = $this.RegionalAgent;
        $this.RegionalAgent = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeWorkContract(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWorkContract(value, $this);
        }
    }
    static setScheduledRoutes = ($this, items) => {
        if (items == null) items = [];
        if ($this.ScheduledRoutes == null) $this.ScheduledRoutes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ScheduledRoutes.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.removeScheduledRoutes($this, $this.ScheduledRoutes[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addManyScheduledRoutes($this, copyItems);
    }
    static addManyScheduledRoutes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addScheduledRoutes($this, items[i]);
        }
    }
    static addScheduledRoutes = ($this, item) => {
        if ($this.ScheduledRoutes == null) $this.ScheduledRoutes = [];
        if (item == null || $this.ScheduledRoutes.indexOf(item) > -1) return;
        $this.ScheduledRoutes.push(item);
        if (item.WorkContract != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRoute.setWorkContract(item, $this);
        }
    }
    static addRangeScheduledRoutes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addScheduledRoutes($this, item));
    }
    static removeScheduledRoutes = ($this, item) => {
        if ($this == null || $this.ScheduledRoutes == null || $this.ScheduledRoutes.indexOf(item) === -1) return;
        var _index = $this.ScheduledRoutes.indexOf(item);
        $this.ScheduledRoutes.splice(_index, 1);
        item.WorkContract = null;
    }
    static clearScheduledRoutes = ($this) => {
        $this.ScheduledRoutes = null;
    }
    static setLSP = ($this, value) => {
        var oldValue = $this.LSP;
        $this.LSP = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeWorkContracts(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addWorkContracts(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum ContractStatus {
    UnderNegotiation,
    Active,
    Archived,
}

export class TblZslNormalisationSuggestion  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TblZslNormalisationSuggestion";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.SuggestionsId = 0;
    }
SuggestionsId:
    any;
Customer_Name:
    any;
Sender_Name:
    any;
Sender_Address:
    any;
Existing_Sender_City:
    any;
Normalised_Sender_City:
    any;
Sender_Country:
    any;
Sender_Zipcode:
    any;
Receiver_Name:
    any;
Receiver_Address:
    any;
Existing_Receiver_City:
    any;
Normalised_Receiver_City:
    any;
Existing_Pallet_Name:
    any;
Normalised_Pallet_Name:
    any;
Receiver_Zipcode:
    any;
Receiver_Country:
    any;
Carrier:
    any;
Order_Number:
    any;
Shipment_Date:
    any;
Weight:
    any;
Volume:
    any;
Cost:
    any;
Currency:
    any;
Number_Of_Pallets:
    any;
Suggestion_Date:
    any;
Approved:
    any;
ApprovedBy:
    any;
ApprovedDate:
    any;
Owner:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.SuggestionsId == null || $this.SuggestionsId == 0;
    }
}

export class tblZslBookingType  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslBookingType";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
BookingTypeName:
    any;
BookingType:
    any;
    static setBookingType = ($this, value) => {
        var oldValue = $this.BookingType;
        $this.BookingType = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslCarrier  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCarrier";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CarrierName:
    any;
Carrier:
    any;
    static setCarrier = ($this, value) => {
        var oldValue = $this.Carrier;
        $this.Carrier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslCustomer  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCustomer";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CustomerFullName:
    any;
Customer:
    any;
    static setCustomer = ($this, value) => {
        var oldValue = $this.Customer;
        $this.Customer = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslDeliveryStatus  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslDeliveryStatus";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DeliveryStatusName:
    any;
DeliveryStatus:
    any;
    static setDeliveryStatus = ($this, value) => {
        var oldValue = $this.DeliveryStatus;
        $this.DeliveryStatus = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslPlatformBookingOrder  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
BookingDate:
    any;
OrderNo:
    any;
NoIdentity:
    any;
FromExtTime:
    any;
ToExtTime:
    any;
BookStatus:
    any;
NoPlatform:
    any;
NoCourier:
    any;
Warehouse:
    any;
Driver:
    any;
DriverTelephone:
    any;
Plate:
    any;
Trailerplate:
    any;
PalletIN:
    any;
TotalPallet:
    any;
DateArrived:
    any;
TimeArrived:
    any;
DateExit:
    any;
TImeExit:
    any;
RouteTracking_ID:
    any;
PlatformBookingOrder:
    any;
tblZslCustomer:
    any;
tblZslBookingType:
    any;
tblZslTransportOrder:
    any;
    static setPlatformBookingOrder = ($this, value) => {
        var oldValue = $this.PlatformBookingOrder;
        $this.PlatformBookingOrder = value;
        if (value != null) {
        }
    }
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static settblZslBookingType = ($this, value) => {
        var oldValue = $this.tblZslBookingType;
        $this.tblZslBookingType = value;
        if (value != null) {
        }
    }
    static settblZslTransportOrder = ($this, value) => {
        var oldValue = $this.tblZslTransportOrder;
        $this.tblZslTransportOrder = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslRoute  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslRoute";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
EntryDate:
    any;
RouteNumber:
    any;
LastUpdated:
    any;
Route:
    any;
    static setRoute = ($this, value) => {
        var oldValue = $this.Route;
        $this.Route = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslTransportDetail  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportDetail";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.TransportDetailsID = 0;
    }
TransportDetailsID:
    any;
EventID:
    any;
Qty:
    any;
ExtDateStart:
    any;
ExtTimeStart:
    any;
ExtTimeAction:
    any;
RealDateStart:
    any;
RealTimeStart:
    any;
RealTimeAction:
    any;
tblZslPlatformBookingOrder:
    any;
tblZslCustomer:
    any;
tblZslWorker:
    any;
    static settblZslPlatformBookingOrder = ($this, value) => {
        var oldValue = $this.tblZslPlatformBookingOrder;
        $this.tblZslPlatformBookingOrder = value;
        if (value != null) {
        }
    }
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static settblZslWorker = ($this, value) => {
        var oldValue = $this.tblZslWorker;
        $this.tblZslWorker = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.TransportDetailsID == null || $this.TransportDetailsID == 0;
    }
}

export class tblZslTransportEvent  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportEvent";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.EventID = 0;
    }
EventID:
    any;
EventDesc:
    any;
EventTime:
    any;
tblZslCustomer:
    any;
tblZslWorker:
    any;
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static settblZslWorker = ($this, value) => {
        var oldValue = $this.tblZslWorker;
        $this.tblZslWorker = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.EventID == null || $this.EventID == 0;
    }
}

export class tblZslTransportExecutionPlan  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportExecutionPlan";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ExecutionPlanID = 0;
    }
ExecutionPlanID:
    any;
Notes:
    any;
ETA:
    any;
ActualArrivalTime:
    any;
tblZslCarrier:
    any;
tblZslPlatformBookingOrder:
    any;
tblZslDeliveryStatus:
    any;
    static settblZslCarrier = ($this, value) => {
        var oldValue = $this.tblZslCarrier;
        $this.tblZslCarrier = value;
        if (value != null) {
        }
    }
    static settblZslPlatformBookingOrder = ($this, value) => {
        var oldValue = $this.tblZslPlatformBookingOrder;
        $this.tblZslPlatformBookingOrder = value;
        if (value != null) {
        }
    }
    static settblZslDeliveryStatus = ($this, value) => {
        var oldValue = $this.tblZslDeliveryStatus;
        $this.tblZslDeliveryStatus = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ExecutionPlanID == null || $this.ExecutionPlanID == 0;
    }
}

export class tblZslTransportOrder  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TransportOrderNo:
    any;
OrderYear:
    any;
DocumentTransportNo:
    any;
OrderDate:
    any;
DepartureCustomerName:
    any;
DepartureAddress:
    any;
DepartureCity:
    any;
DepartureState:
    any;
DestinationName:
    any;
DestinationAddress:
    any;
DestinationCity:
    any;
DestinationState:
    any;
Qty:
    any;
OrderWeight:
    any;
Volume:
    any;
Pallet:
    any;
RetiredDate:
    any;
DeliveryDate:
    any;
Note:
    any;
CallCustomerBefore:
    any;
Telephone:
    any;
DayClosed:
    any;
Urgent:
    any;
TransportOrder:
    any;
tblZslCustomer:
    any;
    static setTransportOrder = ($this, value) => {
        var oldValue = $this.TransportOrder;
        $this.TransportOrder = value;
        if (value != null) {
        }
    }
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslWorker  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslWorker";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
WorkerFullName:
    any;
Worker:
    any;
    static setWorker = ($this, value) => {
        var oldValue = $this.Worker;
        $this.Worker = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblActivitiesAPI  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblActivitiesAPI";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.tblActivitiesId = 0;
    }
tblActivitiesId:
    any;
ServiceId:
    any;
PointId:
    any;
TravelTime:
    any;
TravelDistance:
    any;
BeginTime:
    any;
DepartureTime:
    any;
Lat:
    any;
Lon:
    any;
Skills:
    any;
SetupDuration:
    any;
Duration:
    any;
AdditionalValue:
    any;
TimeWindows:
    any;
Quantities:
    any;
EntryDate:
    any;
LastUpdated:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.tblActivitiesId == null || $this.tblActivitiesId == 0;
    }
}

export class tblReceivedEvent  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedEvent";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ReceivedEventID = 0;
    }
ReceivedEventID:
    any;
EntryDate:
    any;
date:
    any;
event_type:
    any;
event_value_type:
    any;
event_value:
    any;
LastUpdated:
    any;
tblReceivedPlannedTransport:
    any;
    static settblReceivedPlannedTransport = ($this, value) => {
        var oldValue = $this.tblReceivedPlannedTransport;
        $this.tblReceivedPlannedTransport = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ReceivedEventID == null || $this.ReceivedEventID == 0;
    }
}

export class tblReceivedPlannedTransport  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedPlannedTransport";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ReceivedPlannedTransportID = 0;
    }
ReceivedPlannedTransportID:
    any;
EntryDate:
    any;
transport_identifier:
    any;
IsActive:
    any;
LastUpdated:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ReceivedPlannedTransportID == null || $this.ReceivedPlannedTransportID == 0;
    }
}

export class tblReceivedTrainStatus  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedTrainStatus";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ReceivedTrainStatusID = 0;
    }
ReceivedTrainStatusID:
    any;
EntryDate:
    any;
train_no:
    any;
departure_terminal:
    any;
departure_terminal_lat:
    any;
departure_terminal_long:
    any;
arrival_terminal:
    any;
arrival_terminal_lat:
    any;
arrival_terminal_long:
    any;
status_description:
    any;
planned_eta:
    any;
LastUpdated:
    any;
tblReceivedPlannedTransport:
    any;
    static settblReceivedPlannedTransport = ($this, value) => {
        var oldValue = $this.tblReceivedPlannedTransport;
        $this.tblReceivedPlannedTransport = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ReceivedTrainStatusID == null || $this.ReceivedTrainStatusID == 0;
    }
}

export class tblReceivedTransportStopVehicle  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedTransportStopVehicle";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ReceivedVehicleID = 0;
    }
ReceivedVehicleID:
    any;
EntryDate:
    any;
vehicle_no:
    any;
LastUpdated:
    any;
tblReceivedTransportStop:
    any;
    static settblReceivedTransportStop = ($this, value) => {
        var oldValue = $this.tblReceivedTransportStop;
        $this.tblReceivedTransportStop = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ReceivedVehicleID == null || $this.ReceivedVehicleID == 0;
    }
}

export class tblReceivedTransportStop  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedTransportStop";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ReceivedTransportStopID = 0;
    }
ReceivedTransportStopID:
    any;
EntryDate:
    any;
stop_order:
    any;
stop_name:
    any;
stop_lat:
    any;
stop_long:
    any;
planned_departure_time:
    any;
planned_eta:
    any;
LastUpdated:
    any;
tblReceivedPlannedTransport:
    any;
    static settblReceivedPlannedTransport = ($this, value) => {
        var oldValue = $this.tblReceivedPlannedTransport;
        $this.tblReceivedPlannedTransport = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ReceivedTransportStopID == null || $this.ReceivedTransportStopID == 0;
    }
}

export class tblRoutesAPI  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblRoutesAPI";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.tblRoutesId = 0;
    }
tblRoutesId:
    any;
EntryDate:
    any;
VehicleId:
    any;
InitialLoads:
    any;
TotalTravelTime:
    any;
TotalDistance:
    any;
LastUpdated:
    any;
tblActivitiesAPI:
    any;
    static settblActivitiesAPI = ($this, value) => {
        var oldValue = $this.tblActivitiesAPI;
        $this.tblActivitiesAPI = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.tblRoutesId == null || $this.tblRoutesId == 0;
    }
}

export class tblSolutionsAPI  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblSolutionsAPI";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.tblSolutionsId = 0;
    }
tblSolutionsId:
    any;
EntryDate:
    any;
Cost:
    any;
Iterations:
    any;
Unassigned:
    any;
Elapsed:
    any;
TotalDistance:
    any;
JobId:
    any;
LastUpdated:
    any;
tblRoutesAPI:
    any;
    static settblRoutesAPI = ($this, value) => {
        var oldValue = $this.tblRoutesAPI;
        $this.tblRoutesAPI = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.tblSolutionsId == null || $this.tblSolutionsId == 0;
    }
}

export class Agreement  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Agreement";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.AgreementStatuses = [];
        this.Items = [];
        this.Warehouses = [];
        this.StockOnHands = [];
        this.TransportUnCaps = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullTruckLoad:
    any;
AgreementDocument:
    any;
LeadTime:
    any;
DateCreated:
    any;
WDDeliveries:
    any;
TargetInventoryDays:
    any;
Profile:
    any;
AgreementStatuses:
    any;
Items:
    any;
Supplier:
    any;
Warehouses:
    any;
StockOnHands:
    any;
TransportUnCaps:
    any;
    static setAgreementStatuses = ($this, items) => {
        if (items == null) items = [];
        if ($this.AgreementStatuses == null) $this.AgreementStatuses = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AgreementStatuses.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeAgreementStatuses($this, $this.AgreementStatuses[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyAgreementStatuses($this, copyItems);
    }
    static addManyAgreementStatuses = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addAgreementStatuses($this, items[i]);
        }
    }
    static addAgreementStatuses = ($this, item) => {
        if ($this.AgreementStatuses == null) $this.AgreementStatuses = [];
        if (item == null || $this.AgreementStatuses.indexOf(item) > -1) return;
        $this.AgreementStatuses.push(item);
    }
    static addRangeAgreementStatuses = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addAgreementStatuses($this, item));
    }
    static removeAgreementStatuses = ($this, item) => {
        if ($this == null || $this.AgreementStatuses == null || $this.AgreementStatuses.indexOf(item) === -1) return;
        var _index = $this.AgreementStatuses.indexOf(item);
        $this.AgreementStatuses.splice(_index, 1);
    }
    static clearAgreementStatuses = ($this) => {
        $this.AgreementStatuses = null;
    }
    static setItems = ($this, items) => {
        if (items == null) items = [];
        if ($this.Items == null) $this.Items = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Items.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeItems($this, $this.Items[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyItems($this, copyItems);
    }
    static addManyItems = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addItems($this, items[i]);
        }
    }
    static addItems = ($this, item) => {
        if ($this.Items == null) $this.Items = [];
        if (item == null || $this.Items.indexOf(item) > -1) return;
        $this.Items.push(item);
        Item.addAgreements(item, $this);
    }
    static addRangeItems = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addItems($this, item));
    }
    static removeItems = ($this, item) => {
        if ($this == null || $this.Items == null || $this.Items.indexOf(item) === -1) return;
        var _index = $this.Items.indexOf(item);
        $this.Items.splice(_index, 1);
        Item.removeAgreements(item, $this);
    }
    static clearItems = ($this) => {
        $this.Items = null;
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static setWarehouses = ($this, items) => {
        if (items == null) items = [];
        if ($this.Warehouses == null) $this.Warehouses = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Warehouses.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeWarehouses($this, $this.Warehouses[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyWarehouses($this, copyItems);
    }
    static addManyWarehouses = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addWarehouses($this, items[i]);
        }
    }
    static addWarehouses = ($this, item) => {
        if ($this.Warehouses == null) $this.Warehouses = [];
        if (item == null || $this.Warehouses.indexOf(item) > -1) return;
        $this.Warehouses.push(item);
    }
    static addRangeWarehouses = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addWarehouses($this, item));
    }
    static removeWarehouses = ($this, item) => {
        if ($this == null || $this.Warehouses == null || $this.Warehouses.indexOf(item) === -1) return;
        var _index = $this.Warehouses.indexOf(item);
        $this.Warehouses.splice(_index, 1);
    }
    static clearWarehouses = ($this) => {
        $this.Warehouses = null;
    }
    static setStockOnHands = ($this, items) => {
        if (items == null) items = [];
        if ($this.StockOnHands == null) $this.StockOnHands = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.StockOnHands.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeStockOnHands($this, $this.StockOnHands[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyStockOnHands($this, copyItems);
    }
    static addManyStockOnHands = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addStockOnHands($this, items[i]);
        }
    }
    static addStockOnHands = ($this, item) => {
        if ($this.StockOnHands == null) $this.StockOnHands = [];
        if (item == null || $this.StockOnHands.indexOf(item) > -1) return;
        $this.StockOnHands.push(item);
        if (item.Agreement != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand.setAgreement(item, $this);
        }
    }
    static addRangeStockOnHands = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addStockOnHands($this, item));
    }
    static removeStockOnHands = ($this, item) => {
        if ($this == null || $this.StockOnHands == null || $this.StockOnHands.indexOf(item) === -1) return;
        var _index = $this.StockOnHands.indexOf(item);
        $this.StockOnHands.splice(_index, 1);
        item.Agreement = null;
    }
    static clearStockOnHands = ($this) => {
        $this.StockOnHands = null;
    }
    static setTransportUnCaps = ($this, items) => {
        if (items == null) items = [];
        if ($this.TransportUnCaps == null) $this.TransportUnCaps = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.TransportUnCaps.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeTransportUnCaps($this, $this.TransportUnCaps[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyTransportUnCaps($this, copyItems);
    }
    static addManyTransportUnCaps = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addTransportUnCaps($this, items[i]);
        }
    }
    static addTransportUnCaps = ($this, item) => {
        if ($this.TransportUnCaps == null) $this.TransportUnCaps = [];
        if (item == null || $this.TransportUnCaps.indexOf(item) > -1) return;
        $this.TransportUnCaps.push(item);
    }
    static addRangeTransportUnCaps = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addTransportUnCaps($this, item));
    }
    static removeTransportUnCaps = ($this, item) => {
        if ($this == null || $this.TransportUnCaps == null || $this.TransportUnCaps.indexOf(item) === -1) return;
        var _index = $this.TransportUnCaps.indexOf(item);
        $this.TransportUnCaps.splice(_index, 1);
    }
    static clearTransportUnCaps = ($this) => {
        $this.TransportUnCaps = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AgreementStatus  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AgreementStatus";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
IssuedBy:
    any;
Status:
    any;
DateIssued:
    any;
ApprovedBySonae:
    any;
ApprovedBySupplier:
    any;
InProgress:
    any;
Active:
    any;
UnderRevision:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Response  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Response";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Status:
    any;
Message:
    any;
Details:
    any;
Code:
    any;
    static GenerateResponse(status: any,message: any,details: any,code: any): any{let newResponse = Joove.Common.nullSafe<any>(() => new DSS2_SynchromodalityCapacityOptimisation.BO.Response(), null);

                newResponse.Status = status;

                newResponse.Message = message;

                newResponse.Details = details;

                newResponse.Code = code;

                return newResponse;

                                                                                     }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AppNotification  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.AppNotificationActions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Type:
    any;
Reason:
    any;
DateCreated:
    any;
IsRead:
    any;
Item:
    any;
Delta:
    any;
AppNotificationActions:
    any;
Recipient:
    any;
    static setAppNotificationActions = ($this, items) => {
        if (items == null) items = [];
        if ($this.AppNotificationActions == null) $this.AppNotificationActions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AppNotificationActions.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.removeAppNotificationActions($this, $this.AppNotificationActions[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.addManyAppNotificationActions($this, copyItems);
    }
    static addManyAppNotificationActions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.addAppNotificationActions($this, items[i]);
        }
    }
    static addAppNotificationActions = ($this, item) => {
        if ($this.AppNotificationActions == null) $this.AppNotificationActions = [];
        if (item == null || $this.AppNotificationActions.indexOf(item) > -1) return;
        $this.AppNotificationActions.push(item);
    }
    static addRangeAppNotificationActions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.addAppNotificationActions($this, item));
    }
    static removeAppNotificationActions = ($this, item) => {
        if ($this == null || $this.AppNotificationActions == null || $this.AppNotificationActions.indexOf(item) === -1) return;
        var _index = $this.AppNotificationActions.indexOf(item);
        $this.AppNotificationActions.splice(_index, 1);
    }
    static clearAppNotificationActions = ($this) => {
        $this.AppNotificationActions = null;
    }
    static setRecipient = ($this, value) => {
        var oldValue = $this.Recipient;
        $this.Recipient = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AppNotificationAction  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AppNotificationAction";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Link:
    any;
Type:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Company  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Company";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Contacts = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
Contacts:
    any;
    static setContacts = ($this, items) => {
        if (items == null) items = [];
        if ($this.Contacts == null) $this.Contacts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Contacts.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Company.removeContacts($this, $this.Contacts[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Company.addManyContacts($this, copyItems);
    }
    static addManyContacts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Company.addContacts($this, items[i]);
        }
    }
    static addContacts = ($this, item) => {
        if ($this.Contacts == null) $this.Contacts = [];
        if (item == null || $this.Contacts.indexOf(item) > -1) return;
        $this.Contacts.push(item);
        if (item.Company != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Contact.setCompany(item, $this);
        }
    }
    static addRangeContacts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Company.addContacts($this, item));
    }
    static removeContacts = ($this, item) => {
        if ($this == null || $this.Contacts == null || $this.Contacts.indexOf(item) === -1) return;
        var _index = $this.Contacts.indexOf(item);
        $this.Contacts.splice(_index, 1);
        item.Company = null;
    }
    static clearContacts = ($this) => {
        $this.Contacts = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Dashboard  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Statistics = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Statistics:
    any;
    static setStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statistics == null) $this.Statistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statistics.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.removeStatistics($this, $this.Statistics[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.addManyStatistics($this, copyItems);
    }
    static addManyStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.addStatistics($this, items[i]);
        }
    }
    static addStatistics = ($this, item) => {
        if ($this.Statistics == null) $this.Statistics = [];
        if (item == null || $this.Statistics.indexOf(item) > -1) return;
        $this.Statistics.push(item);
    }
    static addRangeStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.addStatistics($this, item));
    }
    static removeStatistics = ($this, item) => {
        if ($this == null || $this.Statistics == null || $this.Statistics.indexOf(item) === -1) return;
        var _index = $this.Statistics.indexOf(item);
        $this.Statistics.splice(_index, 1);
    }
    static clearStatistics = ($this) => {
        $this.Statistics = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Statistics  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Statistics";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalUnits:
    any;
Description:
    any;
Result:
    any;
LeadTime:
    any;
WeekDay:
    any;
StockOnHandDate:
    any;
StockOnHand:
    any;
OrderQuantity:
    any;
SalesQuantity:
    any;
QuantitySalesForecast:
    any;
StockOnHandDateFormatted:
    any;
SupplierStock:
    any;
QuantitySum:
    any;
SalesForecastDate:
    any;
SalesForecastDateFormatted:
    any;
Threshold:
    any;
OrderDate:
    any;
OrderDateFormatted:
    any;
RealOrderQuantity:
    any;
Warehouse:
    any;
Item:
    any;
Supplier:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MakeRequest  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.MakeRequestKey = 0;
    }
MakeRequestKey:
    any;
    static Analytics(q: any,fromDate: any,toDate: any): any{let analyticsObject = new Object() as any;

                analyticsObject.query = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate), null);

                let interval = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetInterval(fromDate), "");

                analyticsObject.aggs = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetAggregations(interval), null);

                let meta = new Object() as any;

                meta.excludes = ["message"];

                analyticsObject.source = meta;

                return analyticsObject;

                                                               }
        static GetAggregations(interval: any): any{let aggs = new Object() as any;

                let top_service = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("Service.keyword", 5, true), null);

                let top_operation = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("Operation.keyword", 5, true), null);

                let from_ip = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("IP.keyword", 5, true), null);

                let verb_type = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("RequestMethod.keyword", 5, true), null);

                let status = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("StatusCode", 5, true), null);

                let elapsed_msecs = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"), null);

                let req_over_time = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetHistogramQuery("Timestamp", interval), null);

                let req_latency = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetBucketHistogramQuery("ElapsedMsecs", 2000), null);

                aggs.TopService = top_service;

                aggs.TopOperation = top_operation;

                aggs.FromIP = from_ip;

                aggs.VerbType = verb_type;

                aggs.Status = status;

                aggs.ElapsedMsecs = elapsed_msecs;

                aggs.RequestOverTime = req_over_time;

                aggs.RequestLatency = req_latency;

                aggs.Errors = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetErrorFilter(), null);

                return aggs;

                                                  }
        static GetBucketHistogramQuery(field: any,interval: any): any{let q = new Object() as any;

                let hist = new Object() as any;

                q.Histogram = hist;

                hist.Field = field;

                hist.Interval = interval;

                return q;

                                                                     }
        static GetDateFormat(interval: any): any{if ((interval == "month")) {
    return "yyyy-MM";
} else if ((interval == "day")) {
    return "yyyy-MM-dd";
} else if ((interval == "6h")) {
    return "yyyy-MM-dd HH:mm";
} else if ((interval == "h")) {
    return "yyyy-MM-dd HH:mm";
} else {return "yyyy-MM-dd HH:mm";
}

                                        }
static GetErrorFilter(): any{let errorFilter = new Object() as any;

                                     let filterRoot = new Object() as any;

                                     let filter = new Object() as any;

                                     let failureRoot = new Object() as any;

                                     let successRoot = new Object() as any;

                                     let failure = new Object() as any;

                                     let success = new Object() as any;

                                     let timestampFailure = new Object() as any;

                                     timestampFailure.gte = "400";

                                     failure.StatusCode = timestampFailure;

                                     failureRoot.Range = failure;

                                     filter.Failure = failureRoot;

                                     let timestampSuccess = new Object() as any;

                                     timestampSuccess.lt = "400";

                                     success.StatusCode = timestampSuccess;

                                     successRoot.Range = success;

                                     filter.Success = successRoot;

                                     filterRoot.Filters = filter;

                                     errorFilter.Filters = filterRoot;

                                     return errorFilter;

                                    }
        static GetFilterByTimePeriod(fromDate: any,toDate: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(fromDate), false))) {
    fromDate = "now-1w";
}

if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(toDate), false))) {
    toDate = "now";
}

let timeRange = new Object() as any;

let timestamp = new Object() as any;

timestamp.gte = fromDate;

timestamp.lte = toDate;

timeRange.timestamp = timestamp;

return timeRange;

                                                            }
static GetHistogramQuery(field: any,interval: any): any{let q = new Object() as any;

                let hist = new Object() as any;

                q.DateHistogram = hist;

                hist.Field = field;

                hist.Interval = interval;

                hist.Format = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetDateFormat(interval), "");

                hist.Offset = "+0h";

                let stats = new Object() as any;

                stats.statistics = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"), null);

                stats.errors = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetErrorFilter(), null);

                q.Aggregator = stats;

                return q;

                                                               }
        static GetInterval(fromDate: any): any{if ((fromDate == "now-1y")) {
    return "month";
} else if ((fromDate == "now-1M")) {
    return "day";
} else if ((fromDate == "now-1w")) {
    return "6h";
} else if ((fromDate == "now-1d")) {
    return "hour";
} else {return "day";
}

                                      }
static GetQuery(q: any,fromDate: any,toDate: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(fromDate), false))) {
    fromDate = "now-1w";
}

if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(toDate), false))) {
    toDate = "now";
}

let queryObject = new Object() as any;

let logic = new Object() as any;

logic.must = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetQueryStringQuery(q), null);

let filter = new Object() as any;

filter.range = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetFilterByTimePeriod(fromDate, toDate), null);

logic.filter = filter;

queryObject.logic = logic;

return queryObject;

                                                      }
static GetQueryStringQuery(q: any): any{let must = new Object() as any;

                                                if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(q), false))) {
    let serializer = new CLMS.Framework.Utilities.Serializer<any>();
        must.match_all = Joove.Common.nullSafe<any>(() => serializer.FromJson("{\"must\": {\"match_all\": {}}"), null);
    } else {let queryString = new Object() as any;
        queryString.AnalyzeWildcard = true;
        queryString.Query = q;
        must.QueryString = queryString;
    }

    return must;

                                           }
    static GetStatQuery(field: any): any{let q = new Object() as any;

                                             let stats = new Object() as any;

                                             q.stats = stats;

                                             stats.field = field;

                                             return q;

                                            }
        static GetTermQuery(field: any,size: any,aggsEnable: any): any{let q = new Object() as any;

                let term = new Object() as any;

                q.terms = term;

                term.field = field;

                if ((aggsEnable)) {
    let aggs = new Object() as any;
        q.Aggs = aggs;
        q.Aggs.ResposeStatus = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetErrorFilter(), null);
        q.Aggs.ResponseTime = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"), null);
    }

    if ((CLMS.Framework.Number.GreaterThan(() => size, () => 0))) {
    term.size = size;
}

return q;

                                                              }
static Query(q: any,fromDate: any,toDate: any): any{let searchObject = new Object() as any;

                let sorts = [];

                Joove.Common.nullSafe<any>(() => sorts.add(Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.SortByTimestamp("desc"), null)), null);

                searchObject.sort = sorts;

                searchObject.query = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate), null);

                let meta = new Object() as any;

                meta.excludes = ["message"];

                searchObject.source = meta;

                return searchObject;

                                                           }
        static SortByTimestamp(direction: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(direction), false))) {
    direction = "desc";
}

let sortObject = new Object() as any;

let orderObject = new Object() as any;

orderObject.order = direction;

sortObject.Timestamp = orderObject;

return sortObject;

                                           }
static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MakeRequestKey == null || $this.MakeRequestKey == 0;
    }
}

export class RequestLog  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.RequestLogKey = 0;
    }
RequestPath:
    any;
Message:
    any;
RequestId:
    any;
RequestMethod:
    any;
ElapsedMsecs:
    any;
IP:
    any;
Service:
    any;
Operation:
    any;
StatusCode:
    any;
Timestamp:
    any;
Username:
    any;
RequestUri:
    any;
ClientId:
    any;
ClientName:
    any;
ProductName:
    any;
RequestLogKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.RequestLogKey == null || $this.RequestLogKey == 0;
    }
}

export class Buckets  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Buckets";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.key = "";
    }
key:
    any;
doc_count:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.key == null || $this.key == "";
    }
}

export class Convertor  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Convertor";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ConvertorKey = 0;
    }
ConvertorKey:
    any;
    static ErrorRateToBucket(error: any): any{let fail = new DSS2_SynchromodalityCapacityOptimisation.BO.Buckets();

                fail.key = "Failure";

                fail.doc_count = Joove.Common.nullSafe<any>(() => error.Buckets.Failure.doc_count, 0);

                let success = new DSS2_SynchromodalityCapacityOptimisation.BO.Buckets();

                success.key = "Success";

                success.doc_count = Joove.Common.nullSafe<any>(() => error.Buckets.Success.doc_count, 0);

                let buckets = [];

                Joove.Common.nullSafe<any>(() => buckets.add(fail), null);

                Joove.Common.nullSafe<any>(() => buckets.add(success), null);

                return buckets;

                                                 }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ConvertorKey == null || $this.ConvertorKey == 0;
    }
}

export class HIstogramBucket  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.key = 0;
    }
key:
    any;
keyAsString:
    any;
doc_count:
    any;
avg:
    any;
sum:
    any;
max:
    any;
min:
    any;
failure:
    any;
success:
    any;
error_rate:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.key == null || $this.key == 0;
    }
}

export class Error  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Error";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.ErrorKey = 0;
    }
ErrorKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ErrorKey == null || $this.ErrorKey == 0;
    }
}

export class QueryBuilder  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.QueryBuilder";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.QueryBuilderKey = 0;
    }
QueryBuilderKey:
    any;
    static GetClientToken(username: any): any{let q = "+ClientId";

                return q;

                                                 }
        static GetQuery(username: any,product: any,service: any): any{let clientKeys = Joove.Common.nullSafe<any>(() => DSS2_SynchromodalityCapacityOptimisation.BO.QueryBuilder.GetClientToken(username), "");

                let q = "+tags:exposed " + clientKeys;

                if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
    return product.trim();
    }, "")), false)))) {
        q = q + " +Product:" + product;
    }

    if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
    return service.trim();
    }, "")), false)))) {
        q = q + " +Service:" + service;
    }

    return q;

                                                                 }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.QueryBuilderKey == null || $this.QueryBuilderKey == 0;
    }
}

export class DeliverySchedule  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LeadTime:
    any;
Weekday:
    any;
NameOfDay:
    any;
DBWeekday:
    any;
Supplier:
    any;
Item:
    any;
Warehouse:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeDeliverySchedules(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addDeliverySchedules(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Category  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Category";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.SubCategory = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
SubCategory:
    any;
BusinessUnit:
    any;
    static setSubCategory = ($this, items) => {
        if (items == null) items = [];
        if ($this.SubCategory == null) $this.SubCategory = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SubCategory.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Category.removeSubCategory($this, $this.SubCategory[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Category.addManySubCategory($this, copyItems);
    }
    static addManySubCategory = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Category.addSubCategory($this, items[i]);
        }
    }
    static addSubCategory = ($this, item) => {
        if ($this.SubCategory == null) $this.SubCategory = [];
        if (item == null || $this.SubCategory.indexOf(item) > -1) return;
        $this.SubCategory.push(item);
        if (item.Category != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.setCategory(item, $this);
        }
    }
    static addRangeSubCategory = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Category.addSubCategory($this, item));
    }
    static removeSubCategory = ($this, item) => {
        if ($this == null || $this.SubCategory == null || $this.SubCategory.indexOf(item) === -1) return;
        var _index = $this.SubCategory.indexOf(item);
        $this.SubCategory.splice(_index, 1);
        item.Category = null;
    }
    static clearSubCategory = ($this) => {
        $this.SubCategory = null;
    }
    static setBusinessUnit = ($this, value) => {
        var oldValue = $this.BusinessUnit;
        $this.BusinessUnit = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.removeCategories(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addCategories(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SubCategory  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.BaseUnits = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
Category:
    any;
BaseUnits:
    any;
    static setCategory = ($this, value) => {
        var oldValue = $this.Category;
        $this.Category = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Category.removeSubCategory(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Category.addSubCategory(value, $this);
        }
    }
    static setBaseUnits = ($this, items) => {
        if (items == null) items = [];
        if ($this.BaseUnits == null) $this.BaseUnits = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.BaseUnits.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.removeBaseUnits($this, $this.BaseUnits[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addManyBaseUnits($this, copyItems);
    }
    static addManyBaseUnits = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addBaseUnits($this, items[i]);
        }
    }
    static addBaseUnits = ($this, item) => {
        if ($this.BaseUnits == null) $this.BaseUnits = [];
        if (item == null || $this.BaseUnits.indexOf(item) > -1) return;
        $this.BaseUnits.push(item);
        if (item.SubCategory != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit.setSubCategory(item, $this);
        }
    }
    static addRangeBaseUnits = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addBaseUnits($this, item));
    }
    static removeBaseUnits = ($this, item) => {
        if ($this == null || $this.BaseUnits == null || $this.BaseUnits.indexOf(item) === -1) return;
        var _index = $this.BaseUnits.indexOf(item);
        $this.BaseUnits.splice(_index, 1);
        item.SubCategory = null;
    }
    static clearBaseUnits = ($this) => {
        $this.BaseUnits = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BusinessUnit  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Categories = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
Categories:
    any;
Supplier:
    any;
    static setCategories = ($this, items) => {
        if (items == null) items = [];
        if ($this.Categories == null) $this.Categories = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Categories.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.removeCategories($this, $this.Categories[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addManyCategories($this, copyItems);
    }
    static addManyCategories = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addCategories($this, items[i]);
        }
    }
    static addCategories = ($this, item) => {
        if ($this.Categories == null) $this.Categories = [];
        if (item == null || $this.Categories.indexOf(item) > -1) return;
        $this.Categories.push(item);
        if (item.BusinessUnit != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Category.setBusinessUnit(item, $this);
        }
    }
    static addRangeCategories = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addCategories($this, item));
    }
    static removeCategories = ($this, item) => {
        if ($this == null || $this.Categories == null || $this.Categories.indexOf(item) === -1) return;
        var _index = $this.Categories.indexOf(item);
        $this.Categories.splice(_index, 1);
        item.BusinessUnit = null;
    }
    static clearCategories = ($this) => {
        $this.Categories = null;
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null && oldValue.BusinessUnit != null) {
                oldValue.BusinessUnit = null;
            }
            if ($this.Supplier.BusinessUnit !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Supplier.setBusinessUnit(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BaseUnit  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
SubCategory:
    any;
    static setSubCategory = ($this, value) => {
        var oldValue = $this.SubCategory;
        $this.SubCategory = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.removeBaseUnits(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addBaseUnits(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class InventoryItem  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoverageDays:
    any;
SafetyStock:
    any;
Status:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeInventoryItems(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addInventoryItems(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Item  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Item";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Agreements = [];
        this.DeliverySchedules = [];
        this.InventoryItems = [];
        this.SupplierCapacities = [];
        this.Notifications = [];
        this.PastOrders = [];
        this.ItemsForecast = [];
        this.SLALeadTimes = [];
        this.SLADeliveries = [];
        this.StocksOnHand = [];
        this.CoverageDays = 1;
        this['_key'] = this.SKU = "";
    }
SKU:
    any;
Description:
    any;
UPC:
    any;
AvgDailyDemand:
    any;
CoverageDays:
    any;
PalletSize:
    any;
SupplierPackSize:
    any;
InnerPackSize:
    any;
PalletType:
    any;
PalTI:
    any;
PalHI:
    any;
UOM:
    any;
Agreements:
    any;
DeliverySchedules:
    any;
InventoryItems:
    any;
SupplierCapacities:
    any;
Supplier:
    any;
BusinessUnit:
    any;
Category:
    any;
SubCategory:
    any;
BaseUnit:
    any;
MinimumQuantity:
    any;
Notifications:
    any;
PastOrders:
    any;
ItemsForecast:
    any;
SLALeadTimes:
    any;
SLADeliveries:
    any;
StocksOnHand:
    any;
    static setAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Agreements == null) $this.Agreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Agreements.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeAgreements($this, $this.Agreements[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyAgreements($this, copyItems);
    }
    static addManyAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addAgreements($this, items[i]);
        }
    }
    static addAgreements = ($this, item) => {
        if ($this.Agreements == null) $this.Agreements = [];
        if (item == null || $this.Agreements.indexOf(item) > -1) return;
        $this.Agreements.push(item);
        Agreement.addItems(item, $this);
    }
    static addRangeAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addAgreements($this, item));
    }
    static removeAgreements = ($this, item) => {
        if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1) return;
        var _index = $this.Agreements.indexOf(item);
        $this.Agreements.splice(_index, 1);
        Agreement.removeItems(item, $this);
    }
    static clearAgreements = ($this) => {
        $this.Agreements = null;
    }
    static setDeliverySchedules = ($this, items) => {
        if (items == null) items = [];
        if ($this.DeliverySchedules == null) $this.DeliverySchedules = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DeliverySchedules.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeDeliverySchedules($this, $this.DeliverySchedules[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyDeliverySchedules($this, copyItems);
    }
    static addManyDeliverySchedules = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addDeliverySchedules($this, items[i]);
        }
    }
    static addDeliverySchedules = ($this, item) => {
        if ($this.DeliverySchedules == null) $this.DeliverySchedules = [];
        if (item == null || $this.DeliverySchedules.indexOf(item) > -1) return;
        $this.DeliverySchedules.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule.setItem(item, $this);
        }
    }
    static addRangeDeliverySchedules = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addDeliverySchedules($this, item));
    }
    static removeDeliverySchedules = ($this, item) => {
        if ($this == null || $this.DeliverySchedules == null || $this.DeliverySchedules.indexOf(item) === -1) return;
        var _index = $this.DeliverySchedules.indexOf(item);
        $this.DeliverySchedules.splice(_index, 1);
        item.Item = null;
    }
    static clearDeliverySchedules = ($this) => {
        $this.DeliverySchedules = null;
    }
    static setInventoryItems = ($this, items) => {
        if (items == null) items = [];
        if ($this.InventoryItems == null) $this.InventoryItems = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.InventoryItems.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeInventoryItems($this, $this.InventoryItems[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyInventoryItems($this, copyItems);
    }
    static addManyInventoryItems = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addInventoryItems($this, items[i]);
        }
    }
    static addInventoryItems = ($this, item) => {
        if ($this.InventoryItems == null) $this.InventoryItems = [];
        if (item == null || $this.InventoryItems.indexOf(item) > -1) return;
        $this.InventoryItems.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem.setItem(item, $this);
        }
    }
    static addRangeInventoryItems = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addInventoryItems($this, item));
    }
    static removeInventoryItems = ($this, item) => {
        if ($this == null || $this.InventoryItems == null || $this.InventoryItems.indexOf(item) === -1) return;
        var _index = $this.InventoryItems.indexOf(item);
        $this.InventoryItems.splice(_index, 1);
        item.Item = null;
    }
    static clearInventoryItems = ($this) => {
        $this.InventoryItems = null;
    }
    static setSupplierCapacities = ($this, items) => {
        if (items == null) items = [];
        if ($this.SupplierCapacities == null) $this.SupplierCapacities = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SupplierCapacities.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSupplierCapacities($this, $this.SupplierCapacities[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManySupplierCapacities($this, copyItems);
    }
    static addManySupplierCapacities = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSupplierCapacities($this, items[i]);
        }
    }
    static addSupplierCapacities = ($this, item) => {
        if ($this.SupplierCapacities == null) $this.SupplierCapacities = [];
        if (item == null || $this.SupplierCapacities.indexOf(item) > -1) return;
        $this.SupplierCapacities.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity.setItem(item, $this);
        }
    }
    static addRangeSupplierCapacities = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSupplierCapacities($this, item));
    }
    static removeSupplierCapacities = ($this, item) => {
        if ($this == null || $this.SupplierCapacities == null || $this.SupplierCapacities.indexOf(item) === -1) return;
        var _index = $this.SupplierCapacities.indexOf(item);
        $this.SupplierCapacities.splice(_index, 1);
        item.Item = null;
    }
    static clearSupplierCapacities = ($this) => {
        $this.SupplierCapacities = null;
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static setBusinessUnit = ($this, value) => {
        var oldValue = $this.BusinessUnit;
        $this.BusinessUnit = value;
        if (value != null) {
        }
    }
    static setCategory = ($this, value) => {
        var oldValue = $this.Category;
        $this.Category = value;
        if (value != null) {
        }
    }
    static setSubCategory = ($this, value) => {
        var oldValue = $this.SubCategory;
        $this.SubCategory = value;
        if (value != null) {
        }
    }
    static setBaseUnit = ($this, value) => {
        var oldValue = $this.BaseUnit;
        $this.BaseUnit = value;
        if (value != null) {
        }
    }
    static setMinimumQuantity = ($this, value) => {
        var oldValue = $this.MinimumQuantity;
        $this.MinimumQuantity = value;
        if (value != null) {
            if (oldValue != null && oldValue.Item != null) {
                oldValue.Item = null;
            }
            if ($this.MinimumQuantity.Item !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.MinimumQuantity.setItem(value, $this);
            }
        }
    }
    static setNotifications = ($this, items) => {
        if (items == null) items = [];
        if ($this.Notifications == null) $this.Notifications = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Notifications.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeNotifications($this, $this.Notifications[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyNotifications($this, copyItems);
    }
    static addManyNotifications = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addNotifications($this, items[i]);
        }
    }
    static addNotifications = ($this, item) => {
        if ($this.Notifications == null) $this.Notifications = [];
        if (item == null || $this.Notifications.indexOf(item) > -1) return;
        $this.Notifications.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Notification.setItem(item, $this);
        }
    }
    static addRangeNotifications = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addNotifications($this, item));
    }
    static removeNotifications = ($this, item) => {
        if ($this == null || $this.Notifications == null || $this.Notifications.indexOf(item) === -1) return;
        var _index = $this.Notifications.indexOf(item);
        $this.Notifications.splice(_index, 1);
        item.Item = null;
    }
    static clearNotifications = ($this) => {
        $this.Notifications = null;
    }
    static setPastOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.PastOrders == null) $this.PastOrders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PastOrders.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removePastOrders($this, $this.PastOrders[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyPastOrders($this, copyItems);
    }
    static addManyPastOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addPastOrders($this, items[i]);
        }
    }
    static addPastOrders = ($this, item) => {
        if ($this.PastOrders == null) $this.PastOrders = [];
        if (item == null || $this.PastOrders.indexOf(item) > -1) return;
        $this.PastOrders.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder.setItem(item, $this);
        }
    }
    static addRangePastOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addPastOrders($this, item));
    }
    static removePastOrders = ($this, item) => {
        if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1) return;
        var _index = $this.PastOrders.indexOf(item);
        $this.PastOrders.splice(_index, 1);
        item.Item = null;
    }
    static clearPastOrders = ($this) => {
        $this.PastOrders = null;
    }
    static setItemsForecast = ($this, items) => {
        if (items == null) items = [];
        if ($this.ItemsForecast == null) $this.ItemsForecast = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ItemsForecast.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeItemsForecast($this, $this.ItemsForecast[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyItemsForecast($this, copyItems);
    }
    static addManyItemsForecast = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addItemsForecast($this, items[i]);
        }
    }
    static addItemsForecast = ($this, item) => {
        if ($this.ItemsForecast == null) $this.ItemsForecast = [];
        if (item == null || $this.ItemsForecast.indexOf(item) > -1) return;
        $this.ItemsForecast.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Sales.setItem(item, $this);
        }
    }
    static addRangeItemsForecast = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addItemsForecast($this, item));
    }
    static removeItemsForecast = ($this, item) => {
        if ($this == null || $this.ItemsForecast == null || $this.ItemsForecast.indexOf(item) === -1) return;
        var _index = $this.ItemsForecast.indexOf(item);
        $this.ItemsForecast.splice(_index, 1);
        item.Item = null;
    }
    static clearItemsForecast = ($this) => {
        $this.ItemsForecast = null;
    }
    static setSLALeadTimes = ($this, items) => {
        if (items == null) items = [];
        if ($this.SLALeadTimes == null) $this.SLALeadTimes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SLALeadTimes.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLALeadTimes($this, $this.SLALeadTimes[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManySLALeadTimes($this, copyItems);
    }
    static addManySLALeadTimes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLALeadTimes($this, items[i]);
        }
    }
    static addSLALeadTimes = ($this, item) => {
        if ($this.SLALeadTimes == null) $this.SLALeadTimes = [];
        if (item == null || $this.SLALeadTimes.indexOf(item) > -1) return;
        $this.SLALeadTimes.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SLALeadTime.setItem(item, $this);
        }
    }
    static addRangeSLALeadTimes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLALeadTimes($this, item));
    }
    static removeSLALeadTimes = ($this, item) => {
        if ($this == null || $this.SLALeadTimes == null || $this.SLALeadTimes.indexOf(item) === -1) return;
        var _index = $this.SLALeadTimes.indexOf(item);
        $this.SLALeadTimes.splice(_index, 1);
        item.Item = null;
    }
    static clearSLALeadTimes = ($this) => {
        $this.SLALeadTimes = null;
    }
    static setSLADeliveries = ($this, items) => {
        if (items == null) items = [];
        if ($this.SLADeliveries == null) $this.SLADeliveries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SLADeliveries.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLADeliveries($this, $this.SLADeliveries[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManySLADeliveries($this, copyItems);
    }
    static addManySLADeliveries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLADeliveries($this, items[i]);
        }
    }
    static addSLADeliveries = ($this, item) => {
        if ($this.SLADeliveries == null) $this.SLADeliveries = [];
        if (item == null || $this.SLADeliveries.indexOf(item) > -1) return;
        $this.SLADeliveries.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SLADelivery.setItem(item, $this);
        }
    }
    static addRangeSLADeliveries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLADeliveries($this, item));
    }
    static removeSLADeliveries = ($this, item) => {
        if ($this == null || $this.SLADeliveries == null || $this.SLADeliveries.indexOf(item) === -1) return;
        var _index = $this.SLADeliveries.indexOf(item);
        $this.SLADeliveries.splice(_index, 1);
        item.Item = null;
    }
    static clearSLADeliveries = ($this) => {
        $this.SLADeliveries = null;
    }
    static setStocksOnHand = ($this, items) => {
        if (items == null) items = [];
        if ($this.StocksOnHand == null) $this.StocksOnHand = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.StocksOnHand.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeStocksOnHand($this, $this.StocksOnHand[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyStocksOnHand($this, copyItems);
    }
    static addManyStocksOnHand = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addStocksOnHand($this, items[i]);
        }
    }
    static addStocksOnHand = ($this, item) => {
        if ($this.StocksOnHand == null) $this.StocksOnHand = [];
        if (item == null || $this.StocksOnHand.indexOf(item) > -1) return;
        $this.StocksOnHand.push(item);
        if (item.Item != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand.setItem(item, $this);
        }
    }
    static addRangeStocksOnHand = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Item.addStocksOnHand($this, item));
    }
    static removeStocksOnHand = ($this, item) => {
        if ($this == null || $this.StocksOnHand == null || $this.StocksOnHand.indexOf(item) === -1) return;
        var _index = $this.StocksOnHand.indexOf(item);
        $this.StocksOnHand.splice(_index, 1);
        item.Item = null;
    }
    static clearStocksOnHand = ($this) => {
        $this.StocksOnHand = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.SKU == null || $this.SKU == "";
    }
}

export class SupplierCapacity  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DateOfStockUpdate:
    any;
DailyProduction:
    any;
Stock:
    any;
Item:
    any;
Supplier:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSupplierCapacities(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSupplierCapacities(value, $this);
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class WasteOld  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.WasteOld";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
WastedStock:
    any;
StockPerSKU:
    any;
SKU:
    any;
WastePercentage:
    any;
ItemDescription:
    any;
DateFormatted:
    any;
Item:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MinimumQuantity  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.MinimumQuantity";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Country:
    any;
Quantity:
    any;
Item:
    any;
Supplier:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null && oldValue.MinimumQuantity != null) {
                oldValue.MinimumQuantity = null;
            }
            if ($this.Item.MinimumQuantity !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.setMinimumQuantity(value, $this);
            }
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Notification  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Notification";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Message:
    any;
TotalSupplierStock:
    any;
OrderForecastQuantity:
    any;
Diff:
    any;
SalesForecastDate:
    any;
CreatedBy:
    any;
Item:
    any;
Warehouse:
    any;
OrderForecastDetails:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeNotifications(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addNotifications(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setOrderForecastDetails = ($this, value) => {
        var oldValue = $this.OrderForecastDetails;
        $this.OrderForecastDetails = value;
        if (value != null) {
            if (oldValue != null && oldValue.Notification != null) {
                oldValue.Notification = null;
            }
            if ($this.OrderForecastDetails.Notification !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.setNotification(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderFDashboard  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.OrderForecastStatistics = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderForecastStatistics:
    any;
    static setOrderForecastStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderForecastStatistics == null) $this.OrderForecastStatistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderForecastStatistics.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.removeOrderForecastStatistics($this, $this.OrderForecastStatistics[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.addManyOrderForecastStatistics($this, copyItems);
    }
    static addManyOrderForecastStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, items[i]);
        }
    }
    static addOrderForecastStatistics = ($this, item) => {
        if ($this.OrderForecastStatistics == null) $this.OrderForecastStatistics = [];
        if (item == null || $this.OrderForecastStatistics.indexOf(item) > -1) return;
        $this.OrderForecastStatistics.push(item);
    }
    static addRangeOrderForecastStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, item));
    }
    static removeOrderForecastStatistics = ($this, item) => {
        if ($this == null || $this.OrderForecastStatistics == null || $this.OrderForecastStatistics.indexOf(item) === -1) return;
        var _index = $this.OrderForecastStatistics.indexOf(item);
        $this.OrderForecastStatistics.splice(_index, 1);
    }
    static clearOrderForecastStatistics = ($this) => {
        $this.OrderForecastStatistics = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderForecastStatistic  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastStatistic";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Quantity:
    any;
RoundQuantity:
    any;
OrderDate:
    any;
OrderDateFormatted:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderForecastDetails  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Comments = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ReplenishmentCycle:
    any;
AutomatedForecast:
    any;
Quantity:
    any;
RoundQuantity:
    any;
OrderInventoryDays:
    any;
RecommendedOrderDate:
    any;
SalesForecastDate:
    any;
SupplierCanDeliver:
    any;
SupplierMaxQuantity:
    any;
SupplierCoverageDays:
    any;
ItemCoverageDays:
    any;
InitialStockLevel:
    any;
SupplierAvailableQuantity:
    any;
SupplierSharesStock:
    any;
CreatedOn:
    any;
Status:
    any;
Warehouse:
    any;
Item:
    any;
OrderForecast:
    any;
Notification:
    any;
Comments:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setOrderForecast = ($this, value) => {
        var oldValue = $this.OrderForecast;
        $this.OrderForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeOrderForecastDetails(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addOrderForecastDetails(value, $this);
        }
    }
    static setNotification = ($this, value) => {
        var oldValue = $this.Notification;
        $this.Notification = value;
        if (value != null) {
            if (oldValue != null && oldValue.OrderForecastDetails != null) {
                oldValue.OrderForecastDetails = null;
            }
            if ($this.Notification.OrderForecastDetails !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Notification.setOrderForecastDetails(value, $this);
            }
        }
    }
    static setComments = ($this, items) => {
        if (items == null) items = [];
        if ($this.Comments == null) $this.Comments = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Comments.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.removeComments($this, $this.Comments[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.addManyComments($this, copyItems);
    }
    static addManyComments = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.addComments($this, items[i]);
        }
    }
    static addComments = ($this, item) => {
        if ($this.Comments == null) $this.Comments = [];
        if (item == null || $this.Comments.indexOf(item) > -1) return;
        $this.Comments.push(item);
    }
    static addRangeComments = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.addComments($this, item));
    }
    static removeComments = ($this, item) => {
        if ($this == null || $this.Comments == null || $this.Comments.indexOf(item) === -1) return;
        var _index = $this.Comments.indexOf(item);
        $this.Comments.splice(_index, 1);
    }
    static clearComments = ($this) => {
        $this.Comments = null;
    }
    static Get_OrderInventoryDays($this: any): any{return 0;

                                                      }
        static Get_RoundQuantity($this: any): any{let minQuantity = (Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => $this.Item.MinimumQuantity.Quantity.toString(), "")), false) ? 0 : Joove.Common.nullSafe<any>(() => $this.Item.MinimumQuantity.Quantity, 0));

                if (CLMS.Framework.Number.Equal(() => minQuantity, () => 0)) {
    return 0;
}

return Joove.Common.cast((Joove.Common.safeNumber((parseInt(((Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.Quantity, 0)) / Joove.Common.safeNumber(minQuantity))) + Joove.Common.safeNumber(1))) as any))) * Joove.Common.safeNumber(minQuantity)), "int?");

                                         }
static GetDictionaryKey(itemSKU: any,warehouseCode: any): any{return "item_" + itemSKU + "_warehouse_" + warehouseCode;

                                                                     }
        static PalletsToUnits(item: any,pallets: any): any{let palletSize = Joove.Common.nullSafe<any>(() => item.PalletSize, 0);

                let numberOfUnits = parseInt(((Joove.Common.safeNumber(pallets) * Joove.Common.safeNumber(palletSize))) as any);

                Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Units: " + Joove.Common.safeNumber(numberOfUnits) + " for item: " + Joove.Common.nullSafe<any>(() => item.SKU, "") + " pallets are: " + Joove.Common.safeNumber(pallets) + " pallet size is: " + Joove.Common.safeNumber(palletSize)), null);

                return numberOfUnits;

                                                          }
        static UnitsToPallets(item: any,units: any): any{let palletSize = Joove.Common.nullSafe<any>(() => item.PalletSize, 0);

                let numberOfPallets = 0.0;

                if (CLMS.Framework.Number.GreaterThan(() => palletSize, () => 0)) {
    numberOfPallets = Joove.Common.safeNumber(units) / Joove.Common.safeNumber(palletSize);
    }

    return numberOfPallets;

                                                    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProposedOrder  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Units = 0;
        this.Finished = false;
        this.CurrentStockUnits = 0;
        this.Initialized = false;
        this.RealOrderUnits = 0;
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
NumberOfPallets:
    any;
Finished:
    any;
ErrorOccured:
    any;
ErrorDesc:
    any;
Date:
    any;
CurrentStockUnits:
    any;
ItemSKU:
    any;
ItemWarehouseCode:
    any;
Initialized:
    any;
startDateTime:
    any;
RealOrderArrivalDate:
    any;
RealOrderUnits:
    any;
SupplierCoverageDays:
    any;
CoverageDays:
    any;
InitialStockLevel:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ConstValues  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ConstValues";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.StockLowLimit = -99999999;
        this['_key'] = this.Id = 0;
    }
Id:
    any;
StockLowLimit:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderForecast  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.OrderForecastDetails = [];
        this.SupplierParameters = [];
        this.ItemParameters = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ImportId:
    any;
Status:
    any;
CreatedBy:
    any;
CreatedOn:
    any;
StartDate:
    any;
EndDate:
    any;
State:
    any;
OrderForecastDetails:
    any;
SalesForecast:
    any;
SupplierParameters:
    any;
ItemParameters:
    any;
    static setOrderForecastDetails = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderForecastDetails == null) $this.OrderForecastDetails = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderForecastDetails.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeOrderForecastDetails($this, $this.OrderForecastDetails[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addManyOrderForecastDetails($this, copyItems);
    }
    static addManyOrderForecastDetails = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addOrderForecastDetails($this, items[i]);
        }
    }
    static addOrderForecastDetails = ($this, item) => {
        if ($this.OrderForecastDetails == null) $this.OrderForecastDetails = [];
        if (item == null || $this.OrderForecastDetails.indexOf(item) > -1) return;
        $this.OrderForecastDetails.push(item);
        if (item.OrderForecast != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.setOrderForecast(item, $this);
        }
    }
    static addRangeOrderForecastDetails = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addOrderForecastDetails($this, item));
    }
    static removeOrderForecastDetails = ($this, item) => {
        if ($this == null || $this.OrderForecastDetails == null || $this.OrderForecastDetails.indexOf(item) === -1) return;
        var _index = $this.OrderForecastDetails.indexOf(item);
        $this.OrderForecastDetails.splice(_index, 1);
        item.OrderForecast = null;
    }
    static clearOrderForecastDetails = ($this) => {
        $this.OrderForecastDetails = null;
    }
    static setSalesForecast = ($this, value) => {
        var oldValue = $this.SalesForecast;
        $this.SalesForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeOrderForecasts(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addOrderForecasts(value, $this);
        }
    }
    static setSupplierParameters = ($this, items) => {
        if (items == null) items = [];
        if ($this.SupplierParameters == null) $this.SupplierParameters = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SupplierParameters.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeSupplierParameters($this, $this.SupplierParameters[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addManySupplierParameters($this, copyItems);
    }
    static addManySupplierParameters = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addSupplierParameters($this, items[i]);
        }
    }
    static addSupplierParameters = ($this, item) => {
        if ($this.SupplierParameters == null) $this.SupplierParameters = [];
        if (item == null || $this.SupplierParameters.indexOf(item) > -1) return;
        $this.SupplierParameters.push(item);
        if (item.OrderForecast != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter.setOrderForecast(item, $this);
        }
    }
    static addRangeSupplierParameters = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addSupplierParameters($this, item));
    }
    static removeSupplierParameters = ($this, item) => {
        if ($this == null || $this.SupplierParameters == null || $this.SupplierParameters.indexOf(item) === -1) return;
        var _index = $this.SupplierParameters.indexOf(item);
        $this.SupplierParameters.splice(_index, 1);
        item.OrderForecast = null;
    }
    static clearSupplierParameters = ($this) => {
        $this.SupplierParameters = null;
    }
    static setItemParameters = ($this, items) => {
        if (items == null) items = [];
        if ($this.ItemParameters == null) $this.ItemParameters = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ItemParameters.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeItemParameters($this, $this.ItemParameters[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addManyItemParameters($this, copyItems);
    }
    static addManyItemParameters = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addItemParameters($this, items[i]);
        }
    }
    static addItemParameters = ($this, item) => {
        if ($this.ItemParameters == null) $this.ItemParameters = [];
        if (item == null || $this.ItemParameters.indexOf(item) > -1) return;
        $this.ItemParameters.push(item);
    }
    static addRangeItemParameters = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addItemParameters($this, item));
    }
    static removeItemParameters = ($this, item) => {
        if ($this == null || $this.ItemParameters == null || $this.ItemParameters.indexOf(item) === -1) return;
        var _index = $this.ItemParameters.indexOf(item);
        $this.ItemParameters.splice(_index, 1);
    }
    static clearItemParameters = ($this) => {
        $this.ItemParameters = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ItemParameter  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoverageDays:
    any;
SupplierCanDeliver:
    any;
SupplierQuantity:
    any;
SupplierComments:
    any;
Item:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierParameter  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoverageDays:
    any;
SupplierCanDeliverWholeForecast:
    any;
SupplierComments:
    any;
HasReplied:
    any;
SharesExcessStock:
    any;
OrderForecast:
    any;
Agreement:
    any;
    static setOrderForecast = ($this, value) => {
        var oldValue = $this.OrderForecast;
        $this.OrderForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeSupplierParameters(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addSupplierParameters(value, $this);
        }
    }
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Comment  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Comment";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Text:
    any;
AddedBy:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PastOrder  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderNumber:
    any;
WrittenDate:
    any;
NotBeforeDate:
    any;
QuantityOrdered:
    any;
ReceiveDate:
    any;
QuantityReceived:
    any;
Caller:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removePastOrders(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addPastOrders(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.removePastOrders(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addPastOrders(value, $this);
        }
    }
    static DiffDates(): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Sales  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Sales";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ForecastDate:
    any;
Units:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeItemsForecast(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addItemsForecast(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SalesForecast  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.OrderForecasts = [];
        this.SalesForecastDetails = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ImportId:
    any;
ImportDate:
    any;
OrderForecasts:
    any;
SalesForecastDetails:
    any;
    static setOrderForecasts = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderForecasts == null) $this.OrderForecasts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderForecasts.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeOrderForecasts($this, $this.OrderForecasts[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addManyOrderForecasts($this, copyItems);
    }
    static addManyOrderForecasts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addOrderForecasts($this, items[i]);
        }
    }
    static addOrderForecasts = ($this, item) => {
        if ($this.OrderForecasts == null) $this.OrderForecasts = [];
        if (item == null || $this.OrderForecasts.indexOf(item) > -1) return;
        $this.OrderForecasts.push(item);
        if (item.SalesForecast != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.setSalesForecast(item, $this);
        }
    }
    static addRangeOrderForecasts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addOrderForecasts($this, item));
    }
    static removeOrderForecasts = ($this, item) => {
        if ($this == null || $this.OrderForecasts == null || $this.OrderForecasts.indexOf(item) === -1) return;
        var _index = $this.OrderForecasts.indexOf(item);
        $this.OrderForecasts.splice(_index, 1);
        item.SalesForecast = null;
    }
    static clearOrderForecasts = ($this) => {
        $this.OrderForecasts = null;
    }
    static setSalesForecastDetails = ($this, items) => {
        if (items == null) items = [];
        if ($this.SalesForecastDetails == null) $this.SalesForecastDetails = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SalesForecastDetails.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeSalesForecastDetails($this, $this.SalesForecastDetails[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addManySalesForecastDetails($this, copyItems);
    }
    static addManySalesForecastDetails = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addSalesForecastDetails($this, items[i]);
        }
    }
    static addSalesForecastDetails = ($this, item) => {
        if ($this.SalesForecastDetails == null) $this.SalesForecastDetails = [];
        if (item == null || $this.SalesForecastDetails.indexOf(item) > -1) return;
        $this.SalesForecastDetails.push(item);
        if (item.SalesForecast != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails.setSalesForecast(item, $this);
        }
    }
    static addRangeSalesForecastDetails = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addSalesForecastDetails($this, item));
    }
    static removeSalesForecastDetails = ($this, item) => {
        if ($this == null || $this.SalesForecastDetails == null || $this.SalesForecastDetails.indexOf(item) === -1) return;
        var _index = $this.SalesForecastDetails.indexOf(item);
        $this.SalesForecastDetails.splice(_index, 1);
        item.SalesForecast = null;
    }
    static clearSalesForecastDetails = ($this) => {
        $this.SalesForecastDetails = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SLALeadTime  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SLALeadTime";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
AgreedLeadTime:
    any;
RealLeadTime:
    any;
Percentage:
    any;
ItemDescription:
    any;
DateFormatted:
    any;
Threshold:
    any;
SLALeadDate:
    any;
Month:
    any;
MonthlyDelayed:
    any;
MontlhyOrders:
    any;
MonthlyPercentage:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLALeadTimes(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLALeadTimes(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SLADelivery  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SLADelivery";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderedQuantities:
    any;
DeliveredQuantities:
    any;
Percentage:
    any;
ItemDescription:
    any;
Threshold:
    any;
SLADate:
    any;
DateFormatted:
    any;
Month:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLADeliveries(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLADeliveries(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Platform  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Platform";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
percentage:
    any;
ItemDescription:
    any;
RealOrderedQuantities:
    any;
ForecastOrders:
    any;
Month:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SLAStatistics  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SLAStatistics";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Percentage:
    any;
Threshold:
    any;
Month:
    any;
Item:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class InventoryDaysKPI  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.InventoryDaysKPI";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.InventoryDaysKPIKey = 0;
    }
InventoryDays:
    any;
ItemDescription:
    any;
SalesForecastDate:
    any;
SalesForecastDateFormatted:
    any;
InventoryDaysKPIKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.InventoryDaysKPIKey == null || $this.InventoryDaysKPIKey == 0;
    }
}

export class UnitsKPI  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.UnitsKPI";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
ItemDescription:
    any;
SalesForecastDate:
    any;
SalesForecastDateFormatted:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Stats  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Stats";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Percentage:
    any;
Threshold:
    any;
DateFormatted:
    any;
Date:
    any;
Warehouse:
    any;
Item:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StockOnHand  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
CurrentInventoryDays:
    any;
StockOnHandDate:
    any;
LeadTime:
    any;
TargetInventoryDays:
    any;
FullTrackLoad:
    any;
WDDays:
    any;
Agreement:
    any;
Warehouse:
    any;
Item:
    any;
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeStockOnHands(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addStockOnHands(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeStocksOnHand(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addStocksOnHand(value, $this);
        }
    }
    static DailyStock(): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Store  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Store";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TransportUnCap  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TransportUnCap";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UOP:
    any;
PercRound:
    any;
Tuc1:
    any;
SplitOcInd:
    any;
Status:
    any;
Warehouse:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Warehouse  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.RegionalAgentsService = [];
        this.PastOrders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
FlowType:
    any;
Title:
    any;
Address:
    any;
Telephone:
    any;
GeoCoordinates:
    any;
RegionalAgentsService:
    any;
PastOrders:
    any;
    static setGeoCoordinates = ($this, value) => {
        var oldValue = $this.GeoCoordinates;
        $this.GeoCoordinates = value;
        if (value != null) {
        }
    }
    static setRegionalAgentsService = ($this, items) => {
        if (items == null) items = [];
        if ($this.RegionalAgentsService == null) $this.RegionalAgentsService = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.RegionalAgentsService.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.removeRegionalAgentsService($this, $this.RegionalAgentsService[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addManyRegionalAgentsService($this, copyItems);
    }
    static addManyRegionalAgentsService = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addRegionalAgentsService($this, items[i]);
        }
    }
    static addRegionalAgentsService = ($this, item) => {
        if ($this.RegionalAgentsService == null) $this.RegionalAgentsService = [];
        if (item == null || $this.RegionalAgentsService.indexOf(item) > -1) return;
        $this.RegionalAgentsService.push(item);
        RegionalAgent.addWarehousesSupport(item, $this);
    }
    static addRangeRegionalAgentsService = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addRegionalAgentsService($this, item));
    }
    static removeRegionalAgentsService = ($this, item) => {
        if ($this == null || $this.RegionalAgentsService == null || $this.RegionalAgentsService.indexOf(item) === -1) return;
        var _index = $this.RegionalAgentsService.indexOf(item);
        $this.RegionalAgentsService.splice(_index, 1);
        RegionalAgent.removeWarehousesSupport(item, $this);
    }
    static clearRegionalAgentsService = ($this) => {
        $this.RegionalAgentsService = null;
    }
    static setPastOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.PastOrders == null) $this.PastOrders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PastOrders.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.removePastOrders($this, $this.PastOrders[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addManyPastOrders($this, copyItems);
    }
    static addManyPastOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addPastOrders($this, items[i]);
        }
    }
    static addPastOrders = ($this, item) => {
        if ($this.PastOrders == null) $this.PastOrders = [];
        if (item == null || $this.PastOrders.indexOf(item) > -1) return;
        $this.PastOrders.push(item);
        if (item.Warehouse != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder.setWarehouse(item, $this);
        }
    }
    static addRangePastOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addPastOrders($this, item));
    }
    static removePastOrders = ($this, item) => {
        if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1) return;
        var _index = $this.PastOrders.indexOf(item);
        $this.PastOrders.splice(_index, 1);
        item.Warehouse = null;
    }
    static clearPastOrders = ($this) => {
        $this.PastOrders = null;
    }
    static InitWarehouse(): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class XPackLog  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.XPackLog";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Probability:
    any;
RecordScore:
    any;
InitialRecordScore:
    any;
PartitionFieldValue:
    any;
Timestamp:
    any;
Typical:
    any;
Actual:
    any;
    static GetRecordRequest(): any{let req = new Object() as any;

                                       let query = new Object() as any;

                                       let boolOp = new Object() as any;

                                       let mustOp = new Object() as any;

                                       let queryString = new Object() as any;

                                       queryString.analyze_wildcard = true;

                                       queryString.query = "+result_type:\"record\"";

                                       mustOp.query_string = queryString;

                                       boolOp.must = mustOp;

                                       let filter = new Object() as any;

                                       let range = new Object() as any;

                                       let timestamp = new Object() as any;

                                       timestamp.gte = "now-1y";

                                       timestamp.lte = "now";

                                       range.timestamp = timestamp;

                                       filter.range = range;

                                       boolOp.filter = filter;

                                       query.Bool = boolOp;

                                       req.query = query;

                                       return req;

                                      }
        static Transform(logs: any): any{let buckets = [];

                                         for (let _ibucket = 0; _ibucket < (logs == null ? 0 : logs.length); _ibucket++) {
    var bucket = logs[_ibucket];
        let log = new DSS2_SynchromodalityCapacityOptimisation.BO.XPackLog();
        log.InitialRecordScore = Joove.Common.nullSafe<any>(() => bucket.source.initial_record_score, 0);
        log.Actual = Joove.Common.nullSafe<any>(() => bucket.source.actual[0], 0);
        log.PartitionFieldValue = Joove.Common.nullSafe<any>(() => bucket.source.partition_field_value, "");
        log.Probability = Joove.Common.nullSafe<any>(() => bucket.source.probability, 0);
        log.RecordScore = Joove.Common.nullSafe<any>(() => bucket.source.record_score, 0);
        log.Timestamp = Joove.Common.nullSafe<any>(() => bucket.source.timestamp, 0);
        log.Typical = Joove.Common.nullSafe<any>(() => bucket.source.typical[0], 0);
        Joove.Common.nullSafe<any>(() => buckets.add(log), null);
    }

    return buckets;

                                    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserAction  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
ActiveRoles:
    any;
ActivePermissions:
    any;
Action:
    any;
Controller:
    any;
Date:
    any;
ErrorMessage:
    any;
Success:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserExternalProfile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Gender:
    any;
Name:
    any;
Surname:
    any;
DisplayName:
    any;
Email:
    any;
Provider:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
IsCustom:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUser  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Permissions = [];
        this.Roles = [];
        this.Clients = [];
        this.Logins = [];
        this.Claims = [];
        this['_key'] = this.UserName = "";
    }
UserName:
    any;
PasswordHash:
    any;
SecurityStamp:
    any;
EmailConfirmed:
    any;
LockoutEnabled:
    any;
PhoneNumberConfirmed:
    any;
TwoFactorEnabled:
    any;
AccessFailedCount:
    any;
Name:
    any;
Email:
    any;
PhoneNumber:
    any;
LockoutEndDate:
    any;
Permissions:
    any;
Roles:
    any;
Clients:
    any;
Logins:
    any;
Claims:
    any;
Profile:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addUsers(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeUsers(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addUsers(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removeUsers(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setClients = ($this, items) => {
        if (items == null) items = [];
        if ($this.Clients == null) $this.Clients = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Clients.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyClients($this, copyItems);
    }
    static addManyClients = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClients($this, items[i]);
        }
    }
    static addClients = ($this, item) => {
        if ($this.Clients == null) $this.Clients = [];
        if (item == null || $this.Clients.indexOf(item) > -1) return;
        $this.Clients.push(item);
        if (item.User != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationClient.setUser(item, $this);
        }
    }
    static addRangeClients = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClients($this, item));
    }
    static removeClients = ($this, item) => {
        if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1) return;
        var _index = $this.Clients.indexOf(item);
        $this.Clients.splice(_index, 1);
        item.User = null;
    }
    static clearClients = ($this) => {
        $this.Clients = null;
    }
    static setLogins = ($this, items) => {
        if (items == null) items = [];
        if ($this.Logins == null) $this.Logins = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Logins.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyLogins($this, copyItems);
    }
    static addManyLogins = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addLogins($this, items[i]);
        }
    }
    static addLogins = ($this, item) => {
        if ($this.Logins == null) $this.Logins = [];
        if (item == null || $this.Logins.indexOf(item) > -1) return;
        $this.Logins.push(item);
        if (item.User != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUserLogin.setUser(item, $this);
        }
    }
    static addRangeLogins = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addLogins($this, item));
    }
    static removeLogins = ($this, item) => {
        if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1) return;
        var _index = $this.Logins.indexOf(item);
        $this.Logins.splice(_index, 1);
        item.User = null;
    }
    static clearLogins = ($this) => {
        $this.Logins = null;
    }
    static setClaims = ($this, items) => {
        if (items == null) items = [];
        if ($this.Claims == null) $this.Claims = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Claims.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyClaims($this, copyItems);
    }
    static addManyClaims = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClaims($this, items[i]);
        }
    }
    static addClaims = ($this, item) => {
        if ($this.Claims == null) $this.Claims = [];
        if (item == null || $this.Claims.indexOf(item) > -1) return;
        $this.Claims.push(item);
        if (item.User != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUserClaim.setUser(item, $this);
        }
    }
    static addRangeClaims = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClaims($this, item));
    }
    static removeClaims = ($this, item) => {
        if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1) return;
        var _index = $this.Claims.indexOf(item);
        $this.Claims.splice(_index, 1);
        item.User = null;
    }
    static clearClaims = ($this) => {
        $this.Claims = null;
    }
    static setProfile = ($this, value) => {
        var oldValue = $this.Profile;
        $this.Profile = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class ApplicationRole  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Users = [];
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Permissions:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addRoles(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removeRoles(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addRoles(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeRoles(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationOperation  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentControllerName:
    any;
Type:
    any;
IsAvailableToAnonymous:
    any;
IsAvailableToAllAuthorizedUsers:
    any;
Permissions:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addOperations(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeOperations(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationPermission  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Users = [];
        this.Roles = [];
        this.Operations = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Roles:
    any;
Operations:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addPermissions(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removePermissions(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addPermissions(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removePermissions(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setOperations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Operations == null) $this.Operations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Operations.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addManyOperations($this, copyItems);
    }
    static addManyOperations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addOperations($this, items[i]);
        }
    }
    static addOperations = ($this, item) => {
        if ($this.Operations == null) $this.Operations = [];
        if (item == null || $this.Operations.indexOf(item) > -1) return;
        $this.Operations.push(item);
        ApplicationOperation.addPermissions(item, $this);
    }
    static addRangeOperations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addOperations($this, item));
    }
    static removeOperations = ($this, item) => {
        if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1) return;
        var _index = $this.Operations.indexOf(item);
        $this.Operations.splice(_index, 1);
        ApplicationOperation.removePermissions(item, $this);
    }
    static clearOperations = ($this) => {
        $this.Operations = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationClient  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClientKey:
    any;
IPAddress:
    any;
SessionId:
    any;
ConnectedOn:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClients(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClients(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserLogin  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LoginProvider:
    any;
ProviderKey:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeLogins(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addLogins(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserClaim  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClaimType:
    any;
ClaimValue:
    any;
ClaimValueType:
    any;
Issuer:
    any;
OriginalIssuer:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClaims(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClaims(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProfileSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
ParentProfile:
    any;
    static setParentProfile = ($this, value) => {
        var oldValue = $this.ParentProfile;
        $this.ParentProfile = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Profile.removeSettings(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addSettings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Profile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Settings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LanguageLCID:
    any;
LocaleLCID:
    any;
Theme:
    any;
Settings:
    any;
    static setSettings = ($this, items) => {
        if (items == null) items = [];
        if ($this.Settings == null) $this.Settings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Settings.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Profile.removeSettings($this, $this.Settings[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addManySettings($this, copyItems);
    }
    static addManySettings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addSettings($this, items[i]);
        }
    }
    static addSettings = ($this, item) => {
        if ($this.Settings == null) $this.Settings = [];
        if (item == null || $this.Settings.indexOf(item) > -1) return;
        $this.Settings.push(item);
        if (item.ParentProfile != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ProfileSetting.setParentProfile(item, $this);
        }
    }
    static addRangeSettings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addSettings($this, item));
    }
    static removeSettings = ($this, item) => {
        if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1) return;
        var _index = $this.Settings.indexOf(item);
        $this.Settings.splice(_index, 1);
        item.ParentProfile = null;
    }
    static clearSettings = ($this) => {
        $this.Settings = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationLanguage  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Code:
    any;
Icon:
    any;
DateTimeFormat:
    any;
    static setDateTimeFormat = ($this, value) => {
        var oldValue = $this.DateTimeFormat;
        $this.DateTimeFormat = value;
        if (value != null) {
            if (oldValue != null && oldValue.ApplicationLanguage != null) {
                oldValue.ApplicationLanguage = null;
            }
            if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.DateTimeFormat.setApplicationLanguage(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DateTimeFormat  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LongDatePattern:
    any;
LongTimePattern:
    any;
MonthDayPattern:
    any;
RFC1123Pattern:
    any;
ShortDatePattern:
    any;
ShortTimePattern:
    any;
YearMonthPattern:
    any;
ApplicationLanguage:
    any;
    static setApplicationLanguage = ($this, value) => {
        var oldValue = $this.ApplicationLanguage;
        $this.ApplicationLanguage = value;
        if (value != null) {
            if (oldValue != null && oldValue.DateTimeFormat != null) {
                oldValue.DateTimeFormat = null;
            }
            if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTheme  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FileData  {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.FileData";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Id:
    any;
FileName:
    any;
FolderPath:
    any;
MaxFileSize:
    any;
AllowedExtensions:
    any;
Blob:
    any;
StorageMedium:
    any;
UploadedBy:
    any;
UploadDateTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export enum StorageMedium {
    FileSystem,
    DataBase,
}

export class AuditEntityConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Properties = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullName:
    any;
ShortName:
    any;
Properties:
    any;
    static setProperties = ($this, items) => {
        if (items == null) items = [];
        if ($this.Properties == null) $this.Properties = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Properties.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
    }
    static addManyProperties = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addProperties($this, items[i]);
        }
    }
    static addProperties = ($this, item) => {
        if ($this.Properties == null) $this.Properties = [];
        if (item == null || $this.Properties.indexOf(item) > -1) return;
        $this.Properties.push(item);
        if (item.Entity != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.AuditPropertyConfiguration.setEntity(item, $this);
        }
    }
    static addRangeProperties = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addProperties($this, item));
    }
    static removeProperties = ($this, item) => {
        if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1) return;
        var _index = $this.Properties.indexOf(item);
        $this.Properties.splice(_index, 1);
        item.Entity = null;
    }
    static clearProperties = ($this) => {
        $this.Properties = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditPropertyConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this.Entity = new this.Domain.AuditEntityConfiguration();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
DataType:
    any;
IsAuditable:
    any;
IsComplex:
    any;
IsCollection:
    any;
Entity:
    any;
    static setEntity = ($this, value) => {
        var oldValue = $this.Entity;
        $this.Entity = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addProperties(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntry  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
IPAddress:
    any;
EntityFullName:
    any;
EntityShortName:
    any;
EntityId:
    any;
Timestamp:
    any;
EntryTypeId:
    any;
ActionTypeId:
    any;
OldValue:
    any;
NewValue:
    any;
PropertyName:
    any;
ExtraField1:
    any;
ExtraField2:
    any;
ExtraField3:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntryType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogPropertyActionType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum WorkflowStatus {
    None,
    Completed,
    Pending,
    Expired,
    Cancelled,
    Failed,
    StepToContinueNotFound,
}

export class WorkflowExecutionResult  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.WorkflowExecutionResultKey = 0;
    }
Status:
    any;
Context:
    any;
WorkflowExecutionResultKey:
    any;
    static setContext = ($this, value) => {
        var oldValue = $this.Context;
        $this.Context = value;
        if (value != null) {
            if (oldValue != null && oldValue.Result != null) {
                oldValue.Result = null;
            }
            if ($this.Context.Result !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkflowContextBase.setResult(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
    }
}

export class WorkflowContextBase  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Name:
    any;
Error:
    any;
Expires:
    any;
ExpirationDateTime:
    any;
PendingSince:
    any;
PendingJobCreatedBy:
    any;
PendingStep:
    any;
Id:
    any;
Status:
    any;
Result:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
            if (oldValue != null && oldValue.Context != null) {
                oldValue.Context = null;
            }
            if ($this.Result.Context !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkflowExecutionResult.setContext(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class WorkflowSchedule  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        this['_key'] = this.Workflow = "";
    }
Workflow:
    any;
Description:
    any;
StartDateTime:
    any;
ExpireOn:
    any;
CronExpression:
    any;
LastExecution:
    any;
LastExecutionMessage:
    any;
IsLastExecutionSuccess:
    any;
Active:
    any;
HumanReadableExpression:
    any;
NextExecutionTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Workflow == null || $this.Workflow == "";
    }
}

export class Driver extends ApplicationUser {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Driver";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
Id:
    any;
Employer:
    any;
    static setEmployer = ($this, value) => {
        var oldValue = $this.Employer;
        $this.Employer = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Location.removeDriver(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Location.addDriver(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class LSPUser extends ApplicationUser {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
LSP:
    any;
    static setLSP = ($this, value) => {
        var oldValue = $this.LSP;
        $this.LSP = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeLSPUsers(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addLSPUsers(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class RegionalAgentUser extends ApplicationUser {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
RegionalAgent:
    any;
    static setRegionalAgent = ($this, value) => {
        var oldValue = $this.RegionalAgent;
        $this.RegionalAgent = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeRAUsers(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addRAUsers(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class TruckDriver extends ApplicationUser {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this.ProofOfDelivery = [];
        this['_key'] = this.UserName = "";
    }
ProofOfDelivery:
    any;
Truck:
    any;
    static setProofOfDelivery = ($this, items) => {
        if (items == null) items = [];
        if ($this.ProofOfDelivery == null) $this.ProofOfDelivery = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ProofOfDelivery.length > 0) {
            DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.removeProofOfDelivery($this, $this.ProofOfDelivery[0]);
        }

        DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addManyProofOfDelivery($this, copyItems);
    }
    static addManyProofOfDelivery = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addProofOfDelivery($this, items[i]);
        }
    }
    static addProofOfDelivery = ($this, item) => {
        if ($this.ProofOfDelivery == null) $this.ProofOfDelivery = [];
        if (item == null || $this.ProofOfDelivery.indexOf(item) > -1) return;
        $this.ProofOfDelivery.push(item);
        if (item.TruckDriver != $this) {
            DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery.setTruckDriver(item, $this);
        }
    }
    static addRangeProofOfDelivery = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addProofOfDelivery($this, item));
    }
    static removeProofOfDelivery = ($this, item) => {
        if ($this == null || $this.ProofOfDelivery == null || $this.ProofOfDelivery.indexOf(item) === -1) return;
        var _index = $this.ProofOfDelivery.indexOf(item);
        $this.ProofOfDelivery.splice(_index, 1);
        item.TruckDriver = null;
    }
    static clearProofOfDelivery = ($this) => {
        $this.ProofOfDelivery = null;
    }
    static setTruck = ($this, value) => {
        var oldValue = $this.Truck;
        $this.Truck = value;
        if (value != null) {
            if (oldValue != null && oldValue.TruckDriver != null) {
                oldValue.TruckDriver = null;
            }
            if ($this.Truck.TruckDriver !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Truck.setTruckDriver(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class Contact extends ApplicationUser {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Contact";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
Id:
    any;
Company:
    any;
    static setCompany = ($this, value) => {
        var oldValue = $this.Company;
        $this.Company = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Company.removeContacts(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Company.addContacts(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class Retailer extends Company {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Retailer";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PastSales extends Sales {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PastSales";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DeliveryPlan extends Sales {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DeliveryPlan";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SalesForecastDetails extends Sales {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this.ComputedStock = 0;
        this.NewOrder = 0;
        this['_key'] = this.Id = 0;
    }
AvgDailyDemandForecast:
    any;
ComputedStock:
    any;
NewOrder:
    any;
SalesForecast:
    any;
    static setSalesForecast = ($this, value) => {
        var oldValue = $this.SalesForecast;
        $this.SalesForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeSalesForecastDetails(oldValue, $this);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addSalesForecastDetails(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Supplier extends Company {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Supplier";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
BusinessUnit:
    any;
    static setBusinessUnit = ($this, value) => {
        var oldValue = $this.BusinessUnit;
        $this.BusinessUnit = value;
        if (value != null) {
            if (oldValue != null && oldValue.Supplier != null) {
                oldValue.Supplier = null;
            }
            if ($this.BusinessUnit.Supplier !== $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.setSupplier(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class WorkflowSockContext extends WorkflowContextBase {
    _originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.WorkflowSockContext";
    Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

}
var _appDomain = DSS2_SynchromodalityCapacityOptimisation.BO;
window.$domain = _appDomain;
