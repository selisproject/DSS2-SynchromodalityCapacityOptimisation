/* Copyright (c) CLMS. All rights reserved.
 * Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
 * This source file was autogenerated by zAppDev(r). */
var Joove;
(function (Joove) {
    var MessageType = (function () {
        function MessageType() {
        }
        MessageType.Error = "Error";
        MessageType.Success = "Success";
        MessageType.Info = "Info";
        MessageType.Warning = "Warning";
        return MessageType;
    }());
    Joove.MessageType = MessageType;
    var PopupTypes = {
        INFO: "info",
        WARNING: "warning",
        ERROR: "error",
        SUCCESS: "success",
        CUSTOM: null
    };
    var OpenPopUpTypes;
    (function (OpenPopUpTypes) {
        OpenPopUpTypes[OpenPopUpTypes["PopUp"] = 1] = "PopUp";
        OpenPopUpTypes[OpenPopUpTypes["Modal"] = 2] = "Modal";
    })(OpenPopUpTypes = Joove.OpenPopUpTypes || (Joove.OpenPopUpTypes = {}));
    var PopUpManager = (function () {
        function PopUpManager() {
            this.spinnerId = "JbLoadingSpinner";
            this.showLoadingTimeout = null;
            this.hideLoadingTimeout = null;
            this.popUpVisible = false;
            this.confirmationVisible = false;
            this.openPopUpStack = [];
            this.isIE = Joove.Core.isIE();
            this.previouslyFocusedElement = null;
            this.popUps = [];
        }
        PopUpManager.prototype.resetFocus = function () {
            if (this.previouslyFocusedElement == null)
                return;
            $(this.previouslyFocusedElement).focus();
            this.previouslyFocusedElement = null;
        };
        Object.defineProperty(PopUpManager.prototype, "isLoading", {
            get: function () {
                var exists = $("#" + this.spinnerId).length > 0;
                var isVisible = $("#" + this.spinnerId).is(":visible");
                return exists && isVisible;
            },
            enumerable: true,
            configurable: true
        });
        PopUpManager.prototype.registerPopUp = function (options) {
            if (options.name == null || options.name.trim() === "") {
                console.error("Please provide a pop up name");
                return;
            }
            if (this.popUps[options.name] != null) {
                console.warn("A pop up is already registered and will be overwritten. Name: " + options.name);
            }
            this.popUps[options.name] = options;
        };
        PopUpManager.prototype.showPopUp = function (name) {
            var options = this.popUps[name];
            if (options == null) {
                console.error("Not found registered pop up with name: " + name);
                return;
            }
            this.showCustomPopUp(options);
            this.hideScrollbars();
            this.disableKeyboardEvents();
            this.disableMouseWheelScroll();
            this.popUpVisible = true;
        };
        PopUpManager.prototype.getModalParent = function (element) {
            if (element == null)
                return null;
            var modal = element.closest("[jb-type='Modal']");
            if (modal != null && modal.length > 0 && modal[0] != null) {
                return modal[0];
            }
            return null;
        };
        PopUpManager.prototype.hidePopUp = function (name, dontCallCloseCb) {
            if (dontCallCloseCb === void 0) { dontCallCloseCb = false; }
            var $existing = $("[jb-type='Modal'][data-name='" + name + "'], [jb-type='Slide'][data-name='" + name + "']");
            this.popUpVisible = false;
            if ($existing.length === 0) {
                console.error("Not found pop up with name: " + name);
                return;
            }
            var options = this.popUps[name];
            if (options != null) {
                var parentModal = options.parentModal;
                if (parentModal != null) {
                    $(parentModal).show();
                    this.popUpVisible = true;
                }
            }
            if ($existing.hasClass("slide-popup")) {
                $existing.css("right", "-" + $existing.width() + "px");
            }
            else {
                if (this.isIE) {
                    $existing.hide();
                }
                else {
                    $existing.fadeOut();
                }
            }
            $existing.removeClass("popup-visible");
            if (dontCallCloseCb !== true && options != null) {
                options.closeCallback && options.closeCallback();
            }
            this.removeFromOpenPopUpStack(name, OpenPopUpTypes.PopUp);
            this.handleOpenPopUpStack();
            this.popUpVisible = this.openPopUpStack.length > 0;
            if (this.popUpVisible === false) {
                this.showScrollbars();
                this.enableKeyboardEvents();
                this.enableMouseWheelScroll();
                $(".jb-modal-overlay").hide();
            }
        };
        PopUpManager.prototype.addToOpenPopUpStack = function (name, type) {
            if (!this.openPopUpStack.some(function (popup) { return popup.name === name && popup.type === type; })) {
                this.openPopUpStack.push({ "name": name, "type": type });
            }
        };
        PopUpManager.prototype.removeFromOpenPopUpStack = function (name, type) {
            for (var i = this.openPopUpStack.length - 1; i >= 0; i--) {
                if (this.openPopUpStack[i].name === name && this.openPopUpStack[i].type === type) {
                    this.openPopUpStack.splice(i, 1);
                    break;
                }
            }
        };
        PopUpManager.prototype.handleOpenPopUpStack = function () {
            if (this.openPopUpStack.length === 0)
                return;
            var $popUpElement;
            var lastOpenedPopUp = this.openPopUpStack[this.openPopUpStack.length - 1];
            switch (lastOpenedPopUp.type) {
                case OpenPopUpTypes.PopUp:
                    $popUpElement = $("[jb-type='Modal'][data-name='" + lastOpenedPopUp.name + "'], [jb-type='Slide'][data-name='" + lastOpenedPopUp.name + "']");
                    break;
                case OpenPopUpTypes.Modal:
                    $popUpElement = $("[jb-type='Modal'][data-name^='" + lastOpenedPopUp.name + "'], [jb-type='Slide'][data-name^='" + lastOpenedPopUp.name + "'], [jb-id='" + lastOpenedPopUp.name + "']");
                    break;
            }
            $popUpElement.show();
        };
        PopUpManager.prototype.hideAllPopUps = function () {
            $("[jb-type='Modal']").hide();
            $(".jb-modal-overlay").hide();
            var $slides = $("[jb-type='Slide']");
            for (var i = 0; i < $slides.length; i++) {
                var $current = $slides.eq(i);
                $current.removeClass("popup-visible");
                $current.css("right", "-" + $current.width() + "px");
            }
            this.popUpVisible = false;
            this.showScrollbars();
            this.enableKeyboardEvents();
            this.enableMouseWheelScroll();
        };
        PopUpManager.prototype.destroyPopUp = function (name) {
            var $existing = $("[jb-type='Modal'][data-name='" + name + "']");
            $existing.remove();
            delete this.popUps[name];
        };
        PopUpManager.prototype.error = function (title, message, cb) {
            this.showSimplePopUp(PopupTypes.ERROR, title, message, cb);
        };
        PopUpManager.prototype.success = function (title, message, cb) {
            this.showSimplePopUp(PopupTypes.SUCCESS, title, message, cb);
        };
        PopUpManager.prototype.warning = function (title, message, cb) {
            this.showSimplePopUp(PopupTypes.WARNING, title, message, cb);
        };
        PopUpManager.prototype.info = function (title, message, cb) {
            this.showSimplePopUp(PopupTypes.INFO, title, message, cb);
        };
        PopUpManager.prototype.question = function (title, message, cb) {
            this.popUpVisible = true;
            this.confirmationVisible = true;
            var self = this;
            swal({
                title: title,
                text: message,
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: window._resourcesManager.getGlobalResource("RES_SITE_PREFS_OKButtonText"),
                cancelButtonText: window._resourcesManager.getGlobalResource("RES_SITE_PREFS_CancelButtonText"),
                closeOnConfirm: true
            }, function (isConfirm) {
                self.popUpVisible = false;
                self.confirmationVisible = false;
                self.hideLoadingPopUp(0);
                cb && cb(isConfirm);
            });
        };
        PopUpManager.prototype.showModalControl = function (modalName, options) {
            var _this = this;
            options = options || {};
            this.hideAllPopUps();
            var $popUp = $("[jb-type='Modal'][jb-id='" + modalName + "']");
            $("<div class='jb-modal-overlay modal-control-overlay' style='display: block;' />").insertBefore($popUp);
            var $popUpBody = $popUp.find("[jb-type='ModalBody']");
            var popupHeight = $popUpBody.height();
            var windowHeight = window.innerHeight;
            var popupWidth = $popUp.width();
            var windowWidth = window.innerWidth;
            if (popupHeight > windowHeight) {
                popupHeight = Math.floor(windowHeight * 0.8);
            }
            if (popupWidth > windowWidth) {
                popupWidth = Math.floor(windowWidth * 0.8);
            }
            if (!(options.draggable === false || $popUp.attr("jb-draggable") == "false")) {
                var containmentRight = windowWidth - popupWidth;
                var containmentBottom = windowHeight - popupHeight;
                var containmentMargin = 50;
                $popUp.draggable({
                    handle: "[jb-type='ModalHeader']",
                });
                $popUp.find("[jb-type='ModalHeader']").css({ "cursor": "move" });
            }
            var overflowX = "auto";
            var overflowY = "auto";
            if ($popUp.length > 0 && $popUp[0].style) {
                if ($popUp[0].style["overflowX"] != null && $popUp[0].style["overflowX"].trim() != "") {
                    overflowX = $popUp[0].style["overflowX"];
                }
                if ($popUp[0].style["overflowY"] != null && $popUp[0].style["overflowY"].trim() != "") {
                    overflowY = $popUp[0].style["overflowY"];
                }
            }
            var horizontalOffset = options.draggable === false
                ? (document.documentElement.scrollLeft || document.body.scrollLeft)
                : 0;
            var verticalOffset = options.draggable === false
                ? (document.documentElement.scrollTop || document.body.scrollTop)
                : 0;
            var cssPosition = options.draggable === true
                ? "absolute"
                : "fixed";
            var headerHeight = $popUp.find("[jb-type='ModalHeader']").height();
            var footerHeight = $popUp.find("[jb-type='ModalFooter']").height();
            $popUpBody.css({
                "min-height": popupHeight + "px",
                "overflow-x": overflowX,
                "overflow-y": overflowY,
                "max-height": "calc(100vh - 300px)",
                "max-width": popupWidth + "px",
            });
            $popUp.css({
                left: ((windowWidth / 2) - (popupWidth / 2) + horizontalOffset) + "px",
                top: "100px",
                position: cssPosition,
            });
            if (this.isIE) {
                $popUp.show();
                this.popUpVisible = true;
            }
            else {
                $popUp.fadeIn();
                setTimeout(function () {
                    _this.popUpVisible = true;
                }, 1000);
            }
            $popUp.find("[jb-id='_modalCancelButton']").on("click", function () {
                _this.hideModalControl(modalName, options);
            });
            this.hideScrollbars();
            this.disableKeyboardEvents();
            this.popUpVisible = true;
            this.addToOpenPopUpStack(modalName, OpenPopUpTypes.Modal);
        };
        PopUpManager.prototype.hideModalControl = function (modalName, options) {
            var $popUp = $("[jb-type='Modal'][data-name^='" + modalName + "'].popup-visible, [jb-type='Slide'][data-name^='" + modalName + "'].popup-visible, [jb-id='" + modalName + "']:visible");
            $popUp.siblings(".modal-control-overlay").remove();
            if (modalName == "ControllerActionModal") {
                var jbType = $popUp.attr("jb-type");
                if (jbType == "Modal") {
                    jbType = "PopUp";
                }
                this.hidePopUp(modalName + jbType, true);
            }
            $(".jb-modal-overlay").hide();
            if ($popUp.length === 0) {
                console.error("PopUp Manager: uncaught selector case during hideModalControl");
                return;
            }
            if ($popUp.length > 1) {
                console.error("PopUp Manager: selector case during hideModalControl found " + $popUp.length + " PopUps!");
            }
            $popUp.removeClass("popup-visible");
            $popUp.hide();
            this.removeFromOpenPopUpStack(modalName, OpenPopUpTypes.Modal);
            this.handleOpenPopUpStack();
            this.popUpVisible = this.openPopUpStack.length > 0;
            if (this.popUpVisible === false) {
                this.showScrollbars();
                this.enableKeyboardEvents();
                this.enableMouseWheelScroll();
            }
            var modalOptions = this.popUps[modalName];
            if (modalOptions == null && modalName == "ControllerActionModal") {
                var jbType = $popUp.attr("jb-type");
                if (jbType == "Modal") {
                    jbType = "PopUp";
                }
                modalOptions = modalOptions || this.popUps["ControllerActionModal" + jbType];
            }
            if (modalOptions != null) {
                modalOptions.closeCallback && modalOptions.closeCallback();
                if (modalOptions.destroyOnHide) {
                    this.destroyPopUp(modalOptions.name);
                }
            }
        };
        PopUpManager.prototype.toHTML = function (message) {
            try {
                var doc = new DOMParser().parseFromString(message, "text/html");
                if (doc && doc.body && doc.body.childNodes && doc.body.childNodes.length != 0) {
                    if ([].slice.call(doc.body.childNodes).some(function (node) { return node.nodeType === 1; }) == false) {
                        message = $("<div />", { html: message }).text();
                    }
                }
            }
            catch (e) {
            }
            return message;
        };
        PopUpManager.prototype.showSimplePopUp = function (type, title, message, cb) {
            title = this.toHTML(title);
            message = this.toHTML(message);
            this.popUpVisible = true;
            var self = this;
            swal({
                type: type,
                title: title,
                text: message,
                html: true
            }, function () {
                setTimeout(function () {
                    self.popUpVisible = false;
                    self.hideLoadingPopUp(0);
                    cb && cb();
                    self.resetFocus();
                }, 200);
            });
        };
        PopUpManager.prototype.showConfirmPopUp = function (type, title, message, okCb, cancelCb) {
            console.error("Confirm not implemented yet");
        };
        PopUpManager.prototype.showLoadingPopUp = function (timeoutOverride) {
            var _this = this;
            if (this.isLoading)
                return;
            var timeout = timeoutOverride || 1500;
            var self = this;
            this.showLoadingTimeout = setTimeout(function () {
                if (Joove.Ajax.pendingRequestsWithOverlay() === 0)
                    return;
                if (self.confirmationVisible || self.popUpVisible)
                    return;
                var $spinner = $("#" + _this.spinnerId);
                if ($spinner.length === 0) {
                    $spinner = $('<div id="' + _this.spinnerId + '">\
                                    <div class="spinner">\
                                      <div class="rect1"></div>\
                                      <div class="rect2"></div>\
                                      <div class="rect3"></div>\
                                      <div class="rect4"></div>\
                                      <div class="rect5"></div>\
                                    </div>\
                                  </div>');
                    $spinner.css({
                        position: "fixed",
                        "right": "20px",
                        "bottom": "50px",
                        "z-index": "99999999",
                        "background-color": "rgba(255, 255, 255, 0.89)",
                        "padding": "5px",
                        "border": "1px solid #ccc",
                        "border-radius": "5px"
                    });
                    $spinner.find(".spinner")
                        .css({
                        height: "40px",
                        width: "40px"
                    });
                    $spinner.appendTo("body");
                }
                $spinner.show();
            }, timeout);
        };
        PopUpManager.prototype.hideLoadingPopUp = function (timeoutOverride) {
            var _this = this;
            if (this.isLoading === false)
                return;
            var timeout = timeoutOverride || 1000;
            var self = this;
            this.hideLoadingTimeout = setTimeout(function () {
                if (Joove.Ajax.pendingRequestsWithOverlay() > 0)
                    return;
                if (self.confirmationVisible || self.popUpVisible)
                    return;
                var $spinner = $("#" + _this.spinnerId);
                $spinner.hide();
            }, timeout);
        };
        PopUpManager.prototype.showCustomPopUp = function (options) {
            var _this = this;
            this.hideAllPopUps();
            var $existing = $("[jb-type='Modal'][data-name='" + options.name + "'], [jb-type='Slide'][data-name='" + options.name + "']");
            var self = this;
            if ($existing.length > 0) {
                if (options.overlay !== false) {
                    $(".jb-modal-overlay").show();
                }
                if (options.cancelButton === true) {
                    $existing.find(".modal-header .popup-close-button").hide();
                }
                this.resizePopUp(options, $existing);
                this.reloadContent(options, $existing, true);
                if (this.isIE) {
                    $existing.show();
                }
                else {
                    $existing.fadeIn();
                }
                this.addToOpenPopUpStack(options.name, OpenPopUpTypes.PopUp);
                return;
            }
            var $popUp = options.mode == "Slide"
                ? $("#JooveBoxControlTemplates > [jb-type='Slide']").clone()
                : $("#JooveBoxControlTemplates > [jb-type='Modal']").clone();
            $popUp.attr("data-name", options.name);
            $popUp.addClass(options.cssClass);
            if (options.overlay !== false || options.mode == "Slide") {
                $(".jb-modal-overlay").show();
            }
            $(window).on("resize", function () {
                if ($popUp.hasClass("popup-visible")) {
                    _this.resizePopUp(options, $popUp);
                    _this.reloadContent(options, $popUp, true);
                }
            });
            if (options.cancelButton === true) {
                $popUp.find(".modal-header .popup-close-button").hide();
            }
            this.resizePopUp(options, $popUp);
            this.reloadContent(options, $popUp, false);
            $popUp.find("[jb-id='_modalTitle']").text(options.title);
            $popUp.find("[jb-id='_modalCancelButton']")
                .on("click", function () {
                self.hidePopUp(options.name);
                if (options.destroyOnHide) {
                    self.destroyPopUp(options.name);
                }
            });
            var $btnOk = $popUp.find("[jb-id='_modalOKButton']");
            var $btnCancel = $popUp.find("[jb-id='_modalCancelButton']:not('.popup-close-button')");
            $btnOk.toggle(options.okButton);
            $btnCancel.toggle(options.cancelButton);
            if (options.okButton) {
                $btnOk.html(options.okText || window._resourcesManager.getDefaultOkText());
                $btnOk.on("click", function () {
                    if (options.okCallback != null) {
                        var exitCode = options.okCallback($popUp);
                        if (!exitCode) {
                            $popUp.find("[jb-id='_modalCancelButton']").click();
                        }
                    }
                    else {
                        $popUp.find("[jb-id='_modalCancelButton']").click();
                    }
                });
            }
            if (options.cancelButton) {
                $btnCancel.html(options.cancelText || window._resourcesManager.getDefaultCancelText());
            }
            if (options.onShowCallback != null) {
                options.onShowCallback($popUp);
            }
            if (options.dismissible === true && options.mode != "Slide") {
                var modalHeader = $("[jb-type='ModalHeader']");
                if (modalHeader.length > 0) {
                    var closeLabel = "_CloseLabel";
                    var closeIcon = $("[jb-type='ModalHeader']").find("[jb-id='" + closeLabel + "']");
                    if (closeIcon.length > 0 == false) {
                        closeIcon = $("<i jb-id=\"" + closeLabel + "\" jb-type=\"Iconism\" class=\"glyphicon glyphicon-remove jb-control\" style=\"float: right; cursor: pointer\" ui-role-font-size=\"lg\"></i>");
                        closeIcon.appendTo(modalHeader);
                    }
                    closeIcon.on("click", function () {
                        if (options.closeCallback != null) {
                            options.closeCallback($popUp);
                        }
                        self.hidePopUp(options.name);
                        if (options.destroyOnHide) {
                            self.destroyPopUp(options.name);
                        }
                    });
                }
            }
            this.addToOpenPopUpStack(options.name, OpenPopUpTypes.PopUp);
        };
        PopUpManager.prototype.reloadContent = function (options, popup, runOnShowCallback) {
            if (options == null || popup == null)
                return;
            if (options.url != null) {
                var iframe = "<iframe class='jb-modal-iframe' src='" + options.url + "'></iframe";
                if (options.mode == "Slide") {
                    popup.append(iframe);
                }
                else {
                    var modalBody = popup.find("[jb-type='ModalBody']");
                    modalBody.empty();
                    modalBody.append(iframe);
                }
            }
            if (options.$elementContent != null) {
                if (options.mode == "Slide") {
                    options.$elementContent.appendTo(popup);
                }
                else {
                    var modalBody = popup.find("[jb-type='ModalBody']");
                    options.$elementContent.appendTo(modalBody);
                }
            }
            if (runOnShowCallback === true && options.onShowCallback != null) {
                options.onShowCallback(popup);
            }
        };
        PopUpManager.prototype.resizePopUp = function (options, popup) {
            var width = 500;
            var height = 500;
            var units = "px";
            var windowHeight = window.innerHeight;
            var windowWidth = window.innerWidth;
            if (options.startMaximized) {
                options.draggable = false;
                width = 100;
                height = 100;
                units = "%";
            }
            else {
                if (options.width != null && isNaN(options.width) && options.width.indexOf("%") > -1) {
                    width = Math.round(windowWidth * (options.width.replace("%", "") / 100));
                }
                else if (options.width != null && isNaN(options.width) === false) {
                    width = options.width;
                }
                if (options.height != null && isNaN(options.height) && options.height.indexOf("%") > -1) {
                    height = Math.round(windowHeight * (options.height.replace("%", "") / 100));
                }
                else if (options.height != null && isNaN(options.height) === false) {
                    height = options.height;
                }
            }
            if (options.mode == "Slide") {
                popup.css({ "width": width + "px", "right": "-" + width + "px" });
                popup.appendTo("body");
            }
            else {
                if (!options.okButton && !options.cancelButton) {
                    var $footer = popup.find("[jb-type='ModalFooter']");
                    if ($footer.length > 0) {
                        $footer.remove();
                    }
                }
                popup.find("[jb-type='ModalContent']")
                    .css({
                    "width": width + units,
                    "height": height + units
                });
                popup.appendTo("body");
                if (options.draggable) {
                    var scrollLeft = (document.documentElement.scrollLeft || document.body.scrollLeft);
                    var scrollTop = (document.documentElement.scrollTop || document.body.scrollTop);
                    var containmentTopLeftX = 50 + scrollLeft;
                    var containmentTopLeftY = 50 + scrollTop;
                    var containmentBottomRightX = windowWidth - width + scrollLeft;
                    var containmentBottomRightY = windowHeight - height + scrollTop;
                    popup.draggable({
                        handle: "[jb-type='ModalHeader']",
                        containment: [
                            containmentTopLeftX,
                            containmentTopLeftY,
                            containmentBottomRightX,
                            containmentBottomRightY
                        ]
                    });
                    popup.find("[jb-type='ModalHeader']").css({ "cursor": "move" });
                }
                if (options.resizable) {
                    popup.resizable({
                        minHeight: options.minHeight || 250,
                        minWidth: options.minHeight || 250
                    });
                }
            }
            var self = this;
            if (options.mode != "Slide") {
                if (options.startMaximized === true) {
                    popup.css({
                        "left": "0",
                        "right": "0",
                        "top": document.documentElement.scrollTop + "px",
                        "bottom": "0",
                        "margin": "0",
                        "z-index": "999999999",
                        "width": "100vw",
                        "height": "100vh",
                        "position": "absolute"
                    });
                }
                else {
                    popup.css({
                        left: ((windowWidth / 2) - (width / 2) + (options.draggable !== false ? (document.documentElement.scrollLeft || document.body.scrollLeft) : 0)) + "px",
                        top: ((windowHeight / 2) - (height / 2) + (options.draggable !== false ? (document.documentElement.scrollTop || document.body.scrollTop) : 0)) + "px",
                        position: options.draggable !== false ? "absolute" : "fixed"
                    });
                }
                if (this.isIE) {
                    popup.show();
                    popup.addClass("popup-visible");
                    self.popUpVisible = true;
                }
                else {
                    popup.fadeIn(function () {
                        setTimeout(function () {
                            popup.addClass("popup-visible");
                            self.popUpVisible = true;
                        }, 500);
                    });
                }
            }
            else {
                setTimeout(function () {
                    popup.addClass("popup-visible");
                    popup.css("right", "0px");
                    popup.css("top", "0px");
                }, 500);
            }
        };
        PopUpManager.prototype.hideScrollbars = function () {
            $("html").css({ overflow: "hidden" });
        };
        PopUpManager.prototype.showScrollbars = function () {
            $("html").css({ overflow: Joove.Common.detectBrowser() == "IE" ? "visible" : "initial" });
        };
        PopUpManager.prototype.disableMouseWheelScroll = function () {
            jQuery("html")
                .eq(0)
                .on("mousewheel", function (event) {
                return $(event.target).parents().toArray().some(function (p) { return $(p).hasClass("data-list"); });
            });
        };
        PopUpManager.prototype.enableMouseWheelScroll = function () {
            jQuery("html").eq(0).unbind("mousewheel");
        };
        PopUpManager.prototype.disableKeyboardEvents = function () {
            jQuery("html")
                .eq(0)
                .on("keydown", function (e) {
                var keyCodesToBlock = [33, 34, 35, 36, 38, 40];
                if (keyCodesToBlock.indexOf(e.keyCode) > -1) {
                    e.stopPropagation();
                    e.preventDefault();
                    return false;
                }
            });
        };
        PopUpManager.prototype.enableKeyboardEvents = function () {
            jQuery("html").eq(0).unbind("keydown");
        };
        return PopUpManager;
    }());
    Joove.PopUpManager = PopUpManager;
})(Joove || (Joove = {}));
