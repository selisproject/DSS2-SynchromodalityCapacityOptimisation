var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var DSS2_SynchromodalityCapacityOptimisation;
(function (DSS2_SynchromodalityCapacityOptimisation) {
    var BO;
    (function (BO) {
        var Domain_LocalResourcesDefinition = (function () {
            function Domain_LocalResourcesDefinition() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Domain_LocalResourcesDefinition";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
            }
            return Domain_LocalResourcesDefinition;
        }());
        BO.Domain_LocalResourcesDefinition = Domain_LocalResourcesDefinition;
        var tblDhlEvent = (function () {
            function tblDhlEvent() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlEvent";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.EventID = 0;
            }
            tblDhlEvent.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.EventID == null || $this.EventID == 0;
            };
            return tblDhlEvent;
        }());
        BO.tblDhlEvent = tblDhlEvent;
        var tblDhlIncident = (function () {
            function tblDhlIncident() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlIncident";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.IncidentID = 0;
            }
            tblDhlIncident.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.IncidentID == null || $this.IncidentID == 0;
            };
            return tblDhlIncident;
        }());
        BO.tblDhlIncident = tblDhlIncident;
        var tblDhlPlannedRoute = (function () {
            function tblDhlPlannedRoute() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPlannedRoute";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.PlannedRouteID = 0;
            }
            tblDhlPlannedRoute.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.PlannedRouteID == null || $this.PlannedRouteID == 0;
            };
            return tblDhlPlannedRoute;
        }());
        BO.tblDhlPlannedRoute = tblDhlPlannedRoute;
        var tblDhlPurchase = (function () {
            function tblDhlPurchase() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPurchase";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Purchase_ID = 0;
            }
            tblDhlPurchase.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Purchase_ID == null || $this.Purchase_ID == 0;
            };
            return tblDhlPurchase;
        }());
        BO.tblDhlPurchase = tblDhlPurchase;
        var tblDhlRouteStopOperation = (function () {
            function tblDhlRouteStopOperation() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStopOperation";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.RouteStopOperationID = 0;
            }
            tblDhlRouteStopOperation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.RouteStopOperationID == null || $this.RouteStopOperationID == 0;
            };
            return tblDhlRouteStopOperation;
        }());
        BO.tblDhlRouteStopOperation = tblDhlRouteStopOperation;
        var tblDhlRouteStop = (function () {
            function tblDhlRouteStop() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStop";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.RouteStopID = 0;
            }
            tblDhlRouteStop.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.RouteStopID == null || $this.RouteStopID == 0;
            };
            return tblDhlRouteStop;
        }());
        tblDhlRouteStop.settblDhlPlannedRoute = function ($this, value) {
            var oldValue = $this.tblDhlPlannedRoute;
            $this.tblDhlPlannedRoute = value;
            if (value != null) {
            }
        };
        tblDhlRouteStop.settblDhlRouteStopOperation = function ($this, value) {
            var oldValue = $this.tblDhlRouteStopOperation;
            $this.tblDhlRouteStopOperation = value;
            if (value != null) {
            }
        };
        BO.tblDhlRouteStop = tblDhlRouteStop;
        var tblDhlTracking = (function () {
            function tblDhlTracking() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlTracking";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.TrackingID = 0;
            }
            tblDhlTracking.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.TrackingID == null || $this.TrackingID == 0;
            };
            return tblDhlTracking;
        }());
        tblDhlTracking.settblDhlPlannedRoute = function ($this, value) {
            var oldValue = $this.tblDhlPlannedRoute;
            $this.tblDhlPlannedRoute = value;
            if (value != null) {
            }
        };
        BO.tblDhlTracking = tblDhlTracking;
        var Shipment = (function () {
            function Shipment() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Shipment";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.ShippingOrders = [];
                this.ShipmentStatus = [];
                this.AcceptedConditions = [];
                this.Path = [];
                this['_key'] = this.Id = 0;
            }
            Shipment.Get_AverageVolume = function ($this) {
                return Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return $this.Path.linq.sum(function (a) { return Joove.Common.nullSafe(function () { return a.CurrentLoad; }, 0); }); }, 0)) / Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return $this.Path.length; }, 0)))) / Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return $this.TotalVolume; }, 0));
            };
            Shipment.Get_CurrentStatus = function ($this) {
                if ((Joove.Common.nullSafe(function () { return $this.ShipmentStatus.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.TimeReported; }, new Date('1753-01-01')); }).toArray().linq.where().firstOrDefault(null); }, null) != null && Joove.Common.nullSafe(function () { return $this.ShipmentStatus.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.TimeReported; }, new Date('1753-01-01')); }).toArray().linq.where().firstOrDefault(null).Status; }, null) != null)) {
                    return Joove.Common.nullSafe(function () { return $this.ShipmentStatus.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.TimeReported; }, new Date('1753-01-01')); }).toArray().linq.where().firstOrDefault(null).Status.Description; }, "");
                }
                return null;
            };
            Shipment.GetCostSplit = function ($this, WeightVolume, WeightPoints, WeightPath) {
                return null;
            };
            Shipment.GetVolumeSpread = function ($this) {
                return Joove.Common.nullSafe(function () { return $this.Path.linq.select(function (a) { return Joove.Common.nullSafe(function () { return a.CurrentLoad; }, 0); }).toArray(); }, null);
            };
            Shipment.MaxVolume = function ($this) {
                return Joove.Common.nullSafe(function () { return $this.Path.linq.select(function (a) { return Joove.Common.nullSafe(function () { return a.CurrentLoad; }, 0); }).max(); }, 0);
            };
            Shipment.OrderFits = function ($this, Order) {
                return CLMS.Framework.Number.LessThanOrEqual(function () { return Joove.Common.safeNumber(DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.MaxVolume($this)) + Joove.Common.safeNumber(DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.Get_AggregateVolume(Order)); }, function () { return $this.TotalVolume; });
            };
            Shipment.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Shipment;
        }());
        Shipment.setShippingOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ShippingOrders == null)
                $this.ShippingOrders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ShippingOrders.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removeShippingOrders($this, $this.ShippingOrders[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyShippingOrders($this, copyItems);
        };
        Shipment.addManyShippingOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShippingOrders($this, items[i]);
            }
        };
        Shipment.addShippingOrders = function ($this, item) {
            if ($this.ShippingOrders == null)
                $this.ShippingOrders = [];
            if (item == null || $this.ShippingOrders.indexOf(item) > -1)
                return;
            $this.ShippingOrders.push(item);
            ShippingOrder.addShipment(item, $this);
        };
        Shipment.addRangeShippingOrders = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShippingOrders($this, item); });
        };
        Shipment.removeShippingOrders = function ($this, item) {
            if ($this == null || $this.ShippingOrders == null || $this.ShippingOrders.indexOf(item) === -1)
                return;
            var _index = $this.ShippingOrders.indexOf(item);
            $this.ShippingOrders.splice(_index, 1);
            ShippingOrder.removeShipment(item, $this);
        };
        Shipment.clearShippingOrders = function ($this) {
            $this.ShippingOrders = null;
        };
        Shipment.setShipmentStatus = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ShipmentStatus == null)
                $this.ShipmentStatus = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ShipmentStatus.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removeShipmentStatus($this, $this.ShipmentStatus[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyShipmentStatus($this, copyItems);
        };
        Shipment.addManyShipmentStatus = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShipmentStatus($this, items[i]);
            }
        };
        Shipment.addShipmentStatus = function ($this, item) {
            if ($this.ShipmentStatus == null)
                $this.ShipmentStatus = [];
            if (item == null || $this.ShipmentStatus.indexOf(item) > -1)
                return;
            $this.ShipmentStatus.push(item);
        };
        Shipment.addRangeShipmentStatus = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addShipmentStatus($this, item); });
        };
        Shipment.removeShipmentStatus = function ($this, item) {
            if ($this == null || $this.ShipmentStatus == null || $this.ShipmentStatus.indexOf(item) === -1)
                return;
            var _index = $this.ShipmentStatus.indexOf(item);
            $this.ShipmentStatus.splice(_index, 1);
        };
        Shipment.clearShipmentStatus = function ($this) {
            $this.ShipmentStatus = null;
        };
        Shipment.setDeparturePoint = function ($this, value) {
            var oldValue = $this.DeparturePoint;
            $this.DeparturePoint = value;
            if (value != null) {
            }
        };
        Shipment.setFinalDestination = function ($this, value) {
            var oldValue = $this.FinalDestination;
            $this.FinalDestination = value;
            if (value != null) {
            }
        };
        Shipment.setDriver = function ($this, value) {
            var oldValue = $this.Driver;
            $this.Driver = value;
            if (value != null) {
            }
        };
        Shipment.setOccupiedVolume = function ($this, value) {
            var oldValue = $this.OccupiedVolume;
            $this.OccupiedVolume = value;
            if (value != null) {
            }
        };
        Shipment.setAcceptedConditions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.AcceptedConditions == null)
                $this.AcceptedConditions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.AcceptedConditions.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removeAcceptedConditions($this, $this.AcceptedConditions[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyAcceptedConditions($this, copyItems);
        };
        Shipment.addManyAcceptedConditions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addAcceptedConditions($this, items[i]);
            }
        };
        Shipment.addAcceptedConditions = function ($this, item) {
            if ($this.AcceptedConditions == null)
                $this.AcceptedConditions = [];
            if (item == null || $this.AcceptedConditions.indexOf(item) > -1)
                return;
            $this.AcceptedConditions.push(item);
        };
        Shipment.addRangeAcceptedConditions = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addAcceptedConditions($this, item); });
        };
        Shipment.removeAcceptedConditions = function ($this, item) {
            if ($this == null || $this.AcceptedConditions == null || $this.AcceptedConditions.indexOf(item) === -1)
                return;
            var _index = $this.AcceptedConditions.indexOf(item);
            $this.AcceptedConditions.splice(_index, 1);
        };
        Shipment.clearAcceptedConditions = function ($this) {
            $this.AcceptedConditions = null;
        };
        Shipment.setVehiculeType = function ($this, value) {
            var oldValue = $this.VehiculeType;
            $this.VehiculeType = value;
            if (value != null) {
            }
        };
        Shipment.setPath = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Path == null)
                $this.Path = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Path.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.removePath($this, $this.Path[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addManyPath($this, copyItems);
        };
        Shipment.addManyPath = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addPath($this, items[i]);
            }
        };
        Shipment.addPath = function ($this, item) {
            if ($this.Path == null)
                $this.Path = [];
            if (item == null || $this.Path.indexOf(item) > -1)
                return;
            $this.Path.push(item);
        };
        Shipment.addRangePath = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Shipment.addPath($this, item); });
        };
        Shipment.removePath = function ($this, item) {
            if ($this == null || $this.Path == null || $this.Path.indexOf(item) === -1)
                return;
            var _index = $this.Path.indexOf(item);
            $this.Path.splice(_index, 1);
        };
        Shipment.clearPath = function ($this) {
            $this.Path = null;
        };
        BO.Shipment = Shipment;
        var ShipmentStatus = (function () {
            function ShipmentStatus() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ShipmentStatus";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ShipmentStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ShipmentStatus;
        }());
        ShipmentStatus.setStatus = function ($this, value) {
            var oldValue = $this.Status;
            $this.Status = value;
            if (value != null) {
            }
        };
        BO.ShipmentStatus = ShipmentStatus;
        var Point = (function () {
            function Point() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Point";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Point.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Point;
        }());
        BO.Point = Point;
        var ShippingOrder = (function () {
            function ShippingOrder() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Shipment = [];
                this.StatusEvolution = [];
                this.PlannedVolume = [];
                this.ActualVolume = [];
                this['_key'] = this.Id = 0;
            }
            ShippingOrder.CalculateOrderCost = function ($this) {
                return 1.00;
            };
            ShippingOrder.Get_AggregateLoad = function ($this) {
                var TotalMass = null;
                for (var _ii = 0; _ii < (Joove.Common.nullSafe(function () { return $this.PlannedVolume; }, null) == null ? 0 : Joove.Common.nullSafe(function () { return $this.PlannedVolume; }, null).length); _ii++) {
                    var i = Joove.Common.nullSafe(function () { return $this.PlannedVolume; }, null)[_ii];
                    TotalMass = Joove.Common.safeNumber(TotalMass) + Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return i.Weight; }, 0));
                }
                return TotalMass;
            };
            ShippingOrder.Get_AggregateVolume = function ($this) {
                var TotalVolume = null;
                for (var _ii = 0; _ii < (Joove.Common.nullSafe(function () { return $this.PlannedVolume; }, null) == null ? 0 : Joove.Common.nullSafe(function () { return $this.PlannedVolume; }, null).length); _ii++) {
                    var i = Joove.Common.nullSafe(function () { return $this.PlannedVolume; }, null)[_ii];
                    TotalVolume = Joove.Common.safeNumber(TotalVolume) + Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return i.VolumeComposition.linq.where().firstOrDefault(null).VolumeComponent.StandardVolume; }, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return i.VolumeComposition.linq.where().firstOrDefault(null).Units; }, 0));
                }
                Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Error, "Agregate " + Joove.Common.safeNumber(TotalVolume)); }, null);
                return TotalVolume;
            };
            ShippingOrder.Get_CurrentStatus = function ($this) {
                if ((Joove.Common.nullSafe(function () { return $this.StatusEvolution.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.TimeChanged; }, new Date('1753-01-01')); }).toArray().linq.where().firstOrDefault(null); }, null) != null && Joove.Common.nullSafe(function () { return $this.StatusEvolution.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.TimeChanged; }, new Date('1753-01-01')); }).toArray().linq.where().firstOrDefault(null).Status; }, null) != null)) {
                    return Joove.Common.nullSafe(function () { return $this.StatusEvolution.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.TimeChanged; }, new Date('1753-01-01')); }).toArray().linq.where().firstOrDefault(null).Status.Description; }, "");
                }
                return null;
            };
            ShippingOrder.NewOperation = function ($this) { };
            ShippingOrder.NewOperation1 = function ($this) { };
            ShippingOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ShippingOrder;
        }());
        ShippingOrder.setShipment = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Shipment == null)
                $this.Shipment = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Shipment.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removeShipment($this, $this.Shipment[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyShipment($this, copyItems);
        };
        ShippingOrder.addManyShipment = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addShipment($this, items[i]);
            }
        };
        ShippingOrder.addShipment = function ($this, item) {
            if ($this.Shipment == null)
                $this.Shipment = [];
            if (item == null || $this.Shipment.indexOf(item) > -1)
                return;
            $this.Shipment.push(item);
            Shipment.addShippingOrders(item, $this);
        };
        ShippingOrder.addRangeShipment = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addShipment($this, item); });
        };
        ShippingOrder.removeShipment = function ($this, item) {
            if ($this == null || $this.Shipment == null || $this.Shipment.indexOf(item) === -1)
                return;
            var _index = $this.Shipment.indexOf(item);
            $this.Shipment.splice(_index, 1);
            Shipment.removeShippingOrders(item, $this);
        };
        ShippingOrder.clearShipment = function ($this) {
            $this.Shipment = null;
        };
        ShippingOrder.setDeparturePoint = function ($this, value) {
            var oldValue = $this.DeparturePoint;
            $this.DeparturePoint = value;
            if (value != null) {
            }
        };
        ShippingOrder.setArrivalPoint = function ($this, value) {
            var oldValue = $this.ArrivalPoint;
            $this.ArrivalPoint = value;
            if (value != null) {
            }
        };
        ShippingOrder.setStatusEvolution = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.StatusEvolution == null)
                $this.StatusEvolution = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.StatusEvolution.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removeStatusEvolution($this, $this.StatusEvolution[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyStatusEvolution($this, copyItems);
        };
        ShippingOrder.addManyStatusEvolution = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addStatusEvolution($this, items[i]);
            }
        };
        ShippingOrder.addStatusEvolution = function ($this, item) {
            if ($this.StatusEvolution == null)
                $this.StatusEvolution = [];
            if (item == null || $this.StatusEvolution.indexOf(item) > -1)
                return;
            $this.StatusEvolution.push(item);
        };
        ShippingOrder.addRangeStatusEvolution = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addStatusEvolution($this, item); });
        };
        ShippingOrder.removeStatusEvolution = function ($this, item) {
            if ($this == null || $this.StatusEvolution == null || $this.StatusEvolution.indexOf(item) === -1)
                return;
            var _index = $this.StatusEvolution.indexOf(item);
            $this.StatusEvolution.splice(_index, 1);
        };
        ShippingOrder.clearStatusEvolution = function ($this) {
            $this.StatusEvolution = null;
        };
        ShippingOrder.setParent = function ($this, value) {
            var oldValue = $this.Parent;
            $this.Parent = value;
            if (value != null) {
            }
        };
        ShippingOrder.setPlannedVolume = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PlannedVolume == null)
                $this.PlannedVolume = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PlannedVolume.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removePlannedVolume($this, $this.PlannedVolume[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyPlannedVolume($this, copyItems);
        };
        ShippingOrder.addManyPlannedVolume = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addPlannedVolume($this, items[i]);
            }
        };
        ShippingOrder.addPlannedVolume = function ($this, item) {
            if ($this.PlannedVolume == null)
                $this.PlannedVolume = [];
            if (item == null || $this.PlannedVolume.indexOf(item) > -1)
                return;
            $this.PlannedVolume.push(item);
        };
        ShippingOrder.addRangePlannedVolume = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addPlannedVolume($this, item); });
        };
        ShippingOrder.removePlannedVolume = function ($this, item) {
            if ($this == null || $this.PlannedVolume == null || $this.PlannedVolume.indexOf(item) === -1)
                return;
            var _index = $this.PlannedVolume.indexOf(item);
            $this.PlannedVolume.splice(_index, 1);
        };
        ShippingOrder.clearPlannedVolume = function ($this) {
            $this.PlannedVolume = null;
        };
        ShippingOrder.setActualVolume = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ActualVolume == null)
                $this.ActualVolume = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ActualVolume.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.removeActualVolume($this, $this.ActualVolume[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addManyActualVolume($this, copyItems);
        };
        ShippingOrder.addManyActualVolume = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addActualVolume($this, items[i]);
            }
        };
        ShippingOrder.addActualVolume = function ($this, item) {
            if ($this.ActualVolume == null)
                $this.ActualVolume = [];
            if (item == null || $this.ActualVolume.indexOf(item) > -1)
                return;
            $this.ActualVolume.push(item);
        };
        ShippingOrder.addRangeActualVolume = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder.addActualVolume($this, item); });
        };
        ShippingOrder.removeActualVolume = function ($this, item) {
            if ($this == null || $this.ActualVolume == null || $this.ActualVolume.indexOf(item) === -1)
                return;
            var _index = $this.ActualVolume.indexOf(item);
            $this.ActualVolume.splice(_index, 1);
        };
        ShippingOrder.clearActualVolume = function ($this) {
            $this.ActualVolume = null;
        };
        ShippingOrder.setItemType = function ($this, value) {
            var oldValue = $this.ItemType;
            $this.ItemType = value;
            if (value != null) {
            }
        };
        BO.ShippingOrder = ShippingOrder;
        var StatusEvolution = (function () {
            function StatusEvolution() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StatusEvolution";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            StatusEvolution.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return StatusEvolution;
        }());
        StatusEvolution.setStatus = function ($this, value) {
            var oldValue = $this.Status;
            $this.Status = value;
            if (value != null) {
            }
        };
        BO.StatusEvolution = StatusEvolution;
        var Volume = (function () {
            function Volume() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Volume";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Volume.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Volume;
        }());
        Volume.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        BO.Volume = Volume;
        var ItemType = (function () {
            function ItemType() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ItemType";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ItemType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ItemType;
        }());
        BO.ItemType = ItemType;
        var Priority = (function () {
            function Priority() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Priority";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Priority.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Priority;
        }());
        BO.Priority = Priority;
        var Status = (function () {
            function Status() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Status";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Status.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Status;
        }());
        BO.Status = Status;
        var Location = (function () {
            function Location() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Location";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Driver = [];
                this['_key'] = this.Id = 0;
            }
            Location.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Location;
        }());
        Location.setDriver = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Driver == null)
                $this.Driver = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Driver.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Location.removeDriver($this, $this.Driver[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Location.addManyDriver($this, copyItems);
        };
        Location.addManyDriver = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Location.addDriver($this, items[i]);
            }
        };
        Location.addDriver = function ($this, item) {
            if ($this.Driver == null)
                $this.Driver = [];
            if (item == null || $this.Driver.indexOf(item) > -1)
                return;
            $this.Driver.push(item);
            if (item.Employer != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Driver.setEmployer(item, $this);
            }
        };
        Location.addRangeDriver = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Location.addDriver($this, item); });
        };
        Location.removeDriver = function ($this, item) {
            if ($this == null || $this.Driver == null || $this.Driver.indexOf(item) === -1)
                return;
            var _index = $this.Driver.indexOf(item);
            $this.Driver.splice(_index, 1);
            item.Employer = null;
        };
        Location.clearDriver = function ($this) {
            $this.Driver = null;
        };
        Location.setCoordinates = function ($this, value) {
            var oldValue = $this.Coordinates;
            $this.Coordinates = value;
            if (value != null) {
            }
        };
        BO.Location = Location;
        var Coordinates = (function () {
            function Coordinates() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Coordinates";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Coordinates.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Coordinates;
        }());
        BO.Coordinates = Coordinates;
        var Reason = (function () {
            function Reason() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Reason";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Reason.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Reason;
        }());
        BO.Reason = Reason;
        var Condition = (function () {
            function Condition() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Condition";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Condition.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Condition;
        }());
        BO.Condition = Condition;
        var LegVolumeDetails = (function () {
            function LegVolumeDetails() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.LegVolumeDetails";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            LegVolumeDetails.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return LegVolumeDetails;
        }());
        LegVolumeDetails.setOrigin = function ($this, value) {
            var oldValue = $this.Origin;
            $this.Origin = value;
            if (value != null) {
            }
        };
        LegVolumeDetails.setDestination = function ($this, value) {
            var oldValue = $this.Destination;
            $this.Destination = value;
            if (value != null) {
            }
        };
        BO.LegVolumeDetails = LegVolumeDetails;
        var PathVolumeDetail = (function () {
            function PathVolumeDetail() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Legs = [];
                this['_key'] = this.Id = 0;
            }
            PathVolumeDetail.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PathVolumeDetail;
        }());
        PathVolumeDetail.setLegs = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Legs == null)
                $this.Legs = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Legs.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.removeLegs($this, $this.Legs[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.addManyLegs($this, copyItems);
        };
        PathVolumeDetail.addManyLegs = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.addLegs($this, items[i]);
            }
        };
        PathVolumeDetail.addLegs = function ($this, item) {
            if ($this.Legs == null)
                $this.Legs = [];
            if (item == null || $this.Legs.indexOf(item) > -1)
                return;
            $this.Legs.push(item);
        };
        PathVolumeDetail.addRangeLegs = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail.addLegs($this, item); });
        };
        PathVolumeDetail.removeLegs = function ($this, item) {
            if ($this == null || $this.Legs == null || $this.Legs.indexOf(item) === -1)
                return;
            var _index = $this.Legs.indexOf(item);
            $this.Legs.splice(_index, 1);
        };
        PathVolumeDetail.clearLegs = function ($this) {
            $this.Legs = null;
        };
        PathVolumeDetail.setShipment = function ($this, value) {
            var oldValue = $this.Shipment;
            $this.Shipment = value;
            if (value != null) {
            }
        };
        BO.PathVolumeDetail = PathVolumeDetail;
        var CostSplit = (function () {
            function CostSplit() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Orders = [];
                this['_key'] = this.Id = 0;
            }
            CostSplit.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CostSplit;
        }());
        CostSplit.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.removeOrders($this, $this.Orders[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.addManyOrders($this, copyItems);
        };
        CostSplit.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.addOrders($this, items[i]);
            }
        };
        CostSplit.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
        };
        CostSplit.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.CostSplit.addOrders($this, item); });
        };
        CostSplit.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
        };
        CostSplit.clearOrders = function ($this) {
            $this.Orders = null;
        };
        BO.CostSplit = CostSplit;
        var StatusRule = (function () {
            function StatusRule() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StatusRule";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            StatusRule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return StatusRule;
        }());
        StatusRule.setStatus = function ($this, value) {
            var oldValue = $this.Status;
            $this.Status = value;
            if (value != null) {
            }
        };
        StatusRule.setForcedStatus = function ($this, value) {
            var oldValue = $this.ForcedStatus;
            $this.ForcedStatus = value;
            if (value != null) {
            }
        };
        BO.StatusRule = StatusRule;
        var Vehicule = (function () {
            function Vehicule() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Vehicule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Vehicule;
        }());
        Vehicule.setDistanceCosts = function ($this, value) {
            var oldValue = $this.DistanceCosts;
            $this.DistanceCosts = value;
            if (value != null) {
            }
        };
        Vehicule.setTimeCosts = function ($this, value) {
            var oldValue = $this.TimeCosts;
            $this.TimeCosts = value;
            if (value != null) {
            }
        };
        Vehicule.setOwnershipCost = function ($this, value) {
            var oldValue = $this.OwnershipCost;
            $this.OwnershipCost = value;
            if (value != null) {
                if (oldValue != null && oldValue.Vehicule != null) {
                    oldValue.Vehicule = null;
                }
                if ($this.OwnershipCost.Vehicule !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost.setVehicule(value, $this);
                }
            }
        };
        Vehicule.setAmortizationType1 = function ($this, value) {
            var oldValue = $this.AmortizationType1;
            $this.AmortizationType1 = value;
            if (value != null) {
            }
        };
        BO.Vehicule = Vehicule;
        var DistanceCosts = (function () {
            function DistanceCosts() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.PropulsionTypeCost = [];
                this['_key'] = this.Id = 0;
            }
            DistanceCosts.SetCost = function ($this, Cost) {
                $this.Cost = Cost;
            };
            DistanceCosts.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DistanceCosts;
        }());
        DistanceCosts.setPropulsionTypeCost = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PropulsionTypeCost == null)
                $this.PropulsionTypeCost = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PropulsionTypeCost.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.removePropulsionTypeCost($this, $this.PropulsionTypeCost[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.addManyPropulsionTypeCost($this, copyItems);
        };
        DistanceCosts.addManyPropulsionTypeCost = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.addPropulsionTypeCost($this, items[i]);
            }
        };
        DistanceCosts.addPropulsionTypeCost = function ($this, item) {
            if ($this.PropulsionTypeCost == null)
                $this.PropulsionTypeCost = [];
            if (item == null || $this.PropulsionTypeCost.indexOf(item) > -1)
                return;
            $this.PropulsionTypeCost.push(item);
        };
        DistanceCosts.addRangePropulsionTypeCost = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts.addPropulsionTypeCost($this, item); });
        };
        DistanceCosts.removePropulsionTypeCost = function ($this, item) {
            if ($this == null || $this.PropulsionTypeCost == null || $this.PropulsionTypeCost.indexOf(item) === -1)
                return;
            var _index = $this.PropulsionTypeCost.indexOf(item);
            $this.PropulsionTypeCost.splice(_index, 1);
        };
        DistanceCosts.clearPropulsionTypeCost = function ($this) {
            $this.PropulsionTypeCost = null;
        };
        BO.DistanceCosts = DistanceCosts;
        var TimeCosts = (function () {
            function TimeCosts() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TimeCosts";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            TimeCosts.SetCost = function ($this, Cost) {
                $this.Cost = Cost;
            };
            TimeCosts.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return TimeCosts;
        }());
        BO.TimeCosts = TimeCosts;
        var OwnershipCost = (function () {
            function OwnershipCost() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OwnershipCost.SetCost = function ($this, Cost) {
                $this.Cost = Cost;
            };
            OwnershipCost.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OwnershipCost;
        }());
        OwnershipCost.setVehicule = function ($this, value) {
            var oldValue = $this.Vehicule;
            $this.Vehicule = value;
            if (value != null) {
                if (oldValue != null && oldValue.OwnershipCost != null) {
                    oldValue.OwnershipCost = null;
                }
                if ($this.Vehicule.OwnershipCost !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule.setOwnershipCost(value, $this);
                }
            }
        };
        BO.OwnershipCost = OwnershipCost;
        var PropulsionTypeCost = (function () {
            function PropulsionTypeCost() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PropulsionTypeCost";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            PropulsionTypeCost.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PropulsionTypeCost;
        }());
        PropulsionTypeCost.setOilType = function ($this, value) {
            var oldValue = $this.OilType;
            $this.OilType = value;
            if (value != null) {
            }
        };
        BO.PropulsionTypeCost = PropulsionTypeCost;
        var OilType = (function () {
            function OilType() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OilType";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OilType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OilType;
        }());
        BO.OilType = OilType;
        var AmortizationType = (function () {
            function AmortizationType() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AmortizationType";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AmortizationType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AmortizationType;
        }());
        BO.AmortizationType = AmortizationType;
        var VolumePerShipper = (function () {
            function VolumePerShipper() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.VolumePerShipper";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            VolumePerShipper.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return VolumePerShipper;
        }());
        BO.VolumePerShipper = VolumePerShipper;
        var CO2PerCarrier = (function () {
            function CO2PerCarrier() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.CO2PerCarrier";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            CO2PerCarrier.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CO2PerCarrier;
        }());
        BO.CO2PerCarrier = CO2PerCarrier;
        var CustomVolume = (function () {
            function CustomVolume() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.VolumeComposition = [];
                this['_key'] = this.Id = 0;
            }
            CustomVolume.Compare = function ($this, Volume) {
                var compare = 0;
                for (var i = 0; CLMS.Framework.Number.LessThan(function () { return i; }, function () { return $this.VolumeComposition.length; }); i = Joove.Common.safeNumber(i) + Joove.Common.safeNumber(1)) {
                    if ((CLMS.Framework.Number.NotEqual(function () { return $this.VolumeComposition[i].Units; }, function () { return Volume.VolumeComposition[i].Units; }))) {
                        compare = Joove.Common.safeNumber(compare) + Joove.Common.safeNumber(1);
                    }
                }
                return compare;
            };
            CustomVolume.CustomCopy = function ($this) {
                var returnVolume = Joove.Common.nullSafe(function () { return new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume(); }, null);
                returnVolume.Label = Joove.Common.nullSafe(function () { return $this.Label; }, "");
                returnVolume.Weight = Joove.Common.nullSafe(function () { return $this.Weight; }, 0);
                var _loop_1 = function (_ij) {
                    j = Joove.Common.nullSafe(function () { return $this.VolumeComposition; }, null)[_ij];
                    var currentVolume = Joove.Common.nullSafe(function () { return new DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition(); }, null);
                    currentVolume.Units = Joove.Common.nullSafe(function () { return j.Units; }, 0);
                    DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition.setVolumeComponent(currentVolume, Joove.Common.nullSafe(function () { return j.VolumeComponent; }, null));
                    Joove.Common.nullSafe(function () { return returnVolume.VolumeComposition.add(currentVolume); }, null);
                };
                var j;
                for (var _ij = 0; _ij < (Joove.Common.nullSafe(function () { return $this.VolumeComposition; }, null) == null ? 0 : Joove.Common.nullSafe(function () { return $this.VolumeComposition; }, null).length); _ij++) {
                    _loop_1(_ij);
                }
                return returnVolume;
            };
            CustomVolume.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CustomVolume;
        }());
        CustomVolume.setVolumeComposition = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.VolumeComposition == null)
                $this.VolumeComposition = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.VolumeComposition.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.removeVolumeComposition($this, $this.VolumeComposition[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.addManyVolumeComposition($this, copyItems);
        };
        CustomVolume.addManyVolumeComposition = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.addVolumeComposition($this, items[i]);
            }
        };
        CustomVolume.addVolumeComposition = function ($this, item) {
            if ($this.VolumeComposition == null)
                $this.VolumeComposition = [];
            if (item == null || $this.VolumeComposition.indexOf(item) > -1)
                return;
            $this.VolumeComposition.push(item);
        };
        CustomVolume.addRangeVolumeComposition = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume.addVolumeComposition($this, item); });
        };
        CustomVolume.removeVolumeComposition = function ($this, item) {
            if ($this == null || $this.VolumeComposition == null || $this.VolumeComposition.indexOf(item) === -1)
                return;
            var _index = $this.VolumeComposition.indexOf(item);
            $this.VolumeComposition.splice(_index, 1);
        };
        CustomVolume.clearVolumeComposition = function ($this) {
            $this.VolumeComposition = null;
        };
        BO.CustomVolume = CustomVolume;
        var VolumeComponent = (function () {
            function VolumeComponent() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComponent";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            VolumeComponent.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return VolumeComponent;
        }());
        BO.VolumeComponent = VolumeComponent;
        var VolumeComposition = (function () {
            function VolumeComposition() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            VolumeComposition.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return VolumeComposition;
        }());
        VolumeComposition.setVolumeComponent = function ($this, value) {
            var oldValue = $this.VolumeComponent;
            $this.VolumeComponent = value;
            if (value != null) {
            }
        };
        BO.VolumeComposition = VolumeComposition;
        var Solution = (function () {
            function Solution() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Solution";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Routes = [];
                this['_key'] = this.Id = 0;
            }
            Solution.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Solution;
        }());
        Solution.setRoutes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Routes == null)
                $this.Routes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Routes.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Solution.removeRoutes($this, $this.Routes[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Solution.addManyRoutes($this, copyItems);
        };
        Solution.addManyRoutes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Solution.addRoutes($this, items[i]);
            }
        };
        Solution.addRoutes = function ($this, item) {
            if ($this.Routes == null)
                $this.Routes = [];
            if (item == null || $this.Routes.indexOf(item) > -1)
                return;
            $this.Routes.push(item);
        };
        Solution.addRangeRoutes = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Solution.addRoutes($this, item); });
        };
        Solution.removeRoutes = function ($this, item) {
            if ($this == null || $this.Routes == null || $this.Routes.indexOf(item) === -1)
                return;
            var _index = $this.Routes.indexOf(item);
            $this.Routes.splice(_index, 1);
        };
        Solution.clearRoutes = function ($this) {
            $this.Routes = null;
        };
        BO.Solution = Solution;
        var Route = (function () {
            function Route() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Route";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Activities = [];
                this['_key'] = this.Id = 0;
            }
            Route.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Route;
        }());
        Route.setVehicule = function ($this, value) {
            var oldValue = $this.Vehicule;
            $this.Vehicule = value;
            if (value != null) {
            }
        };
        Route.setActivities = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Activities == null)
                $this.Activities = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Activities.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Route.removeActivities($this, $this.Activities[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Route.addManyActivities($this, copyItems);
        };
        Route.addManyActivities = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Route.addActivities($this, items[i]);
            }
        };
        Route.addActivities = function ($this, item) {
            if ($this.Activities == null)
                $this.Activities = [];
            if (item == null || $this.Activities.indexOf(item) > -1)
                return;
            $this.Activities.push(item);
        };
        Route.addRangeActivities = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Route.addActivities($this, item); });
        };
        Route.removeActivities = function ($this, item) {
            if ($this == null || $this.Activities == null || $this.Activities.indexOf(item) === -1)
                return;
            var _index = $this.Activities.indexOf(item);
            $this.Activities.splice(_index, 1);
        };
        Route.clearActivities = function ($this) {
            $this.Activities = null;
        };
        BO.Route = Route;
        var Activity = (function () {
            function Activity() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Activity";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Activity.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Activity;
        }());
        Activity.setOrder = function ($this, value) {
            var oldValue = $this.Order;
            $this.Order = value;
            if (value != null) {
            }
        };
        Activity.setPoint = function ($this, value) {
            var oldValue = $this.Point;
            $this.Point = value;
            if (value != null) {
            }
        };
        BO.Activity = Activity;
        var OrderDTO = (function () {
            function OrderDTO() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderDTO";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.OrderDTOKey = 0;
            }
            OrderDTO.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.OrderDTOKey == null || $this.OrderDTOKey == 0;
            };
            return OrderDTO;
        }());
        BO.OrderDTO = OrderDTO;
        var OrderStatistics = (function () {
            function OrderStatistics() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderStatistics";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OrderStatistics.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderStatistics;
        }());
        BO.OrderStatistics = OrderStatistics;
        var LSP = (function () {
            function LSP() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.LSP";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.LSPUsers = [];
                this.PrivateTemplates = [];
                this.WorkContracts = [];
                this['_key'] = this.Id = 0;
            }
            LSP.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return LSP;
        }());
        LSP.setLSPUsers = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.LSPUsers == null)
                $this.LSPUsers = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.LSPUsers.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeLSPUsers($this, $this.LSPUsers[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addManyLSPUsers($this, copyItems);
        };
        LSP.addManyLSPUsers = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addLSPUsers($this, items[i]);
            }
        };
        LSP.addLSPUsers = function ($this, item) {
            if ($this.LSPUsers == null)
                $this.LSPUsers = [];
            if (item == null || $this.LSPUsers.indexOf(item) > -1)
                return;
            $this.LSPUsers.push(item);
            if (item.LSP != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser.setLSP(item, $this);
            }
        };
        LSP.addRangeLSPUsers = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addLSPUsers($this, item); });
        };
        LSP.removeLSPUsers = function ($this, item) {
            if ($this == null || $this.LSPUsers == null || $this.LSPUsers.indexOf(item) === -1)
                return;
            var _index = $this.LSPUsers.indexOf(item);
            $this.LSPUsers.splice(_index, 1);
            item.LSP = null;
        };
        LSP.clearLSPUsers = function ($this) {
            $this.LSPUsers = null;
        };
        LSP.setPrivateTemplates = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PrivateTemplates == null)
                $this.PrivateTemplates = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PrivateTemplates.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removePrivateTemplates($this, $this.PrivateTemplates[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addManyPrivateTemplates($this, copyItems);
        };
        LSP.addManyPrivateTemplates = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addPrivateTemplates($this, items[i]);
            }
        };
        LSP.addPrivateTemplates = function ($this, item) {
            if ($this.PrivateTemplates == null)
                $this.PrivateTemplates = [];
            if (item == null || $this.PrivateTemplates.indexOf(item) > -1)
                return;
            $this.PrivateTemplates.push(item);
            ScheduledRouteTemplate.addVisibleTo(item, $this);
        };
        LSP.addRangePrivateTemplates = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addPrivateTemplates($this, item); });
        };
        LSP.removePrivateTemplates = function ($this, item) {
            if ($this == null || $this.PrivateTemplates == null || $this.PrivateTemplates.indexOf(item) === -1)
                return;
            var _index = $this.PrivateTemplates.indexOf(item);
            $this.PrivateTemplates.splice(_index, 1);
            ScheduledRouteTemplate.removeVisibleTo(item, $this);
        };
        LSP.clearPrivateTemplates = function ($this) {
            $this.PrivateTemplates = null;
        };
        LSP.setWorkContracts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.WorkContracts == null)
                $this.WorkContracts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.WorkContracts.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeWorkContracts($this, $this.WorkContracts[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addManyWorkContracts($this, copyItems);
        };
        LSP.addManyWorkContracts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addWorkContracts($this, items[i]);
            }
        };
        LSP.addWorkContracts = function ($this, item) {
            if ($this.WorkContracts == null)
                $this.WorkContracts = [];
            if (item == null || $this.WorkContracts.indexOf(item) > -1)
                return;
            $this.WorkContracts.push(item);
            if (item.LSP != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.setLSP(item, $this);
            }
        };
        LSP.addRangeWorkContracts = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addWorkContracts($this, item); });
        };
        LSP.removeWorkContracts = function ($this, item) {
            if ($this == null || $this.WorkContracts == null || $this.WorkContracts.indexOf(item) === -1)
                return;
            var _index = $this.WorkContracts.indexOf(item);
            $this.WorkContracts.splice(_index, 1);
            item.LSP = null;
        };
        LSP.clearWorkContracts = function ($this) {
            $this.WorkContracts = null;
        };
        BO.LSP = LSP;
        var OrderWMS = (function () {
            function OrderWMS() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OrderWMS.AssignOrdersTrucks = function () { };
            OrderWMS.CopyFields = function ($this, order) {
                $this.OrdID = Joove.Common.nullSafe(function () { return order.OrdID; }, 0);
                $this.OrdOrderID_Remote = Joove.Common.nullSafe(function () { return order.OrdOrderID_Remote; }, 0);
                $this.OrdOrderExternalCode = Joove.Common.nullSafe(function () { return order.OrdOrderExternalCode; }, "");
                $this.OrdOrderDescr = Joove.Common.nullSafe(function () { return order.OrdOrderDescr; }, "");
                $this.OrdRegDateTime = Joove.Common.nullSafe(function () { return order.OrdRegDateTime; }, new Date('1753-01-01'));
                $this.OrdDateTime = Joove.Common.nullSafe(function () { return order.OrdDateTime; }, new Date('1753-01-01'));
                $this.OrdDeliveryDateTime = Joove.Common.nullSafe(function () { return order.OrdDeliveryDateTime; }, new Date('1753-01-01'));
                $this.OrdDepositorCode = Joove.Common.nullSafe(function () { return order.OrdDepositorCode; }, "");
                $this.OrdDepositorFullName = Joove.Common.nullSafe(function () { return order.OrdDepositorFullName; }, "");
                $this.OrdCustomerCode = Joove.Common.nullSafe(function () { return order.OrdCustomerCode; }, "");
                $this.OrdCustomerFullName = Joove.Common.nullSafe(function () { return order.OrdCustomerFullName; }, "");
                $this.OrdStatus = Joove.Common.nullSafe(function () { return order.OrdStatus; }, 0);
                $this.OrdMemo = Joove.Common.nullSafe(function () { return order.OrdMemo; }, "");
                $this.OrdPurpose = Joove.Common.nullSafe(function () { return order.OrdPurpose; }, "");
                $this.OrdDeliveryValue = Joove.Common.nullSafe(function () { return order.OrdDeliveryValue; }, 0);
                $this.OrdDeliveryNotes = Joove.Common.nullSafe(function () { return order.OrdDeliveryNotes; }, "");
                $this.OrdIsReturn = Joove.Common.nullSafe(function () { return order.OrdIsReturn; }, 0);
                $this.OrdPrdTypeDescr = Joove.Common.nullSafe(function () { return order.OrdPrdTypeDescr; }, "");
                $this.OrdWrhRoutingCode = Joove.Common.nullSafe(function () { return order.OrdWrhRoutingCode; }, "");
                $this.OrdDlsId = Joove.Common.nullSafe(function () { return order.OrdDlsId; }, 0);
                $this.OrdDlsDescr = Joove.Common.nullSafe(function () { return order.OrdDlsDescr; }, "");
                $this.OrdDlsAddress = Joove.Common.nullSafe(function () { return order.OrdDlsAddress; }, "");
                $this.OrdDlsCity = Joove.Common.nullSafe(function () { return order.OrdDlsCity; }, "");
                $this.OrdDlsArea = Joove.Common.nullSafe(function () { return order.OrdDlsArea; }, "");
                $this.OrdRoutingStatus = Joove.Common.nullSafe(function () { return order.OrdRoutingStatus; }, 0);
                $this.OrdLfdWeight = Joove.Common.nullSafe(function () { return order.OrdLfdWeight; }, 0);
                $this.OrdLfdVol = Joove.Common.nullSafe(function () { return order.OrdLfdVol; }, 0);
                $this.OrdLfdCtn = Joove.Common.nullSafe(function () { return order.OrdLfdCtn; }, 0);
                $this.OrdLfdCtn = Joove.Common.nullSafe(function () { return order.OrdLfdCtn; }, 0);
                $this.OrdLfdBar = Joove.Common.nullSafe(function () { return order.OrdLfdBar; }, 0);
                $this.OrdLfdPalEuro = Joove.Common.nullSafe(function () { return order.OrdLfdPalEuro; }, 0);
                $this.OrdLfdPalInd = Joove.Common.nullSafe(function () { return order.OrdLfdPalInd; }, 0);
                $this.OrdLfdPalElsa = Joove.Common.nullSafe(function () { return order.OrdLfdPalElsa; }, 0);
                $this.OrdLfdParOU = Joove.Common.nullSafe(function () { return order.OrdLfdParOU; }, 0);
                $this.OrdLfdVar = Joove.Common.nullSafe(function () { return order.OrdLfdVar; }, 0);
                $this.OrdVoucherDateTime = Joove.Common.nullSafe(function () { return order.OrdVoucherDateTime; }, new Date('1753-01-01'));
                $this.OrdVoucherNumber = Joove.Common.nullSafe(function () { return order.OrdVoucherNumber; }, "");
                $this.OrdVoucherSeries = Joove.Common.nullSafe(function () { return order.OrdVoucherSeries; }, "");
                $this.OrdVoucherId = Joove.Common.nullSafe(function () { return order.OrdVoucherId; }, 0);
                $this.OrdAgencyCode = Joove.Common.nullSafe(function () { return order.OrdAgencyCode; }, "");
                $this.OrdAgencyAddress = Joove.Common.nullSafe(function () { return order.OrdAgencyAddress; }, "");
                $this.OrdAgencyDescr = Joove.Common.nullSafe(function () { return order.OrdAgencyDescr; }, "");
                $this.OrdTelRouteId = Joove.Common.nullSafe(function () { return order.OrdTelRouteId; }, 0);
                $this.OrdVchPlateNr = Joove.Common.nullSafe(function () { return order.OrdVchPlateNr; }, "");
                $this.OrdVchRouteNr = Joove.Common.nullSafe(function () { return order.OrdVchRouteNr; }, 0);
                $this.OrdVhrDate = Joove.Common.nullSafe(function () { return order.OrdVhrDate; }, new Date('1753-01-01'));
                $this.OrdVhrID = Joove.Common.nullSafe(function () { return order.OrdVhrID; }, 0);
                $this.OrdLastUpdateDateTime = Joove.Common.nullSafe(function () { return order.OrdLastUpdateDateTime; }, new Date('1753-01-01'));
                $this.OrdReadyForLoading = Joove.Common.nullSafe(function () { return order.OrdReadyForLoading; }, 0);
                $this.Polyline = Joove.Common.nullSafe(function () { return order.Polyline; }, "");
                $this.Warehouse = Joove.Common.nullSafe(function () { return order.Warehouse; }, "");
                $this.Truck = Joove.Common.nullSafe(function () { return order.Truck; }, "");
            };
            OrderWMS.NewOperation = function ($this) { };
            OrderWMS.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderWMS;
        }());
        OrderWMS.setProofOfDelivery = function ($this, value) {
            var oldValue = $this.ProofOfDelivery;
            $this.ProofOfDelivery = value;
            if (value != null) {
                if (oldValue != null && oldValue.OrderWMS != null) {
                    oldValue.OrderWMS = null;
                }
                if ($this.ProofOfDelivery.OrderWMS !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery.setOrderWMS(value, $this);
                }
            }
        };
        BO.OrderWMS = OrderWMS;
        var ProofOfDelivery = (function () {
            function ProofOfDelivery() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ProofOfDelivery.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProofOfDelivery;
        }());
        ProofOfDelivery.setTruckDriver = function ($this, value) {
            var oldValue = $this.TruckDriver;
            $this.TruckDriver = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.removeProofOfDelivery(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addProofOfDelivery(value, $this);
            }
        };
        ProofOfDelivery.setOrderWMS = function ($this, value) {
            var oldValue = $this.OrderWMS;
            $this.OrderWMS = value;
            if (value != null) {
                if (oldValue != null && oldValue.ProofOfDelivery != null) {
                    oldValue.ProofOfDelivery = null;
                }
                if ($this.OrderWMS.ProofOfDelivery !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS.setProofOfDelivery(value, $this);
                }
            }
        };
        BO.ProofOfDelivery = ProofOfDelivery;
        var RegionalAgent = (function () {
            function RegionalAgent() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.WarehousesSupport = [];
                this.RAUsers = [];
                this.AreaSupport = [];
                this.Trucks = [];
                this.ScheduledRouteTemplates = [];
                this.WorkContract = [];
                this['_key'] = this.Id = 0;
            }
            RegionalAgent.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return RegionalAgent;
        }());
        RegionalAgent.setWarehousesSupport = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.WarehousesSupport == null)
                $this.WarehousesSupport = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.WarehousesSupport.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeWarehousesSupport($this, $this.WarehousesSupport[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyWarehousesSupport($this, copyItems);
        };
        RegionalAgent.addManyWarehousesSupport = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWarehousesSupport($this, items[i]);
            }
        };
        RegionalAgent.addWarehousesSupport = function ($this, item) {
            if ($this.WarehousesSupport == null)
                $this.WarehousesSupport = [];
            if (item == null || $this.WarehousesSupport.indexOf(item) > -1)
                return;
            $this.WarehousesSupport.push(item);
            Warehouse.addRegionalAgentsService(item, $this);
        };
        RegionalAgent.addRangeWarehousesSupport = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWarehousesSupport($this, item); });
        };
        RegionalAgent.removeWarehousesSupport = function ($this, item) {
            if ($this == null || $this.WarehousesSupport == null || $this.WarehousesSupport.indexOf(item) === -1)
                return;
            var _index = $this.WarehousesSupport.indexOf(item);
            $this.WarehousesSupport.splice(_index, 1);
            Warehouse.removeRegionalAgentsService(item, $this);
        };
        RegionalAgent.clearWarehousesSupport = function ($this) {
            $this.WarehousesSupport = null;
        };
        RegionalAgent.setRAUsers = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.RAUsers == null)
                $this.RAUsers = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.RAUsers.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeRAUsers($this, $this.RAUsers[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyRAUsers($this, copyItems);
        };
        RegionalAgent.addManyRAUsers = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addRAUsers($this, items[i]);
            }
        };
        RegionalAgent.addRAUsers = function ($this, item) {
            if ($this.RAUsers == null)
                $this.RAUsers = [];
            if (item == null || $this.RAUsers.indexOf(item) > -1)
                return;
            $this.RAUsers.push(item);
            if (item.RegionalAgent != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser.setRegionalAgent(item, $this);
            }
        };
        RegionalAgent.addRangeRAUsers = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addRAUsers($this, item); });
        };
        RegionalAgent.removeRAUsers = function ($this, item) {
            if ($this == null || $this.RAUsers == null || $this.RAUsers.indexOf(item) === -1)
                return;
            var _index = $this.RAUsers.indexOf(item);
            $this.RAUsers.splice(_index, 1);
            item.RegionalAgent = null;
        };
        RegionalAgent.clearRAUsers = function ($this) {
            $this.RAUsers = null;
        };
        RegionalAgent.setAddressCoordinates = function ($this, value) {
            var oldValue = $this.AddressCoordinates;
            $this.AddressCoordinates = value;
            if (value != null) {
            }
        };
        RegionalAgent.setAreaSupport = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.AreaSupport == null)
                $this.AreaSupport = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.AreaSupport.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeAreaSupport($this, $this.AreaSupport[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyAreaSupport($this, copyItems);
        };
        RegionalAgent.addManyAreaSupport = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addAreaSupport($this, items[i]);
            }
        };
        RegionalAgent.addAreaSupport = function ($this, item) {
            if ($this.AreaSupport == null)
                $this.AreaSupport = [];
            if (item == null || $this.AreaSupport.indexOf(item) > -1)
                return;
            $this.AreaSupport.push(item);
        };
        RegionalAgent.addRangeAreaSupport = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addAreaSupport($this, item); });
        };
        RegionalAgent.removeAreaSupport = function ($this, item) {
            if ($this == null || $this.AreaSupport == null || $this.AreaSupport.indexOf(item) === -1)
                return;
            var _index = $this.AreaSupport.indexOf(item);
            $this.AreaSupport.splice(_index, 1);
        };
        RegionalAgent.clearAreaSupport = function ($this) {
            $this.AreaSupport = null;
        };
        RegionalAgent.setTrucks = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Trucks == null)
                $this.Trucks = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Trucks.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeTrucks($this, $this.Trucks[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyTrucks($this, copyItems);
        };
        RegionalAgent.addManyTrucks = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addTrucks($this, items[i]);
            }
        };
        RegionalAgent.addTrucks = function ($this, item) {
            if ($this.Trucks == null)
                $this.Trucks = [];
            if (item == null || $this.Trucks.indexOf(item) > -1)
                return;
            $this.Trucks.push(item);
            if (item.RegionalAgent != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Truck.setRegionalAgent(item, $this);
            }
        };
        RegionalAgent.addRangeTrucks = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addTrucks($this, item); });
        };
        RegionalAgent.removeTrucks = function ($this, item) {
            if ($this == null || $this.Trucks == null || $this.Trucks.indexOf(item) === -1)
                return;
            var _index = $this.Trucks.indexOf(item);
            $this.Trucks.splice(_index, 1);
            item.RegionalAgent = null;
        };
        RegionalAgent.clearTrucks = function ($this) {
            $this.Trucks = null;
        };
        RegionalAgent.setScheduledRouteTemplates = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ScheduledRouteTemplates == null)
                $this.ScheduledRouteTemplates = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ScheduledRouteTemplates.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeScheduledRouteTemplates($this, $this.ScheduledRouteTemplates[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyScheduledRouteTemplates($this, copyItems);
        };
        RegionalAgent.addManyScheduledRouteTemplates = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addScheduledRouteTemplates($this, items[i]);
            }
        };
        RegionalAgent.addScheduledRouteTemplates = function ($this, item) {
            if ($this.ScheduledRouteTemplates == null)
                $this.ScheduledRouteTemplates = [];
            if (item == null || $this.ScheduledRouteTemplates.indexOf(item) > -1)
                return;
            $this.ScheduledRouteTemplates.push(item);
            if (item.Owner != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.setOwner(item, $this);
            }
        };
        RegionalAgent.addRangeScheduledRouteTemplates = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addScheduledRouteTemplates($this, item); });
        };
        RegionalAgent.removeScheduledRouteTemplates = function ($this, item) {
            if ($this == null || $this.ScheduledRouteTemplates == null || $this.ScheduledRouteTemplates.indexOf(item) === -1)
                return;
            var _index = $this.ScheduledRouteTemplates.indexOf(item);
            $this.ScheduledRouteTemplates.splice(_index, 1);
            item.Owner = null;
        };
        RegionalAgent.clearScheduledRouteTemplates = function ($this) {
            $this.ScheduledRouteTemplates = null;
        };
        RegionalAgent.setWorkContract = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.WorkContract == null)
                $this.WorkContract = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.WorkContract.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeWorkContract($this, $this.WorkContract[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addManyWorkContract($this, copyItems);
        };
        RegionalAgent.addManyWorkContract = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWorkContract($this, items[i]);
            }
        };
        RegionalAgent.addWorkContract = function ($this, item) {
            if ($this.WorkContract == null)
                $this.WorkContract = [];
            if (item == null || $this.WorkContract.indexOf(item) > -1)
                return;
            $this.WorkContract.push(item);
            if (item.RegionalAgent != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.setRegionalAgent(item, $this);
            }
        };
        RegionalAgent.addRangeWorkContract = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWorkContract($this, item); });
        };
        RegionalAgent.removeWorkContract = function ($this, item) {
            if ($this == null || $this.WorkContract == null || $this.WorkContract.indexOf(item) === -1)
                return;
            var _index = $this.WorkContract.indexOf(item);
            $this.WorkContract.splice(_index, 1);
            item.RegionalAgent = null;
        };
        RegionalAgent.clearWorkContract = function ($this) {
            $this.WorkContract = null;
        };
        BO.RegionalAgent = RegionalAgent;
        var GeoCoordinates = (function () {
            function GeoCoordinates() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            GeoCoordinates.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return GeoCoordinates;
        }());
        BO.GeoCoordinates = GeoCoordinates;
        var GeoArea = (function () {
            function GeoArea() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.GeoArea";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            GeoArea.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return GeoArea;
        }());
        BO.GeoArea = GeoArea;
        var TruckContent;
        (function (TruckContent) {
            TruckContent[TruckContent["Frozen"] = 0] = "Frozen";
            TruckContent[TruckContent["Dry"] = 1] = "Dry";
            TruckContent[TruckContent["Mixed"] = 2] = "Mixed";
            TruckContent[TruckContent["Maintenance"] = 3] = "Maintenance";
        })(TruckContent = BO.TruckContent || (BO.TruckContent = {}));
        var Truck = (function () {
            function Truck() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Truck";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Truck.NewOperation = function ($this) {
                var is = "ok";
            };
            Truck.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Truck;
        }());
        Truck.setCurrentLocation = function ($this, value) {
            var oldValue = $this.CurrentLocation;
            $this.CurrentLocation = value;
            if (value != null) {
            }
        };
        Truck.setRegionalAgent = function ($this, value) {
            var oldValue = $this.RegionalAgent;
            $this.RegionalAgent = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeTrucks(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addTrucks(value, $this);
            }
        };
        Truck.setTruckDriver = function ($this, value) {
            var oldValue = $this.TruckDriver;
            $this.TruckDriver = value;
            if (value != null) {
                if (oldValue != null && oldValue.Truck != null) {
                    oldValue.Truck = null;
                }
                if ($this.TruckDriver.Truck !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.setTruck(value, $this);
                }
            }
        };
        BO.Truck = Truck;
        var OrdersPerMonth = (function () {
            function OrdersPerMonth() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrdersPerMonth";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OrdersPerMonth.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrdersPerMonth;
        }());
        BO.OrdersPerMonth = OrdersPerMonth;
        var ChartWorkaround = (function () {
            function ChartWorkaround() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ChartWorkaround";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ChartWorkaround.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ChartWorkaround;
        }());
        BO.ChartWorkaround = ChartWorkaround;
        var MapPoints = (function () {
            function MapPoints() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.MapPoints";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            MapPoints.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return MapPoints;
        }());
        BO.MapPoints = MapPoints;
        var OrderGenerator = (function () {
            function OrderGenerator() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderGenerator";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.OrderGeneratorKey = 0;
            }
            OrderGenerator.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.OrderGeneratorKey == null || $this.OrderGeneratorKey == 0;
            };
            return OrderGenerator;
        }());
        BO.OrderGenerator = OrderGenerator;
        var PubSub = (function () {
            function PubSub() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PubSub";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.PubSubKey = 0;
            }
            PubSub.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.PubSubKey == null || $this.PubSubKey == 0;
            };
            return PubSub;
        }());
        BO.PubSub = PubSub;
        var Utils = (function () {
            function Utils() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Utils";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.UtilsKey = 0;
            }
            Utils.DesirializePubMessage = function (message, objectType) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(objectType); }, false))) { }
                switch ((objectType)) {
                    case "OrderWMS": {
                        var order = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.Utils.InitOrderWMS(message); }, null);
                        break;
                    }
                }
            };
            Utils.InitOrderWMS = function (message) {
                var order = Joove.Common.nullSafe(function () { return new DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS(); }, null);
                for (var _iattr = 0; _iattr < (message == null ? 0 : message.length); _iattr++) {
                    var attr = message[_iattr];
                    switch ((Joove.Common.nullSafe(function () { return attr.key; }, ""))) {
                        case "OrdID": {
                            order.OrdID = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdOrderID_Remote": {
                            order.OrdOrderID_Remote = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdOrderExternalCode": {
                            order.OrdOrderExternalCode = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdOrderDescr": {
                            order.OrdOrderDescr = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdRegDateTime": {
                            order.OrdRegDateTime = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe(function () { return attr.val; }, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(); }, new Date('1753-01-01'));
                            break;
                        }
                        case "OrdDateTime": {
                            order.OrdDateTime = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe(function () { return attr.val; }, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(); }, new Date('1753-01-01'));
                            break;
                        }
                        case "OrdDeliveryDateTime": {
                            order.OrdDeliveryDateTime = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe(function () { return attr.val; }, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(); }, new Date('1753-01-01'));
                            break;
                        }
                        case "OrdDepositorCode": {
                            order.OrdDepositorCode = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDepositorFullName": {
                            order.OrdDepositorFullName = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdCustomerCode": {
                            order.OrdCustomerCode = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdCustomerFullName": {
                            order.OrdCustomerFullName = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdStatus": {
                            order.OrdStatus = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdMemo": {
                            order.OrdMemo = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdPurpose": {
                            order.OrdPurpose = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDeliveryval": {
                            order.OrdDeliveryValue = Joove.Common.nullSafe(function () { return CLMS.Framework.Float.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdDeliveryNotes": {
                            order.OrdDeliveryNotes = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdIsReturn": {
                            order.OrdIsReturn = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdPrdTypeDescr": {
                            order.OrdPrdTypeDescr = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdWrhRoutingCode": {
                            order.OrdWrhRoutingCode = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDlsId": {
                            order.OrdDlsId = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdDlsDescr": {
                            order.OrdDlsDescr = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDlsCity": {
                            order.OrdDlsCity = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDlsArea": {
                            order.OrdDlsArea = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDlsAddress": {
                            order.OrdDlsAddress = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdDlsZipCode": {
                            order.OrdDlsZipCode = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdRoutingStatus": {
                            order.OrdRoutingStatus = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdBar": {
                            order.OrdLfdBar = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdCtn": {
                            order.OrdLfdCtn = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdPalElsa": {
                            order.OrdLfdPalElsa = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdPalEuro": {
                            order.OrdLfdPalEuro = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdPalInd": {
                            order.OrdLfdPalInd = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdParOU": {
                            order.OrdLfdParOU = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdVar": {
                            order.OrdLfdVar = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdVol": {
                            order.OrdLfdVol = Joove.Common.nullSafe(function () { return CLMS.Framework.Float.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdLfdWeight": {
                            order.OrdLfdWeight = Joove.Common.nullSafe(function () { return CLMS.Framework.Float.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdVoucherId": {
                            order.OrdVoucherId = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdVoucherDateTime": {
                            order.OrdVoucherDateTime = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe(function () { return attr.val; }, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(); }, new Date('1753-01-01'));
                            break;
                        }
                        case "OrdVoucherNumber": {
                            order.OrdVoucherNumber = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdVoucherSeries": {
                            order.OrdVoucherSeries = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdAgencyCode": {
                            order.OrdAgencyCode = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdAgencyAddress": {
                            order.OrdAgencyAddress = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdAgencyDescr": {
                            order.OrdAgencyDescr = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdTelRouteId": {
                            break;
                        }
                        case "OrdVchRouteNr": {
                            order.OrdVchRouteNr = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "OrdVchPlateNr": {
                            order.OrdVchPlateNr = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdVhrID": {
                            break;
                        }
                        case "OrdVhrDate": {
                            order.OrdVhrDate = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe(function () { return attr.val; }, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(); }, new Date('1753-01-01'));
                            break;
                        }
                        case "OrdLastUpdateDateTime": {
                            order.OrdLastUpdateDateTime = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe(function () { return attr.val; }, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(); }, new Date('1753-01-01'));
                            break;
                        }
                        case "OrdReadyForLoading": {
                            order.OrdReadyForLoading = Joove.Common.nullSafe(function () { return CLMS.Framework.Integer.Parse(Joove.Common.nullSafe(function () { return attr.val; }, "")); }, 0);
                            break;
                        }
                        case "Polyline": {
                            order.Polyline = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                        case "OrdStatusString": {
                            order.OrdStatusString = Joove.Common.nullSafe(function () { return attr.val; }, "");
                            break;
                        }
                    }
                }
                return order;
            };
            Utils.InitPubMessage = function (obj) {
                var messages = [];
                var type = Joove.Common.nullSafe(function () { return obj.GetType(); }, null);
                var properties = Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.ThrowException("type()").Test; }, null);
                var _loop_2 = function (_iproperty) {
                    property = properties[_iproperty];
                    var value = Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.ThrowException("property(obj)").Test; }, null);
                    var name = Joove.Common.nullSafe(function () { return property.Name; }, "");
                    var datatype = Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.ThrowException("StdLib.RuntimeType.Name()").Test; }, "");
                    Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "property value " + value + " property Name " + name + " property type " + datatype); }, null);
                    if ((value == null)) {
                        value = "";
                    }
                    var message = Joove.Common.nullSafe(function () { return new DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage(); }, null);
                    if ((datatype == "Guid")) {
                        return "continue";
                    }
                    var valueString = Joove.Common.nullSafe(function () { return value.toString(); }, "");
                    if ((Joove.Common.nullSafe(function () { return Joove.Common.stringContains(valueString, "Sarmed", true); }, false))) {
                        return "continue";
                    }
                    if ((Joove.Common.nullSafe(function () { return Joove.Common.stringContains(datatype, "Date"); }, false))) {
                        message.type = "DateTime";
                        message.key = name;
                        var time_1 = Joove.Common.cast(value, "DateTime?");
                        message.val = Joove.Common.nullSafe(function () { return CLMS.Framework.DateTime.ToString(time_1, "yyyy-MM-ddThh-mm-ss"); }, "");
                    }
                    if ((datatype == "Int64")) {
                        message.type = "long";
                        message.key = name;
                        message.val = Joove.Common.nullSafe(function () { return value.toString(); }, "");
                    }
                    if ((datatype == "Int32")) {
                        message.type = "int";
                        message.key = name;
                        message.val = Joove.Common.nullSafe(function () { return value.toString(); }, "");
                    }
                    if ((datatype == "Single")) {
                        message.type = "double";
                        message.key = name;
                        message.val = Joove.Common.nullSafe(function () { return value.toString(); }, "");
                    }
                    if ((datatype == "String")) {
                        message.type = "string";
                        message.key = name;
                        message.val = Joove.Common.cast(value, "string");
                    }
                    Joove.Common.nullSafe(function () { return messages.add(message); }, null);
                };
                var property;
                for (var _iproperty = 0; _iproperty < (properties == null ? 0 : properties.length); _iproperty++) {
                    _loop_2(_iproperty);
                }
                return messages;
            };
            Utils.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UtilsKey == null || $this.UtilsKey == 0;
            };
            return Utils;
        }());
        BO.Utils = Utils;
        var PubMessage = (function () {
            function PubMessage() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.PubMessageKey = 0;
            }
            PubMessage.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.PubMessageKey == null || $this.PubMessageKey == 0;
            };
            return PubMessage;
        }());
        BO.PubMessage = PubMessage;
        var GPSLocation = (function () {
            function GPSLocation() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.GPSLocationKey = 0;
            }
            GPSLocation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.GPSLocationKey == null || $this.GPSLocationKey == 0;
            };
            return GPSLocation;
        }());
        BO.GPSLocation = GPSLocation;
        var TruckRecommendation = (function () {
            function TruckRecommendation() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TruckRecommendation";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.TruckRecommendationKey = 0;
            }
            TruckRecommendation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.TruckRecommendationKey == null || $this.TruckRecommendationKey == 0;
            };
            return TruckRecommendation;
        }());
        BO.TruckRecommendation = TruckRecommendation;
        var truck_eta = (function () {
            function truck_eta() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.truck_eta";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.truck_etaKey = 0;
            }
            truck_eta.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.truck_etaKey == null || $this.truck_etaKey == 0;
            };
            return truck_eta;
        }());
        BO.truck_eta = truck_eta;
        var truck_emission = (function () {
            function truck_emission() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.truck_emission";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.truck_emissionKey = 0;
            }
            truck_emission.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.truck_emissionKey == null || $this.truck_emissionKey == 0;
            };
            return truck_emission;
        }());
        BO.truck_emission = truck_emission;
        var AVGTime = (function () {
            function AVGTime() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AVGTime";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AVGTime.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AVGTime;
        }());
        BO.AVGTime = AVGTime;
        var DashboardStatistics = (function () {
            function DashboardStatistics() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DashboardStatistics";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            DashboardStatistics.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DashboardStatistics;
        }());
        BO.DashboardStatistics = DashboardStatistics;
        var StatePeriod = (function () {
            function StatePeriod() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StatePeriod";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            StatePeriod.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return StatePeriod;
        }());
        BO.StatePeriod = StatePeriod;
        var State;
        (function (State) {
            State[State["Registration"] = 0] = "Registration";
            State[State["Negotiation"] = 1] = "Negotiation";
            State[State["Finalized"] = 2] = "Finalized";
        })(State = BO.State || (BO.State = {}));
        var ScheduledRouteTemplate = (function () {
            function ScheduledRouteTemplate() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.VisibleTo = [];
                this.VisibleToRAs = [];
                this['_key'] = this.Id = 0;
            }
            ScheduledRouteTemplate.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ScheduledRouteTemplate;
        }());
        ScheduledRouteTemplate.setOwner = function ($this, value) {
            var oldValue = $this.Owner;
            $this.Owner = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeScheduledRouteTemplates(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addScheduledRouteTemplates(value, $this);
            }
        };
        ScheduledRouteTemplate.setVisibleTo = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.VisibleTo == null)
                $this.VisibleTo = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.VisibleTo.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.removeVisibleTo($this, $this.VisibleTo[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addManyVisibleTo($this, copyItems);
        };
        ScheduledRouteTemplate.addManyVisibleTo = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleTo($this, items[i]);
            }
        };
        ScheduledRouteTemplate.addVisibleTo = function ($this, item) {
            if ($this.VisibleTo == null)
                $this.VisibleTo = [];
            if (item == null || $this.VisibleTo.indexOf(item) > -1)
                return;
            $this.VisibleTo.push(item);
            LSP.addPrivateTemplates(item, $this);
        };
        ScheduledRouteTemplate.addRangeVisibleTo = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleTo($this, item); });
        };
        ScheduledRouteTemplate.removeVisibleTo = function ($this, item) {
            if ($this == null || $this.VisibleTo == null || $this.VisibleTo.indexOf(item) === -1)
                return;
            var _index = $this.VisibleTo.indexOf(item);
            $this.VisibleTo.splice(_index, 1);
            LSP.removePrivateTemplates(item, $this);
        };
        ScheduledRouteTemplate.clearVisibleTo = function ($this) {
            $this.VisibleTo = null;
        };
        ScheduledRouteTemplate.setOwnerLSP = function ($this, value) {
            var oldValue = $this.OwnerLSP;
            $this.OwnerLSP = value;
            if (value != null) {
            }
        };
        ScheduledRouteTemplate.setVisibleToRAs = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.VisibleToRAs == null)
                $this.VisibleToRAs = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.VisibleToRAs.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.removeVisibleToRAs($this, $this.VisibleToRAs[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addManyVisibleToRAs($this, copyItems);
        };
        ScheduledRouteTemplate.addManyVisibleToRAs = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleToRAs($this, items[i]);
            }
        };
        ScheduledRouteTemplate.addVisibleToRAs = function ($this, item) {
            if ($this.VisibleToRAs == null)
                $this.VisibleToRAs = [];
            if (item == null || $this.VisibleToRAs.indexOf(item) > -1)
                return;
            $this.VisibleToRAs.push(item);
        };
        ScheduledRouteTemplate.addRangeVisibleToRAs = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate.addVisibleToRAs($this, item); });
        };
        ScheduledRouteTemplate.removeVisibleToRAs = function ($this, item) {
            if ($this == null || $this.VisibleToRAs == null || $this.VisibleToRAs.indexOf(item) === -1)
                return;
            var _index = $this.VisibleToRAs.indexOf(item);
            $this.VisibleToRAs.splice(_index, 1);
        };
        ScheduledRouteTemplate.clearVisibleToRAs = function ($this) {
            $this.VisibleToRAs = null;
        };
        BO.ScheduledRouteTemplate = ScheduledRouteTemplate;
        var ScheduledRoute = (function () {
            function ScheduledRoute() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRoute";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ScheduledRoute.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ScheduledRoute;
        }());
        ScheduledRoute.setWorkContract = function ($this, value) {
            var oldValue = $this.WorkContract;
            $this.WorkContract = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.removeScheduledRoutes(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addScheduledRoutes(value, $this);
            }
        };
        BO.ScheduledRoute = ScheduledRoute;
        var ScheduledRouteState;
        (function (ScheduledRouteState) {
            ScheduledRouteState[ScheduledRouteState["UnderNegotiation"] = 0] = "UnderNegotiation";
            ScheduledRouteState[ScheduledRouteState["PendingActionByLSP"] = 1] = "PendingActionByLSP";
            ScheduledRouteState[ScheduledRouteState["PendingActionByRA"] = 2] = "PendingActionByRA";
            ScheduledRouteState[ScheduledRouteState["Finalized"] = 3] = "Finalized";
        })(ScheduledRouteState = BO.ScheduledRouteState || (BO.ScheduledRouteState = {}));
        var RouteFrequency;
        (function (RouteFrequency) {
            RouteFrequency[RouteFrequency["Weekly"] = 0] = "Weekly";
            RouteFrequency[RouteFrequency["Biweekly"] = 1] = "Biweekly";
            RouteFrequency[RouteFrequency["Monthly"] = 2] = "Monthly";
            RouteFrequency[RouteFrequency["Once"] = 3] = "Once";
        })(RouteFrequency = BO.RouteFrequency || (BO.RouteFrequency = {}));
        var WorkContract = (function () {
            function WorkContract() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.ScheduledRoutes = [];
                this['_key'] = this.Id = 0;
            }
            WorkContract.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return WorkContract;
        }());
        WorkContract.setRegionalAgent = function ($this, value) {
            var oldValue = $this.RegionalAgent;
            $this.RegionalAgent = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeWorkContract(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addWorkContract(value, $this);
            }
        };
        WorkContract.setScheduledRoutes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ScheduledRoutes == null)
                $this.ScheduledRoutes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ScheduledRoutes.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.removeScheduledRoutes($this, $this.ScheduledRoutes[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addManyScheduledRoutes($this, copyItems);
        };
        WorkContract.addManyScheduledRoutes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addScheduledRoutes($this, items[i]);
            }
        };
        WorkContract.addScheduledRoutes = function ($this, item) {
            if ($this.ScheduledRoutes == null)
                $this.ScheduledRoutes = [];
            if (item == null || $this.ScheduledRoutes.indexOf(item) > -1)
                return;
            $this.ScheduledRoutes.push(item);
            if (item.WorkContract != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRoute.setWorkContract(item, $this);
            }
        };
        WorkContract.addRangeScheduledRoutes = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract.addScheduledRoutes($this, item); });
        };
        WorkContract.removeScheduledRoutes = function ($this, item) {
            if ($this == null || $this.ScheduledRoutes == null || $this.ScheduledRoutes.indexOf(item) === -1)
                return;
            var _index = $this.ScheduledRoutes.indexOf(item);
            $this.ScheduledRoutes.splice(_index, 1);
            item.WorkContract = null;
        };
        WorkContract.clearScheduledRoutes = function ($this) {
            $this.ScheduledRoutes = null;
        };
        WorkContract.setLSP = function ($this, value) {
            var oldValue = $this.LSP;
            $this.LSP = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeWorkContracts(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addWorkContracts(value, $this);
            }
        };
        BO.WorkContract = WorkContract;
        var ContractStatus;
        (function (ContractStatus) {
            ContractStatus[ContractStatus["UnderNegotiation"] = 0] = "UnderNegotiation";
            ContractStatus[ContractStatus["Active"] = 1] = "Active";
            ContractStatus[ContractStatus["Archived"] = 2] = "Archived";
        })(ContractStatus = BO.ContractStatus || (BO.ContractStatus = {}));
        var TblZslNormalisationSuggestion = (function () {
            function TblZslNormalisationSuggestion() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TblZslNormalisationSuggestion";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.SuggestionsId = 0;
            }
            TblZslNormalisationSuggestion.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.SuggestionsId == null || $this.SuggestionsId == 0;
            };
            return TblZslNormalisationSuggestion;
        }());
        BO.TblZslNormalisationSuggestion = TblZslNormalisationSuggestion;
        var tblZslBookingType = (function () {
            function tblZslBookingType() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslBookingType";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslBookingType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslBookingType;
        }());
        tblZslBookingType.setBookingType = function ($this, value) {
            var oldValue = $this.BookingType;
            $this.BookingType = value;
            if (value != null) {
            }
        };
        BO.tblZslBookingType = tblZslBookingType;
        var tblZslCarrier = (function () {
            function tblZslCarrier() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCarrier";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslCarrier.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslCarrier;
        }());
        tblZslCarrier.setCarrier = function ($this, value) {
            var oldValue = $this.Carrier;
            $this.Carrier = value;
            if (value != null) {
            }
        };
        BO.tblZslCarrier = tblZslCarrier;
        var tblZslCustomer = (function () {
            function tblZslCustomer() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCustomer";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslCustomer.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslCustomer;
        }());
        tblZslCustomer.setCustomer = function ($this, value) {
            var oldValue = $this.Customer;
            $this.Customer = value;
            if (value != null) {
            }
        };
        BO.tblZslCustomer = tblZslCustomer;
        var tblZslDeliveryStatus = (function () {
            function tblZslDeliveryStatus() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslDeliveryStatus";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslDeliveryStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslDeliveryStatus;
        }());
        tblZslDeliveryStatus.setDeliveryStatus = function ($this, value) {
            var oldValue = $this.DeliveryStatus;
            $this.DeliveryStatus = value;
            if (value != null) {
            }
        };
        BO.tblZslDeliveryStatus = tblZslDeliveryStatus;
        var tblZslPlatformBookingOrder = (function () {
            function tblZslPlatformBookingOrder() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslPlatformBookingOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslPlatformBookingOrder;
        }());
        tblZslPlatformBookingOrder.setPlatformBookingOrder = function ($this, value) {
            var oldValue = $this.PlatformBookingOrder;
            $this.PlatformBookingOrder = value;
            if (value != null) {
            }
        };
        tblZslPlatformBookingOrder.settblZslCustomer = function ($this, value) {
            var oldValue = $this.tblZslCustomer;
            $this.tblZslCustomer = value;
            if (value != null) {
            }
        };
        tblZslPlatformBookingOrder.settblZslBookingType = function ($this, value) {
            var oldValue = $this.tblZslBookingType;
            $this.tblZslBookingType = value;
            if (value != null) {
            }
        };
        tblZslPlatformBookingOrder.settblZslTransportOrder = function ($this, value) {
            var oldValue = $this.tblZslTransportOrder;
            $this.tblZslTransportOrder = value;
            if (value != null) {
            }
        };
        BO.tblZslPlatformBookingOrder = tblZslPlatformBookingOrder;
        var tblZslRoute = (function () {
            function tblZslRoute() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslRoute";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslRoute.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslRoute;
        }());
        tblZslRoute.setRoute = function ($this, value) {
            var oldValue = $this.Route;
            $this.Route = value;
            if (value != null) {
            }
        };
        BO.tblZslRoute = tblZslRoute;
        var tblZslTransportDetail = (function () {
            function tblZslTransportDetail() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportDetail";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.TransportDetailsID = 0;
            }
            tblZslTransportDetail.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.TransportDetailsID == null || $this.TransportDetailsID == 0;
            };
            return tblZslTransportDetail;
        }());
        tblZslTransportDetail.settblZslPlatformBookingOrder = function ($this, value) {
            var oldValue = $this.tblZslPlatformBookingOrder;
            $this.tblZslPlatformBookingOrder = value;
            if (value != null) {
            }
        };
        tblZslTransportDetail.settblZslCustomer = function ($this, value) {
            var oldValue = $this.tblZslCustomer;
            $this.tblZslCustomer = value;
            if (value != null) {
            }
        };
        tblZslTransportDetail.settblZslWorker = function ($this, value) {
            var oldValue = $this.tblZslWorker;
            $this.tblZslWorker = value;
            if (value != null) {
            }
        };
        BO.tblZslTransportDetail = tblZslTransportDetail;
        var tblZslTransportEvent = (function () {
            function tblZslTransportEvent() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportEvent";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.EventID = 0;
            }
            tblZslTransportEvent.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.EventID == null || $this.EventID == 0;
            };
            return tblZslTransportEvent;
        }());
        tblZslTransportEvent.settblZslCustomer = function ($this, value) {
            var oldValue = $this.tblZslCustomer;
            $this.tblZslCustomer = value;
            if (value != null) {
            }
        };
        tblZslTransportEvent.settblZslWorker = function ($this, value) {
            var oldValue = $this.tblZslWorker;
            $this.tblZslWorker = value;
            if (value != null) {
            }
        };
        BO.tblZslTransportEvent = tblZslTransportEvent;
        var tblZslTransportExecutionPlan = (function () {
            function tblZslTransportExecutionPlan() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportExecutionPlan";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ExecutionPlanID = 0;
            }
            tblZslTransportExecutionPlan.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ExecutionPlanID == null || $this.ExecutionPlanID == 0;
            };
            return tblZslTransportExecutionPlan;
        }());
        tblZslTransportExecutionPlan.settblZslCarrier = function ($this, value) {
            var oldValue = $this.tblZslCarrier;
            $this.tblZslCarrier = value;
            if (value != null) {
            }
        };
        tblZslTransportExecutionPlan.settblZslPlatformBookingOrder = function ($this, value) {
            var oldValue = $this.tblZslPlatformBookingOrder;
            $this.tblZslPlatformBookingOrder = value;
            if (value != null) {
            }
        };
        tblZslTransportExecutionPlan.settblZslDeliveryStatus = function ($this, value) {
            var oldValue = $this.tblZslDeliveryStatus;
            $this.tblZslDeliveryStatus = value;
            if (value != null) {
            }
        };
        BO.tblZslTransportExecutionPlan = tblZslTransportExecutionPlan;
        var tblZslTransportOrder = (function () {
            function tblZslTransportOrder() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslTransportOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslTransportOrder;
        }());
        tblZslTransportOrder.setTransportOrder = function ($this, value) {
            var oldValue = $this.TransportOrder;
            $this.TransportOrder = value;
            if (value != null) {
            }
        };
        tblZslTransportOrder.settblZslCustomer = function ($this, value) {
            var oldValue = $this.tblZslCustomer;
            $this.tblZslCustomer = value;
            if (value != null) {
            }
        };
        BO.tblZslTransportOrder = tblZslTransportOrder;
        var tblZslWorker = (function () {
            function tblZslWorker() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblZslWorker";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            tblZslWorker.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return tblZslWorker;
        }());
        tblZslWorker.setWorker = function ($this, value) {
            var oldValue = $this.Worker;
            $this.Worker = value;
            if (value != null) {
            }
        };
        BO.tblZslWorker = tblZslWorker;
        var tblActivitiesAPI = (function () {
            function tblActivitiesAPI() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblActivitiesAPI";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.tblActivitiesId = 0;
            }
            tblActivitiesAPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.tblActivitiesId == null || $this.tblActivitiesId == 0;
            };
            return tblActivitiesAPI;
        }());
        BO.tblActivitiesAPI = tblActivitiesAPI;
        var tblReceivedEvent = (function () {
            function tblReceivedEvent() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedEvent";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ReceivedEventID = 0;
            }
            tblReceivedEvent.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ReceivedEventID == null || $this.ReceivedEventID == 0;
            };
            return tblReceivedEvent;
        }());
        tblReceivedEvent.settblReceivedPlannedTransport = function ($this, value) {
            var oldValue = $this.tblReceivedPlannedTransport;
            $this.tblReceivedPlannedTransport = value;
            if (value != null) {
            }
        };
        BO.tblReceivedEvent = tblReceivedEvent;
        var tblReceivedPlannedTransport = (function () {
            function tblReceivedPlannedTransport() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedPlannedTransport";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ReceivedPlannedTransportID = 0;
            }
            tblReceivedPlannedTransport.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ReceivedPlannedTransportID == null || $this.ReceivedPlannedTransportID == 0;
            };
            return tblReceivedPlannedTransport;
        }());
        BO.tblReceivedPlannedTransport = tblReceivedPlannedTransport;
        var tblReceivedTrainStatus = (function () {
            function tblReceivedTrainStatus() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedTrainStatus";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ReceivedTrainStatusID = 0;
            }
            tblReceivedTrainStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ReceivedTrainStatusID == null || $this.ReceivedTrainStatusID == 0;
            };
            return tblReceivedTrainStatus;
        }());
        tblReceivedTrainStatus.settblReceivedPlannedTransport = function ($this, value) {
            var oldValue = $this.tblReceivedPlannedTransport;
            $this.tblReceivedPlannedTransport = value;
            if (value != null) {
            }
        };
        BO.tblReceivedTrainStatus = tblReceivedTrainStatus;
        var tblReceivedTransportStopVehicle = (function () {
            function tblReceivedTransportStopVehicle() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedTransportStopVehicle";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ReceivedVehicleID = 0;
            }
            tblReceivedTransportStopVehicle.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ReceivedVehicleID == null || $this.ReceivedVehicleID == 0;
            };
            return tblReceivedTransportStopVehicle;
        }());
        tblReceivedTransportStopVehicle.settblReceivedTransportStop = function ($this, value) {
            var oldValue = $this.tblReceivedTransportStop;
            $this.tblReceivedTransportStop = value;
            if (value != null) {
            }
        };
        BO.tblReceivedTransportStopVehicle = tblReceivedTransportStopVehicle;
        var tblReceivedTransportStop = (function () {
            function tblReceivedTransportStop() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblReceivedTransportStop";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ReceivedTransportStopID = 0;
            }
            tblReceivedTransportStop.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ReceivedTransportStopID == null || $this.ReceivedTransportStopID == 0;
            };
            return tblReceivedTransportStop;
        }());
        tblReceivedTransportStop.settblReceivedPlannedTransport = function ($this, value) {
            var oldValue = $this.tblReceivedPlannedTransport;
            $this.tblReceivedPlannedTransport = value;
            if (value != null) {
            }
        };
        BO.tblReceivedTransportStop = tblReceivedTransportStop;
        var tblRoutesAPI = (function () {
            function tblRoutesAPI() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblRoutesAPI";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.tblRoutesId = 0;
            }
            tblRoutesAPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.tblRoutesId == null || $this.tblRoutesId == 0;
            };
            return tblRoutesAPI;
        }());
        tblRoutesAPI.settblActivitiesAPI = function ($this, value) {
            var oldValue = $this.tblActivitiesAPI;
            $this.tblActivitiesAPI = value;
            if (value != null) {
            }
        };
        BO.tblRoutesAPI = tblRoutesAPI;
        var tblSolutionsAPI = (function () {
            function tblSolutionsAPI() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.tblSolutionsAPI";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.tblSolutionsId = 0;
            }
            tblSolutionsAPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.tblSolutionsId == null || $this.tblSolutionsId == 0;
            };
            return tblSolutionsAPI;
        }());
        tblSolutionsAPI.settblRoutesAPI = function ($this, value) {
            var oldValue = $this.tblRoutesAPI;
            $this.tblRoutesAPI = value;
            if (value != null) {
            }
        };
        BO.tblSolutionsAPI = tblSolutionsAPI;
        var Agreement = (function () {
            function Agreement() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Agreement";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.AgreementStatuses = [];
                this.Items = [];
                this.Warehouses = [];
                this.StockOnHands = [];
                this.TransportUnCaps = [];
                this['_key'] = this.Id = 0;
            }
            Agreement.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Agreement;
        }());
        Agreement.setAgreementStatuses = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.AgreementStatuses == null)
                $this.AgreementStatuses = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.AgreementStatuses.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeAgreementStatuses($this, $this.AgreementStatuses[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyAgreementStatuses($this, copyItems);
        };
        Agreement.addManyAgreementStatuses = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addAgreementStatuses($this, items[i]);
            }
        };
        Agreement.addAgreementStatuses = function ($this, item) {
            if ($this.AgreementStatuses == null)
                $this.AgreementStatuses = [];
            if (item == null || $this.AgreementStatuses.indexOf(item) > -1)
                return;
            $this.AgreementStatuses.push(item);
        };
        Agreement.addRangeAgreementStatuses = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addAgreementStatuses($this, item); });
        };
        Agreement.removeAgreementStatuses = function ($this, item) {
            if ($this == null || $this.AgreementStatuses == null || $this.AgreementStatuses.indexOf(item) === -1)
                return;
            var _index = $this.AgreementStatuses.indexOf(item);
            $this.AgreementStatuses.splice(_index, 1);
        };
        Agreement.clearAgreementStatuses = function ($this) {
            $this.AgreementStatuses = null;
        };
        Agreement.setItems = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Items == null)
                $this.Items = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Items.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeItems($this, $this.Items[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyItems($this, copyItems);
        };
        Agreement.addManyItems = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addItems($this, items[i]);
            }
        };
        Agreement.addItems = function ($this, item) {
            if ($this.Items == null)
                $this.Items = [];
            if (item == null || $this.Items.indexOf(item) > -1)
                return;
            $this.Items.push(item);
            Item.addAgreements(item, $this);
        };
        Agreement.addRangeItems = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addItems($this, item); });
        };
        Agreement.removeItems = function ($this, item) {
            if ($this == null || $this.Items == null || $this.Items.indexOf(item) === -1)
                return;
            var _index = $this.Items.indexOf(item);
            $this.Items.splice(_index, 1);
            Item.removeAgreements(item, $this);
        };
        Agreement.clearItems = function ($this) {
            $this.Items = null;
        };
        Agreement.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        Agreement.setWarehouses = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Warehouses == null)
                $this.Warehouses = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Warehouses.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeWarehouses($this, $this.Warehouses[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyWarehouses($this, copyItems);
        };
        Agreement.addManyWarehouses = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addWarehouses($this, items[i]);
            }
        };
        Agreement.addWarehouses = function ($this, item) {
            if ($this.Warehouses == null)
                $this.Warehouses = [];
            if (item == null || $this.Warehouses.indexOf(item) > -1)
                return;
            $this.Warehouses.push(item);
        };
        Agreement.addRangeWarehouses = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addWarehouses($this, item); });
        };
        Agreement.removeWarehouses = function ($this, item) {
            if ($this == null || $this.Warehouses == null || $this.Warehouses.indexOf(item) === -1)
                return;
            var _index = $this.Warehouses.indexOf(item);
            $this.Warehouses.splice(_index, 1);
        };
        Agreement.clearWarehouses = function ($this) {
            $this.Warehouses = null;
        };
        Agreement.setStockOnHands = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.StockOnHands == null)
                $this.StockOnHands = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.StockOnHands.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeStockOnHands($this, $this.StockOnHands[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyStockOnHands($this, copyItems);
        };
        Agreement.addManyStockOnHands = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addStockOnHands($this, items[i]);
            }
        };
        Agreement.addStockOnHands = function ($this, item) {
            if ($this.StockOnHands == null)
                $this.StockOnHands = [];
            if (item == null || $this.StockOnHands.indexOf(item) > -1)
                return;
            $this.StockOnHands.push(item);
            if (item.Agreement != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand.setAgreement(item, $this);
            }
        };
        Agreement.addRangeStockOnHands = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addStockOnHands($this, item); });
        };
        Agreement.removeStockOnHands = function ($this, item) {
            if ($this == null || $this.StockOnHands == null || $this.StockOnHands.indexOf(item) === -1)
                return;
            var _index = $this.StockOnHands.indexOf(item);
            $this.StockOnHands.splice(_index, 1);
            item.Agreement = null;
        };
        Agreement.clearStockOnHands = function ($this) {
            $this.StockOnHands = null;
        };
        Agreement.setTransportUnCaps = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.TransportUnCaps == null)
                $this.TransportUnCaps = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.TransportUnCaps.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeTransportUnCaps($this, $this.TransportUnCaps[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addManyTransportUnCaps($this, copyItems);
        };
        Agreement.addManyTransportUnCaps = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addTransportUnCaps($this, items[i]);
            }
        };
        Agreement.addTransportUnCaps = function ($this, item) {
            if ($this.TransportUnCaps == null)
                $this.TransportUnCaps = [];
            if (item == null || $this.TransportUnCaps.indexOf(item) > -1)
                return;
            $this.TransportUnCaps.push(item);
        };
        Agreement.addRangeTransportUnCaps = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addTransportUnCaps($this, item); });
        };
        Agreement.removeTransportUnCaps = function ($this, item) {
            if ($this == null || $this.TransportUnCaps == null || $this.TransportUnCaps.indexOf(item) === -1)
                return;
            var _index = $this.TransportUnCaps.indexOf(item);
            $this.TransportUnCaps.splice(_index, 1);
        };
        Agreement.clearTransportUnCaps = function ($this) {
            $this.TransportUnCaps = null;
        };
        BO.Agreement = Agreement;
        var AgreementStatus = (function () {
            function AgreementStatus() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AgreementStatus";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AgreementStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AgreementStatus;
        }());
        BO.AgreementStatus = AgreementStatus;
        var Response = (function () {
            function Response() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Response";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Response.GenerateResponse = function (status, message, details, code) {
                var newResponse = Joove.Common.nullSafe(function () { return new DSS2_SynchromodalityCapacityOptimisation.BO.Response(); }, null);
                newResponse.Status = status;
                newResponse.Message = message;
                newResponse.Details = details;
                newResponse.Code = code;
                return newResponse;
            };
            Response.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Response;
        }());
        BO.Response = Response;
        var AppNotification = (function () {
            function AppNotification() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.AppNotificationActions = [];
                this['_key'] = this.Id = 0;
            }
            AppNotification.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AppNotification;
        }());
        AppNotification.setAppNotificationActions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.AppNotificationActions == null)
                $this.AppNotificationActions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.AppNotificationActions.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.removeAppNotificationActions($this, $this.AppNotificationActions[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.addManyAppNotificationActions($this, copyItems);
        };
        AppNotification.addManyAppNotificationActions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.addAppNotificationActions($this, items[i]);
            }
        };
        AppNotification.addAppNotificationActions = function ($this, item) {
            if ($this.AppNotificationActions == null)
                $this.AppNotificationActions = [];
            if (item == null || $this.AppNotificationActions.indexOf(item) > -1)
                return;
            $this.AppNotificationActions.push(item);
        };
        AppNotification.addRangeAppNotificationActions = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.AppNotification.addAppNotificationActions($this, item); });
        };
        AppNotification.removeAppNotificationActions = function ($this, item) {
            if ($this == null || $this.AppNotificationActions == null || $this.AppNotificationActions.indexOf(item) === -1)
                return;
            var _index = $this.AppNotificationActions.indexOf(item);
            $this.AppNotificationActions.splice(_index, 1);
        };
        AppNotification.clearAppNotificationActions = function ($this) {
            $this.AppNotificationActions = null;
        };
        AppNotification.setRecipient = function ($this, value) {
            var oldValue = $this.Recipient;
            $this.Recipient = value;
            if (value != null) {
            }
        };
        BO.AppNotification = AppNotification;
        var AppNotificationAction = (function () {
            function AppNotificationAction() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.AppNotificationAction";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AppNotificationAction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AppNotificationAction;
        }());
        BO.AppNotificationAction = AppNotificationAction;
        var Company = (function () {
            function Company() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Company";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Contacts = [];
                this['_key'] = this.Id = 0;
            }
            Company.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Company;
        }());
        Company.setContacts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Contacts == null)
                $this.Contacts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Contacts.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Company.removeContacts($this, $this.Contacts[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Company.addManyContacts($this, copyItems);
        };
        Company.addManyContacts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Company.addContacts($this, items[i]);
            }
        };
        Company.addContacts = function ($this, item) {
            if ($this.Contacts == null)
                $this.Contacts = [];
            if (item == null || $this.Contacts.indexOf(item) > -1)
                return;
            $this.Contacts.push(item);
            if (item.Company != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Contact.setCompany(item, $this);
            }
        };
        Company.addRangeContacts = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Company.addContacts($this, item); });
        };
        Company.removeContacts = function ($this, item) {
            if ($this == null || $this.Contacts == null || $this.Contacts.indexOf(item) === -1)
                return;
            var _index = $this.Contacts.indexOf(item);
            $this.Contacts.splice(_index, 1);
            item.Company = null;
        };
        Company.clearContacts = function ($this) {
            $this.Contacts = null;
        };
        BO.Company = Company;
        var Dashboard = (function () {
            function Dashboard() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Statistics = [];
                this['_key'] = this.Id = 0;
            }
            Dashboard.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Dashboard;
        }());
        Dashboard.setStatistics = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Statistics == null)
                $this.Statistics = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Statistics.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.removeStatistics($this, $this.Statistics[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.addManyStatistics($this, copyItems);
        };
        Dashboard.addManyStatistics = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.addStatistics($this, items[i]);
            }
        };
        Dashboard.addStatistics = function ($this, item) {
            if ($this.Statistics == null)
                $this.Statistics = [];
            if (item == null || $this.Statistics.indexOf(item) > -1)
                return;
            $this.Statistics.push(item);
        };
        Dashboard.addRangeStatistics = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Dashboard.addStatistics($this, item); });
        };
        Dashboard.removeStatistics = function ($this, item) {
            if ($this == null || $this.Statistics == null || $this.Statistics.indexOf(item) === -1)
                return;
            var _index = $this.Statistics.indexOf(item);
            $this.Statistics.splice(_index, 1);
        };
        Dashboard.clearStatistics = function ($this) {
            $this.Statistics = null;
        };
        BO.Dashboard = Dashboard;
        var Statistics = (function () {
            function Statistics() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Statistics";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Statistics.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Statistics;
        }());
        Statistics.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        Statistics.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        Statistics.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        BO.Statistics = Statistics;
        var MakeRequest = (function () {
            function MakeRequest() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.MakeRequestKey = 0;
            }
            MakeRequest.Analytics = function (q, fromDate, toDate) {
                var analyticsObject = new Object();
                analyticsObject.query = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate); }, null);
                var interval = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetInterval(fromDate); }, "");
                analyticsObject.aggs = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetAggregations(interval); }, null);
                var meta = new Object();
                meta.excludes = ["message"];
                analyticsObject.source = meta;
                return analyticsObject;
            };
            MakeRequest.GetAggregations = function (interval) {
                var aggs = new Object();
                var top_service = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("Service.keyword", 5, true); }, null);
                var top_operation = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("Operation.keyword", 5, true); }, null);
                var from_ip = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("IP.keyword", 5, true); }, null);
                var verb_type = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("RequestMethod.keyword", 5, true); }, null);
                var status = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetTermQuery("StatusCode", 5, true); }, null);
                var elapsed_msecs = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"); }, null);
                var req_over_time = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetHistogramQuery("Timestamp", interval); }, null);
                var req_latency = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetBucketHistogramQuery("ElapsedMsecs", 2000); }, null);
                aggs.TopService = top_service;
                aggs.TopOperation = top_operation;
                aggs.FromIP = from_ip;
                aggs.VerbType = verb_type;
                aggs.Status = status;
                aggs.ElapsedMsecs = elapsed_msecs;
                aggs.RequestOverTime = req_over_time;
                aggs.RequestLatency = req_latency;
                aggs.Errors = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetErrorFilter(); }, null);
                return aggs;
            };
            MakeRequest.GetBucketHistogramQuery = function (field, interval) {
                var q = new Object();
                var hist = new Object();
                q.Histogram = hist;
                hist.Field = field;
                hist.Interval = interval;
                return q;
            };
            MakeRequest.GetDateFormat = function (interval) {
                if ((interval == "month")) {
                    return "yyyy-MM";
                }
                else if ((interval == "day")) {
                    return "yyyy-MM-dd";
                }
                else if ((interval == "6h")) {
                    return "yyyy-MM-dd HH:mm";
                }
                else if ((interval == "h")) {
                    return "yyyy-MM-dd HH:mm";
                }
                else {
                    return "yyyy-MM-dd HH:mm";
                }
            };
            MakeRequest.GetErrorFilter = function () {
                var errorFilter = new Object();
                var filterRoot = new Object();
                var filter = new Object();
                var failureRoot = new Object();
                var successRoot = new Object();
                var failure = new Object();
                var success = new Object();
                var timestampFailure = new Object();
                timestampFailure.gte = "400";
                failure.StatusCode = timestampFailure;
                failureRoot.Range = failure;
                filter.Failure = failureRoot;
                var timestampSuccess = new Object();
                timestampSuccess.lt = "400";
                success.StatusCode = timestampSuccess;
                successRoot.Range = success;
                filter.Success = successRoot;
                filterRoot.Filters = filter;
                errorFilter.Filters = filterRoot;
                return errorFilter;
            };
            MakeRequest.GetFilterByTimePeriod = function (fromDate, toDate) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(fromDate); }, false))) {
                    fromDate = "now-1w";
                }
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(toDate); }, false))) {
                    toDate = "now";
                }
                var timeRange = new Object();
                var timestamp = new Object();
                timestamp.gte = fromDate;
                timestamp.lte = toDate;
                timeRange.timestamp = timestamp;
                return timeRange;
            };
            MakeRequest.GetHistogramQuery = function (field, interval) {
                var q = new Object();
                var hist = new Object();
                q.DateHistogram = hist;
                hist.Field = field;
                hist.Interval = interval;
                hist.Format = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetDateFormat(interval); }, "");
                hist.Offset = "+0h";
                var stats = new Object();
                stats.statistics = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"); }, null);
                stats.errors = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetErrorFilter(); }, null);
                q.Aggregator = stats;
                return q;
            };
            MakeRequest.GetInterval = function (fromDate) {
                if ((fromDate == "now-1y")) {
                    return "month";
                }
                else if ((fromDate == "now-1M")) {
                    return "day";
                }
                else if ((fromDate == "now-1w")) {
                    return "6h";
                }
                else if ((fromDate == "now-1d")) {
                    return "hour";
                }
                else {
                    return "day";
                }
            };
            MakeRequest.GetQuery = function (q, fromDate, toDate) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(fromDate); }, false))) {
                    fromDate = "now-1w";
                }
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(toDate); }, false))) {
                    toDate = "now";
                }
                var queryObject = new Object();
                var logic = new Object();
                logic.must = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetQueryStringQuery(q); }, null);
                var filter = new Object();
                filter.range = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetFilterByTimePeriod(fromDate, toDate); }, null);
                logic.filter = filter;
                queryObject.logic = logic;
                return queryObject;
            };
            MakeRequest.GetQueryStringQuery = function (q) {
                var must = new Object();
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(q); }, false))) {
                    var serializer_1 = new CLMS.Framework.Utilities.Serializer();
                    must.match_all = Joove.Common.nullSafe(function () { return serializer_1.FromJson("{\"must\": {\"match_all\": {}}"); }, null);
                }
                else {
                    var queryString = new Object();
                    queryString.AnalyzeWildcard = true;
                    queryString.Query = q;
                    must.QueryString = queryString;
                }
                return must;
            };
            MakeRequest.GetStatQuery = function (field) {
                var q = new Object();
                var stats = new Object();
                q.stats = stats;
                stats.field = field;
                return q;
            };
            MakeRequest.GetTermQuery = function (field, size, aggsEnable) {
                var q = new Object();
                var term = new Object();
                q.terms = term;
                term.field = field;
                if ((aggsEnable)) {
                    var aggs = new Object();
                    q.Aggs = aggs;
                    q.Aggs.ResposeStatus = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetErrorFilter(); }, null);
                    q.Aggs.ResponseTime = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"); }, null);
                }
                if ((CLMS.Framework.Number.GreaterThan(function () { return size; }, function () { return 0; }))) {
                    term.size = size;
                }
                return q;
            };
            MakeRequest.Query = function (q, fromDate, toDate) {
                var searchObject = new Object();
                var sorts = [];
                Joove.Common.nullSafe(function () { return sorts.add(Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.SortByTimestamp("desc"); }, null)); }, null);
                searchObject.sort = sorts;
                searchObject.query = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate); }, null);
                var meta = new Object();
                meta.excludes = ["message"];
                searchObject.source = meta;
                return searchObject;
            };
            MakeRequest.SortByTimestamp = function (direction) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(direction); }, false))) {
                    direction = "desc";
                }
                var sortObject = new Object();
                var orderObject = new Object();
                orderObject.order = direction;
                sortObject.Timestamp = orderObject;
                return sortObject;
            };
            MakeRequest.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.MakeRequestKey == null || $this.MakeRequestKey == 0;
            };
            return MakeRequest;
        }());
        BO.MakeRequest = MakeRequest;
        var RequestLog = (function () {
            function RequestLog() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.RequestLogKey = 0;
            }
            RequestLog.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.RequestLogKey == null || $this.RequestLogKey == 0;
            };
            return RequestLog;
        }());
        BO.RequestLog = RequestLog;
        var Buckets = (function () {
            function Buckets() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Buckets";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.key = "";
            }
            Buckets.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.key == null || $this.key == "";
            };
            return Buckets;
        }());
        BO.Buckets = Buckets;
        var Convertor = (function () {
            function Convertor() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Convertor";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ConvertorKey = 0;
            }
            Convertor.ErrorRateToBucket = function (error) {
                var fail = new DSS2_SynchromodalityCapacityOptimisation.BO.Buckets();
                fail.key = "Failure";
                fail.doc_count = Joove.Common.nullSafe(function () { return error.Buckets.Failure.doc_count; }, 0);
                var success = new DSS2_SynchromodalityCapacityOptimisation.BO.Buckets();
                success.key = "Success";
                success.doc_count = Joove.Common.nullSafe(function () { return error.Buckets.Success.doc_count; }, 0);
                var buckets = [];
                Joove.Common.nullSafe(function () { return buckets.add(fail); }, null);
                Joove.Common.nullSafe(function () { return buckets.add(success); }, null);
                return buckets;
            };
            Convertor.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ConvertorKey == null || $this.ConvertorKey == 0;
            };
            return Convertor;
        }());
        BO.Convertor = Convertor;
        var HIstogramBucket = (function () {
            function HIstogramBucket() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.key = 0;
            }
            HIstogramBucket.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.key == null || $this.key == 0;
            };
            return HIstogramBucket;
        }());
        BO.HIstogramBucket = HIstogramBucket;
        var Error = (function () {
            function Error() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Error";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.ErrorKey = 0;
            }
            Error.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ErrorKey == null || $this.ErrorKey == 0;
            };
            return Error;
        }());
        BO.Error = Error;
        var QueryBuilder = (function () {
            function QueryBuilder() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.QueryBuilder";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.QueryBuilderKey = 0;
            }
            QueryBuilder.GetClientToken = function (username) {
                var q = "+ClientId";
                return q;
            };
            QueryBuilder.GetQuery = function (username, product, service) {
                var clientKeys = Joove.Common.nullSafe(function () { return DSS2_SynchromodalityCapacityOptimisation.BO.QueryBuilder.GetClientToken(username); }, "");
                var q = "+tags:exposed " + clientKeys;
                if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
                    return product.trim();
                }, "")); }, false)))) {
                    q = q + " +Product:" + product;
                }
                if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
                    return service.trim();
                }, "")); }, false)))) {
                    q = q + " +Service:" + service;
                }
                return q;
            };
            QueryBuilder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.QueryBuilderKey == null || $this.QueryBuilderKey == 0;
            };
            return QueryBuilder;
        }());
        BO.QueryBuilder = QueryBuilder;
        var DeliverySchedule = (function () {
            function DeliverySchedule() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            DeliverySchedule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DeliverySchedule;
        }());
        DeliverySchedule.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        DeliverySchedule.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeDeliverySchedules(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addDeliverySchedules(value, $this);
            }
        };
        DeliverySchedule.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.DeliverySchedule = DeliverySchedule;
        var Category = (function () {
            function Category() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Category";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.SubCategory = [];
                this['_key'] = this.Id = 0;
            }
            Category.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Category;
        }());
        Category.setSubCategory = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SubCategory == null)
                $this.SubCategory = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SubCategory.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Category.removeSubCategory($this, $this.SubCategory[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Category.addManySubCategory($this, copyItems);
        };
        Category.addManySubCategory = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Category.addSubCategory($this, items[i]);
            }
        };
        Category.addSubCategory = function ($this, item) {
            if ($this.SubCategory == null)
                $this.SubCategory = [];
            if (item == null || $this.SubCategory.indexOf(item) > -1)
                return;
            $this.SubCategory.push(item);
            if (item.Category != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.setCategory(item, $this);
            }
        };
        Category.addRangeSubCategory = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Category.addSubCategory($this, item); });
        };
        Category.removeSubCategory = function ($this, item) {
            if ($this == null || $this.SubCategory == null || $this.SubCategory.indexOf(item) === -1)
                return;
            var _index = $this.SubCategory.indexOf(item);
            $this.SubCategory.splice(_index, 1);
            item.Category = null;
        };
        Category.clearSubCategory = function ($this) {
            $this.SubCategory = null;
        };
        Category.setBusinessUnit = function ($this, value) {
            var oldValue = $this.BusinessUnit;
            $this.BusinessUnit = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.removeCategories(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addCategories(value, $this);
            }
        };
        BO.Category = Category;
        var SubCategory = (function () {
            function SubCategory() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.BaseUnits = [];
                this['_key'] = this.Id = 0;
            }
            SubCategory.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SubCategory;
        }());
        SubCategory.setCategory = function ($this, value) {
            var oldValue = $this.Category;
            $this.Category = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Category.removeSubCategory(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Category.addSubCategory(value, $this);
            }
        };
        SubCategory.setBaseUnits = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.BaseUnits == null)
                $this.BaseUnits = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.BaseUnits.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.removeBaseUnits($this, $this.BaseUnits[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addManyBaseUnits($this, copyItems);
        };
        SubCategory.addManyBaseUnits = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addBaseUnits($this, items[i]);
            }
        };
        SubCategory.addBaseUnits = function ($this, item) {
            if ($this.BaseUnits == null)
                $this.BaseUnits = [];
            if (item == null || $this.BaseUnits.indexOf(item) > -1)
                return;
            $this.BaseUnits.push(item);
            if (item.SubCategory != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit.setSubCategory(item, $this);
            }
        };
        SubCategory.addRangeBaseUnits = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addBaseUnits($this, item); });
        };
        SubCategory.removeBaseUnits = function ($this, item) {
            if ($this == null || $this.BaseUnits == null || $this.BaseUnits.indexOf(item) === -1)
                return;
            var _index = $this.BaseUnits.indexOf(item);
            $this.BaseUnits.splice(_index, 1);
            item.SubCategory = null;
        };
        SubCategory.clearBaseUnits = function ($this) {
            $this.BaseUnits = null;
        };
        BO.SubCategory = SubCategory;
        var BusinessUnit = (function () {
            function BusinessUnit() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Categories = [];
                this['_key'] = this.Id = 0;
            }
            BusinessUnit.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return BusinessUnit;
        }());
        BusinessUnit.setCategories = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Categories == null)
                $this.Categories = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Categories.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.removeCategories($this, $this.Categories[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addManyCategories($this, copyItems);
        };
        BusinessUnit.addManyCategories = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addCategories($this, items[i]);
            }
        };
        BusinessUnit.addCategories = function ($this, item) {
            if ($this.Categories == null)
                $this.Categories = [];
            if (item == null || $this.Categories.indexOf(item) > -1)
                return;
            $this.Categories.push(item);
            if (item.BusinessUnit != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Category.setBusinessUnit(item, $this);
            }
        };
        BusinessUnit.addRangeCategories = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.addCategories($this, item); });
        };
        BusinessUnit.removeCategories = function ($this, item) {
            if ($this == null || $this.Categories == null || $this.Categories.indexOf(item) === -1)
                return;
            var _index = $this.Categories.indexOf(item);
            $this.Categories.splice(_index, 1);
            item.BusinessUnit = null;
        };
        BusinessUnit.clearCategories = function ($this) {
            $this.Categories = null;
        };
        BusinessUnit.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null && oldValue.BusinessUnit != null) {
                    oldValue.BusinessUnit = null;
                }
                if ($this.Supplier.BusinessUnit !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Supplier.setBusinessUnit(value, $this);
                }
            }
        };
        BO.BusinessUnit = BusinessUnit;
        var BaseUnit = (function () {
            function BaseUnit() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            BaseUnit.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return BaseUnit;
        }());
        BaseUnit.setSubCategory = function ($this, value) {
            var oldValue = $this.SubCategory;
            $this.SubCategory = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.removeBaseUnits(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory.addBaseUnits(value, $this);
            }
        };
        BO.BaseUnit = BaseUnit;
        var InventoryItem = (function () {
            function InventoryItem() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            InventoryItem.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return InventoryItem;
        }());
        InventoryItem.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeInventoryItems(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addInventoryItems(value, $this);
            }
        };
        InventoryItem.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.InventoryItem = InventoryItem;
        var Item = (function () {
            function Item() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Item";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Agreements = [];
                this.DeliverySchedules = [];
                this.InventoryItems = [];
                this.SupplierCapacities = [];
                this.Notifications = [];
                this.PastOrders = [];
                this.ItemsForecast = [];
                this.SLALeadTimes = [];
                this.SLADeliveries = [];
                this.StocksOnHand = [];
                this.CoverageDays = 1;
                this['_key'] = this.SKU = "";
            }
            Item.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.SKU == null || $this.SKU == "";
            };
            return Item;
        }());
        Item.setAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Agreements == null)
                $this.Agreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Agreements.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeAgreements($this, $this.Agreements[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyAgreements($this, copyItems);
        };
        Item.addManyAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addAgreements($this, items[i]);
            }
        };
        Item.addAgreements = function ($this, item) {
            if ($this.Agreements == null)
                $this.Agreements = [];
            if (item == null || $this.Agreements.indexOf(item) > -1)
                return;
            $this.Agreements.push(item);
            Agreement.addItems(item, $this);
        };
        Item.addRangeAgreements = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addAgreements($this, item); });
        };
        Item.removeAgreements = function ($this, item) {
            if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1)
                return;
            var _index = $this.Agreements.indexOf(item);
            $this.Agreements.splice(_index, 1);
            Agreement.removeItems(item, $this);
        };
        Item.clearAgreements = function ($this) {
            $this.Agreements = null;
        };
        Item.setDeliverySchedules = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.DeliverySchedules == null)
                $this.DeliverySchedules = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.DeliverySchedules.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeDeliverySchedules($this, $this.DeliverySchedules[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyDeliverySchedules($this, copyItems);
        };
        Item.addManyDeliverySchedules = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addDeliverySchedules($this, items[i]);
            }
        };
        Item.addDeliverySchedules = function ($this, item) {
            if ($this.DeliverySchedules == null)
                $this.DeliverySchedules = [];
            if (item == null || $this.DeliverySchedules.indexOf(item) > -1)
                return;
            $this.DeliverySchedules.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule.setItem(item, $this);
            }
        };
        Item.addRangeDeliverySchedules = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addDeliverySchedules($this, item); });
        };
        Item.removeDeliverySchedules = function ($this, item) {
            if ($this == null || $this.DeliverySchedules == null || $this.DeliverySchedules.indexOf(item) === -1)
                return;
            var _index = $this.DeliverySchedules.indexOf(item);
            $this.DeliverySchedules.splice(_index, 1);
            item.Item = null;
        };
        Item.clearDeliverySchedules = function ($this) {
            $this.DeliverySchedules = null;
        };
        Item.setInventoryItems = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.InventoryItems == null)
                $this.InventoryItems = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.InventoryItems.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeInventoryItems($this, $this.InventoryItems[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyInventoryItems($this, copyItems);
        };
        Item.addManyInventoryItems = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addInventoryItems($this, items[i]);
            }
        };
        Item.addInventoryItems = function ($this, item) {
            if ($this.InventoryItems == null)
                $this.InventoryItems = [];
            if (item == null || $this.InventoryItems.indexOf(item) > -1)
                return;
            $this.InventoryItems.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem.setItem(item, $this);
            }
        };
        Item.addRangeInventoryItems = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addInventoryItems($this, item); });
        };
        Item.removeInventoryItems = function ($this, item) {
            if ($this == null || $this.InventoryItems == null || $this.InventoryItems.indexOf(item) === -1)
                return;
            var _index = $this.InventoryItems.indexOf(item);
            $this.InventoryItems.splice(_index, 1);
            item.Item = null;
        };
        Item.clearInventoryItems = function ($this) {
            $this.InventoryItems = null;
        };
        Item.setSupplierCapacities = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SupplierCapacities == null)
                $this.SupplierCapacities = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SupplierCapacities.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSupplierCapacities($this, $this.SupplierCapacities[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManySupplierCapacities($this, copyItems);
        };
        Item.addManySupplierCapacities = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSupplierCapacities($this, items[i]);
            }
        };
        Item.addSupplierCapacities = function ($this, item) {
            if ($this.SupplierCapacities == null)
                $this.SupplierCapacities = [];
            if (item == null || $this.SupplierCapacities.indexOf(item) > -1)
                return;
            $this.SupplierCapacities.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity.setItem(item, $this);
            }
        };
        Item.addRangeSupplierCapacities = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSupplierCapacities($this, item); });
        };
        Item.removeSupplierCapacities = function ($this, item) {
            if ($this == null || $this.SupplierCapacities == null || $this.SupplierCapacities.indexOf(item) === -1)
                return;
            var _index = $this.SupplierCapacities.indexOf(item);
            $this.SupplierCapacities.splice(_index, 1);
            item.Item = null;
        };
        Item.clearSupplierCapacities = function ($this) {
            $this.SupplierCapacities = null;
        };
        Item.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        Item.setBusinessUnit = function ($this, value) {
            var oldValue = $this.BusinessUnit;
            $this.BusinessUnit = value;
            if (value != null) {
            }
        };
        Item.setCategory = function ($this, value) {
            var oldValue = $this.Category;
            $this.Category = value;
            if (value != null) {
            }
        };
        Item.setSubCategory = function ($this, value) {
            var oldValue = $this.SubCategory;
            $this.SubCategory = value;
            if (value != null) {
            }
        };
        Item.setBaseUnit = function ($this, value) {
            var oldValue = $this.BaseUnit;
            $this.BaseUnit = value;
            if (value != null) {
            }
        };
        Item.setMinimumQuantity = function ($this, value) {
            var oldValue = $this.MinimumQuantity;
            $this.MinimumQuantity = value;
            if (value != null) {
                if (oldValue != null && oldValue.Item != null) {
                    oldValue.Item = null;
                }
                if ($this.MinimumQuantity.Item !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.MinimumQuantity.setItem(value, $this);
                }
            }
        };
        Item.setNotifications = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Notifications == null)
                $this.Notifications = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Notifications.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeNotifications($this, $this.Notifications[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyNotifications($this, copyItems);
        };
        Item.addManyNotifications = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addNotifications($this, items[i]);
            }
        };
        Item.addNotifications = function ($this, item) {
            if ($this.Notifications == null)
                $this.Notifications = [];
            if (item == null || $this.Notifications.indexOf(item) > -1)
                return;
            $this.Notifications.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Notification.setItem(item, $this);
            }
        };
        Item.addRangeNotifications = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addNotifications($this, item); });
        };
        Item.removeNotifications = function ($this, item) {
            if ($this == null || $this.Notifications == null || $this.Notifications.indexOf(item) === -1)
                return;
            var _index = $this.Notifications.indexOf(item);
            $this.Notifications.splice(_index, 1);
            item.Item = null;
        };
        Item.clearNotifications = function ($this) {
            $this.Notifications = null;
        };
        Item.setPastOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PastOrders == null)
                $this.PastOrders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PastOrders.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removePastOrders($this, $this.PastOrders[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyPastOrders($this, copyItems);
        };
        Item.addManyPastOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addPastOrders($this, items[i]);
            }
        };
        Item.addPastOrders = function ($this, item) {
            if ($this.PastOrders == null)
                $this.PastOrders = [];
            if (item == null || $this.PastOrders.indexOf(item) > -1)
                return;
            $this.PastOrders.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder.setItem(item, $this);
            }
        };
        Item.addRangePastOrders = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addPastOrders($this, item); });
        };
        Item.removePastOrders = function ($this, item) {
            if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1)
                return;
            var _index = $this.PastOrders.indexOf(item);
            $this.PastOrders.splice(_index, 1);
            item.Item = null;
        };
        Item.clearPastOrders = function ($this) {
            $this.PastOrders = null;
        };
        Item.setItemsForecast = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ItemsForecast == null)
                $this.ItemsForecast = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ItemsForecast.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeItemsForecast($this, $this.ItemsForecast[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyItemsForecast($this, copyItems);
        };
        Item.addManyItemsForecast = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addItemsForecast($this, items[i]);
            }
        };
        Item.addItemsForecast = function ($this, item) {
            if ($this.ItemsForecast == null)
                $this.ItemsForecast = [];
            if (item == null || $this.ItemsForecast.indexOf(item) > -1)
                return;
            $this.ItemsForecast.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Sales.setItem(item, $this);
            }
        };
        Item.addRangeItemsForecast = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addItemsForecast($this, item); });
        };
        Item.removeItemsForecast = function ($this, item) {
            if ($this == null || $this.ItemsForecast == null || $this.ItemsForecast.indexOf(item) === -1)
                return;
            var _index = $this.ItemsForecast.indexOf(item);
            $this.ItemsForecast.splice(_index, 1);
            item.Item = null;
        };
        Item.clearItemsForecast = function ($this) {
            $this.ItemsForecast = null;
        };
        Item.setSLALeadTimes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SLALeadTimes == null)
                $this.SLALeadTimes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SLALeadTimes.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLALeadTimes($this, $this.SLALeadTimes[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManySLALeadTimes($this, copyItems);
        };
        Item.addManySLALeadTimes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLALeadTimes($this, items[i]);
            }
        };
        Item.addSLALeadTimes = function ($this, item) {
            if ($this.SLALeadTimes == null)
                $this.SLALeadTimes = [];
            if (item == null || $this.SLALeadTimes.indexOf(item) > -1)
                return;
            $this.SLALeadTimes.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SLALeadTime.setItem(item, $this);
            }
        };
        Item.addRangeSLALeadTimes = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLALeadTimes($this, item); });
        };
        Item.removeSLALeadTimes = function ($this, item) {
            if ($this == null || $this.SLALeadTimes == null || $this.SLALeadTimes.indexOf(item) === -1)
                return;
            var _index = $this.SLALeadTimes.indexOf(item);
            $this.SLALeadTimes.splice(_index, 1);
            item.Item = null;
        };
        Item.clearSLALeadTimes = function ($this) {
            $this.SLALeadTimes = null;
        };
        Item.setSLADeliveries = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SLADeliveries == null)
                $this.SLADeliveries = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SLADeliveries.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLADeliveries($this, $this.SLADeliveries[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManySLADeliveries($this, copyItems);
        };
        Item.addManySLADeliveries = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLADeliveries($this, items[i]);
            }
        };
        Item.addSLADeliveries = function ($this, item) {
            if ($this.SLADeliveries == null)
                $this.SLADeliveries = [];
            if (item == null || $this.SLADeliveries.indexOf(item) > -1)
                return;
            $this.SLADeliveries.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SLADelivery.setItem(item, $this);
            }
        };
        Item.addRangeSLADeliveries = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLADeliveries($this, item); });
        };
        Item.removeSLADeliveries = function ($this, item) {
            if ($this == null || $this.SLADeliveries == null || $this.SLADeliveries.indexOf(item) === -1)
                return;
            var _index = $this.SLADeliveries.indexOf(item);
            $this.SLADeliveries.splice(_index, 1);
            item.Item = null;
        };
        Item.clearSLADeliveries = function ($this) {
            $this.SLADeliveries = null;
        };
        Item.setStocksOnHand = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.StocksOnHand == null)
                $this.StocksOnHand = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.StocksOnHand.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeStocksOnHand($this, $this.StocksOnHand[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Item.addManyStocksOnHand($this, copyItems);
        };
        Item.addManyStocksOnHand = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addStocksOnHand($this, items[i]);
            }
        };
        Item.addStocksOnHand = function ($this, item) {
            if ($this.StocksOnHand == null)
                $this.StocksOnHand = [];
            if (item == null || $this.StocksOnHand.indexOf(item) > -1)
                return;
            $this.StocksOnHand.push(item);
            if (item.Item != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand.setItem(item, $this);
            }
        };
        Item.addRangeStocksOnHand = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Item.addStocksOnHand($this, item); });
        };
        Item.removeStocksOnHand = function ($this, item) {
            if ($this == null || $this.StocksOnHand == null || $this.StocksOnHand.indexOf(item) === -1)
                return;
            var _index = $this.StocksOnHand.indexOf(item);
            $this.StocksOnHand.splice(_index, 1);
            item.Item = null;
        };
        Item.clearStocksOnHand = function ($this) {
            $this.StocksOnHand = null;
        };
        BO.Item = Item;
        var SupplierCapacity = (function () {
            function SupplierCapacity() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierCapacity.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierCapacity;
        }());
        SupplierCapacity.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSupplierCapacities(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSupplierCapacities(value, $this);
            }
        };
        SupplierCapacity.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        BO.SupplierCapacity = SupplierCapacity;
        var WasteOld = (function () {
            function WasteOld() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.WasteOld";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            WasteOld.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return WasteOld;
        }());
        WasteOld.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        BO.WasteOld = WasteOld;
        var MinimumQuantity = (function () {
            function MinimumQuantity() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.MinimumQuantity";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            MinimumQuantity.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return MinimumQuantity;
        }());
        MinimumQuantity.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null && oldValue.MinimumQuantity != null) {
                    oldValue.MinimumQuantity = null;
                }
                if ($this.Item.MinimumQuantity !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.setMinimumQuantity(value, $this);
                }
            }
        };
        MinimumQuantity.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        BO.MinimumQuantity = MinimumQuantity;
        var Notification = (function () {
            function Notification() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Notification";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Notification.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Notification;
        }());
        Notification.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeNotifications(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addNotifications(value, $this);
            }
        };
        Notification.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        Notification.setOrderForecastDetails = function ($this, value) {
            var oldValue = $this.OrderForecastDetails;
            $this.OrderForecastDetails = value;
            if (value != null) {
                if (oldValue != null && oldValue.Notification != null) {
                    oldValue.Notification = null;
                }
                if ($this.OrderForecastDetails.Notification !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.setNotification(value, $this);
                }
            }
        };
        BO.Notification = Notification;
        var OrderFDashboard = (function () {
            function OrderFDashboard() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.OrderForecastStatistics = [];
                this['_key'] = this.Id = 0;
            }
            OrderFDashboard.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderFDashboard;
        }());
        OrderFDashboard.setOrderForecastStatistics = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OrderForecastStatistics == null)
                $this.OrderForecastStatistics = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OrderForecastStatistics.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.removeOrderForecastStatistics($this, $this.OrderForecastStatistics[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.addManyOrderForecastStatistics($this, copyItems);
        };
        OrderFDashboard.addManyOrderForecastStatistics = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, items[i]);
            }
        };
        OrderFDashboard.addOrderForecastStatistics = function ($this, item) {
            if ($this.OrderForecastStatistics == null)
                $this.OrderForecastStatistics = [];
            if (item == null || $this.OrderForecastStatistics.indexOf(item) > -1)
                return;
            $this.OrderForecastStatistics.push(item);
        };
        OrderFDashboard.addRangeOrderForecastStatistics = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, item); });
        };
        OrderFDashboard.removeOrderForecastStatistics = function ($this, item) {
            if ($this == null || $this.OrderForecastStatistics == null || $this.OrderForecastStatistics.indexOf(item) === -1)
                return;
            var _index = $this.OrderForecastStatistics.indexOf(item);
            $this.OrderForecastStatistics.splice(_index, 1);
        };
        OrderFDashboard.clearOrderForecastStatistics = function ($this) {
            $this.OrderForecastStatistics = null;
        };
        BO.OrderFDashboard = OrderFDashboard;
        var OrderForecastStatistic = (function () {
            function OrderForecastStatistic() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastStatistic";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OrderForecastStatistic.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderForecastStatistic;
        }());
        OrderForecastStatistic.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        OrderForecastStatistic.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.OrderForecastStatistic = OrderForecastStatistic;
        var OrderForecastDetails = (function () {
            function OrderForecastDetails() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Comments = [];
                this['_key'] = this.Id = 0;
            }
            OrderForecastDetails.Get_OrderInventoryDays = function ($this) {
                return 0;
            };
            OrderForecastDetails.Get_RoundQuantity = function ($this) {
                var minQuantity = (Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () { return $this.Item.MinimumQuantity.Quantity.toString(); }, "")); }, false) ? 0 : Joove.Common.nullSafe(function () { return $this.Item.MinimumQuantity.Quantity; }, 0));
                if (CLMS.Framework.Number.Equal(function () { return minQuantity; }, function () { return 0; })) {
                    return 0;
                }
                return Joove.Common.cast((Joove.Common.safeNumber((parseInt(((Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return $this.Quantity; }, 0)) / Joove.Common.safeNumber(minQuantity))) + Joove.Common.safeNumber(1)))))) * Joove.Common.safeNumber(minQuantity)), "int?");
            };
            OrderForecastDetails.GetDictionaryKey = function (itemSKU, warehouseCode) {
                return "item_" + itemSKU + "_warehouse_" + warehouseCode;
            };
            OrderForecastDetails.PalletsToUnits = function (item, pallets) {
                var palletSize = Joove.Common.nullSafe(function () { return item.PalletSize; }, 0);
                var numberOfUnits = parseInt(((Joove.Common.safeNumber(pallets) * Joove.Common.safeNumber(palletSize))));
                Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Units: " + Joove.Common.safeNumber(numberOfUnits) + " for item: " + Joove.Common.nullSafe(function () { return item.SKU; }, "") + " pallets are: " + Joove.Common.safeNumber(pallets) + " pallet size is: " + Joove.Common.safeNumber(palletSize)); }, null);
                return numberOfUnits;
            };
            OrderForecastDetails.UnitsToPallets = function (item, units) {
                var palletSize = Joove.Common.nullSafe(function () { return item.PalletSize; }, 0);
                var numberOfPallets = 0.0;
                if (CLMS.Framework.Number.GreaterThan(function () { return palletSize; }, function () { return 0; })) {
                    numberOfPallets = Joove.Common.safeNumber(units) / Joove.Common.safeNumber(palletSize);
                }
                return numberOfPallets;
            };
            OrderForecastDetails.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderForecastDetails;
        }());
        OrderForecastDetails.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        OrderForecastDetails.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        OrderForecastDetails.setOrderForecast = function ($this, value) {
            var oldValue = $this.OrderForecast;
            $this.OrderForecast = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeOrderForecastDetails(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addOrderForecastDetails(value, $this);
            }
        };
        OrderForecastDetails.setNotification = function ($this, value) {
            var oldValue = $this.Notification;
            $this.Notification = value;
            if (value != null) {
                if (oldValue != null && oldValue.OrderForecastDetails != null) {
                    oldValue.OrderForecastDetails = null;
                }
                if ($this.Notification.OrderForecastDetails !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Notification.setOrderForecastDetails(value, $this);
                }
            }
        };
        OrderForecastDetails.setComments = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Comments == null)
                $this.Comments = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Comments.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.removeComments($this, $this.Comments[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.addManyComments($this, copyItems);
        };
        OrderForecastDetails.addManyComments = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.addComments($this, items[i]);
            }
        };
        OrderForecastDetails.addComments = function ($this, item) {
            if ($this.Comments == null)
                $this.Comments = [];
            if (item == null || $this.Comments.indexOf(item) > -1)
                return;
            $this.Comments.push(item);
        };
        OrderForecastDetails.addRangeComments = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.addComments($this, item); });
        };
        OrderForecastDetails.removeComments = function ($this, item) {
            if ($this == null || $this.Comments == null || $this.Comments.indexOf(item) === -1)
                return;
            var _index = $this.Comments.indexOf(item);
            $this.Comments.splice(_index, 1);
        };
        OrderForecastDetails.clearComments = function ($this) {
            $this.Comments = null;
        };
        BO.OrderForecastDetails = OrderForecastDetails;
        var ProposedOrder = (function () {
            function ProposedOrder() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Units = 0;
                this.Finished = false;
                this.CurrentStockUnits = 0;
                this.Initialized = false;
                this.RealOrderUnits = 0;
                this['_key'] = this.Id = 0;
            }
            ProposedOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProposedOrder;
        }());
        BO.ProposedOrder = ProposedOrder;
        var ConstValues = (function () {
            function ConstValues() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ConstValues";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.StockLowLimit = -99999999;
                this['_key'] = this.Id = 0;
            }
            ConstValues.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ConstValues;
        }());
        BO.ConstValues = ConstValues;
        var OrderForecast = (function () {
            function OrderForecast() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.OrderForecastDetails = [];
                this.SupplierParameters = [];
                this.ItemParameters = [];
                this['_key'] = this.Id = 0;
            }
            OrderForecast.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderForecast;
        }());
        OrderForecast.setOrderForecastDetails = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OrderForecastDetails == null)
                $this.OrderForecastDetails = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OrderForecastDetails.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeOrderForecastDetails($this, $this.OrderForecastDetails[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addManyOrderForecastDetails($this, copyItems);
        };
        OrderForecast.addManyOrderForecastDetails = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addOrderForecastDetails($this, items[i]);
            }
        };
        OrderForecast.addOrderForecastDetails = function ($this, item) {
            if ($this.OrderForecastDetails == null)
                $this.OrderForecastDetails = [];
            if (item == null || $this.OrderForecastDetails.indexOf(item) > -1)
                return;
            $this.OrderForecastDetails.push(item);
            if (item.OrderForecast != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails.setOrderForecast(item, $this);
            }
        };
        OrderForecast.addRangeOrderForecastDetails = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addOrderForecastDetails($this, item); });
        };
        OrderForecast.removeOrderForecastDetails = function ($this, item) {
            if ($this == null || $this.OrderForecastDetails == null || $this.OrderForecastDetails.indexOf(item) === -1)
                return;
            var _index = $this.OrderForecastDetails.indexOf(item);
            $this.OrderForecastDetails.splice(_index, 1);
            item.OrderForecast = null;
        };
        OrderForecast.clearOrderForecastDetails = function ($this) {
            $this.OrderForecastDetails = null;
        };
        OrderForecast.setSalesForecast = function ($this, value) {
            var oldValue = $this.SalesForecast;
            $this.SalesForecast = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeOrderForecasts(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addOrderForecasts(value, $this);
            }
        };
        OrderForecast.setSupplierParameters = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SupplierParameters == null)
                $this.SupplierParameters = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SupplierParameters.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeSupplierParameters($this, $this.SupplierParameters[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addManySupplierParameters($this, copyItems);
        };
        OrderForecast.addManySupplierParameters = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addSupplierParameters($this, items[i]);
            }
        };
        OrderForecast.addSupplierParameters = function ($this, item) {
            if ($this.SupplierParameters == null)
                $this.SupplierParameters = [];
            if (item == null || $this.SupplierParameters.indexOf(item) > -1)
                return;
            $this.SupplierParameters.push(item);
            if (item.OrderForecast != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter.setOrderForecast(item, $this);
            }
        };
        OrderForecast.addRangeSupplierParameters = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addSupplierParameters($this, item); });
        };
        OrderForecast.removeSupplierParameters = function ($this, item) {
            if ($this == null || $this.SupplierParameters == null || $this.SupplierParameters.indexOf(item) === -1)
                return;
            var _index = $this.SupplierParameters.indexOf(item);
            $this.SupplierParameters.splice(_index, 1);
            item.OrderForecast = null;
        };
        OrderForecast.clearSupplierParameters = function ($this) {
            $this.SupplierParameters = null;
        };
        OrderForecast.setItemParameters = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ItemParameters == null)
                $this.ItemParameters = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ItemParameters.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeItemParameters($this, $this.ItemParameters[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addManyItemParameters($this, copyItems);
        };
        OrderForecast.addManyItemParameters = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addItemParameters($this, items[i]);
            }
        };
        OrderForecast.addItemParameters = function ($this, item) {
            if ($this.ItemParameters == null)
                $this.ItemParameters = [];
            if (item == null || $this.ItemParameters.indexOf(item) > -1)
                return;
            $this.ItemParameters.push(item);
        };
        OrderForecast.addRangeItemParameters = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addItemParameters($this, item); });
        };
        OrderForecast.removeItemParameters = function ($this, item) {
            if ($this == null || $this.ItemParameters == null || $this.ItemParameters.indexOf(item) === -1)
                return;
            var _index = $this.ItemParameters.indexOf(item);
            $this.ItemParameters.splice(_index, 1);
        };
        OrderForecast.clearItemParameters = function ($this) {
            $this.ItemParameters = null;
        };
        BO.OrderForecast = OrderForecast;
        var ItemParameter = (function () {
            function ItemParameter() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ItemParameter.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ItemParameter;
        }());
        ItemParameter.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        BO.ItemParameter = ItemParameter;
        var SupplierParameter = (function () {
            function SupplierParameter() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierParameter.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierParameter;
        }());
        SupplierParameter.setOrderForecast = function ($this, value) {
            var oldValue = $this.OrderForecast;
            $this.OrderForecast = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.removeSupplierParameters(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.addSupplierParameters(value, $this);
            }
        };
        SupplierParameter.setAgreement = function ($this, value) {
            var oldValue = $this.Agreement;
            $this.Agreement = value;
            if (value != null) {
            }
        };
        BO.SupplierParameter = SupplierParameter;
        var Comment = (function () {
            function Comment() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Comment";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Comment.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Comment;
        }());
        BO.Comment = Comment;
        var PastOrder = (function () {
            function PastOrder() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            PastOrder.DiffDates = function () { };
            PastOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PastOrder;
        }());
        PastOrder.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removePastOrders(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addPastOrders(value, $this);
            }
        };
        PastOrder.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.removePastOrders(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addPastOrders(value, $this);
            }
        };
        BO.PastOrder = PastOrder;
        var Sales = (function () {
            function Sales() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Sales";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Sales.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Sales;
        }());
        Sales.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeItemsForecast(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addItemsForecast(value, $this);
            }
        };
        Sales.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.Sales = Sales;
        var SalesForecast = (function () {
            function SalesForecast() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.OrderForecasts = [];
                this.SalesForecastDetails = [];
                this['_key'] = this.Id = 0;
            }
            SalesForecast.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SalesForecast;
        }());
        SalesForecast.setOrderForecasts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OrderForecasts == null)
                $this.OrderForecasts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OrderForecasts.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeOrderForecasts($this, $this.OrderForecasts[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addManyOrderForecasts($this, copyItems);
        };
        SalesForecast.addManyOrderForecasts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addOrderForecasts($this, items[i]);
            }
        };
        SalesForecast.addOrderForecasts = function ($this, item) {
            if ($this.OrderForecasts == null)
                $this.OrderForecasts = [];
            if (item == null || $this.OrderForecasts.indexOf(item) > -1)
                return;
            $this.OrderForecasts.push(item);
            if (item.SalesForecast != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast.setSalesForecast(item, $this);
            }
        };
        SalesForecast.addRangeOrderForecasts = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addOrderForecasts($this, item); });
        };
        SalesForecast.removeOrderForecasts = function ($this, item) {
            if ($this == null || $this.OrderForecasts == null || $this.OrderForecasts.indexOf(item) === -1)
                return;
            var _index = $this.OrderForecasts.indexOf(item);
            $this.OrderForecasts.splice(_index, 1);
            item.SalesForecast = null;
        };
        SalesForecast.clearOrderForecasts = function ($this) {
            $this.OrderForecasts = null;
        };
        SalesForecast.setSalesForecastDetails = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SalesForecastDetails == null)
                $this.SalesForecastDetails = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SalesForecastDetails.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeSalesForecastDetails($this, $this.SalesForecastDetails[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addManySalesForecastDetails($this, copyItems);
        };
        SalesForecast.addManySalesForecastDetails = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addSalesForecastDetails($this, items[i]);
            }
        };
        SalesForecast.addSalesForecastDetails = function ($this, item) {
            if ($this.SalesForecastDetails == null)
                $this.SalesForecastDetails = [];
            if (item == null || $this.SalesForecastDetails.indexOf(item) > -1)
                return;
            $this.SalesForecastDetails.push(item);
            if (item.SalesForecast != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails.setSalesForecast(item, $this);
            }
        };
        SalesForecast.addRangeSalesForecastDetails = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addSalesForecastDetails($this, item); });
        };
        SalesForecast.removeSalesForecastDetails = function ($this, item) {
            if ($this == null || $this.SalesForecastDetails == null || $this.SalesForecastDetails.indexOf(item) === -1)
                return;
            var _index = $this.SalesForecastDetails.indexOf(item);
            $this.SalesForecastDetails.splice(_index, 1);
            item.SalesForecast = null;
        };
        SalesForecast.clearSalesForecastDetails = function ($this) {
            $this.SalesForecastDetails = null;
        };
        BO.SalesForecast = SalesForecast;
        var SLALeadTime = (function () {
            function SLALeadTime() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SLALeadTime";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SLALeadTime.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SLALeadTime;
        }());
        SLALeadTime.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLALeadTimes(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLALeadTimes(value, $this);
            }
        };
        SLALeadTime.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.SLALeadTime = SLALeadTime;
        var SLADelivery = (function () {
            function SLADelivery() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SLADelivery";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SLADelivery.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SLADelivery;
        }());
        SLADelivery.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeSLADeliveries(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addSLADeliveries(value, $this);
            }
        };
        SLADelivery.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.SLADelivery = SLADelivery;
        var Platform = (function () {
            function Platform() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Platform";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Platform.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Platform;
        }());
        Platform.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        Platform.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.Platform = Platform;
        var SLAStatistics = (function () {
            function SLAStatistics() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SLAStatistics";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SLAStatistics.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SLAStatistics;
        }());
        SLAStatistics.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        BO.SLAStatistics = SLAStatistics;
        var InventoryDaysKPI = (function () {
            function InventoryDaysKPI() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.InventoryDaysKPI";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.InventoryDaysKPIKey = 0;
            }
            InventoryDaysKPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.InventoryDaysKPIKey == null || $this.InventoryDaysKPIKey == 0;
            };
            return InventoryDaysKPI;
        }());
        BO.InventoryDaysKPI = InventoryDaysKPI;
        var UnitsKPI = (function () {
            function UnitsKPI() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.UnitsKPI";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            UnitsKPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return UnitsKPI;
        }());
        BO.UnitsKPI = UnitsKPI;
        var Stats = (function () {
            function Stats() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Stats";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Stats.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Stats;
        }());
        Stats.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        Stats.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
            }
        };
        BO.Stats = Stats;
        var StockOnHand = (function () {
            function StockOnHand() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            StockOnHand.DailyStock = function () { };
            StockOnHand.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return StockOnHand;
        }());
        StockOnHand.setAgreement = function ($this, value) {
            var oldValue = $this.Agreement;
            $this.Agreement = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.removeStockOnHands(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Agreement.addStockOnHands(value, $this);
            }
        };
        StockOnHand.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        StockOnHand.setItem = function ($this, value) {
            var oldValue = $this.Item;
            $this.Item = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item.removeStocksOnHand(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Item.addStocksOnHand(value, $this);
            }
        };
        BO.StockOnHand = StockOnHand;
        var Store = (function () {
            function Store() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Store";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Store.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Store;
        }());
        BO.Store = Store;
        var TransportUnCap = (function () {
            function TransportUnCap() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TransportUnCap";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            TransportUnCap.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return TransportUnCap;
        }());
        TransportUnCap.setWarehouse = function ($this, value) {
            var oldValue = $this.Warehouse;
            $this.Warehouse = value;
            if (value != null) {
            }
        };
        BO.TransportUnCap = TransportUnCap;
        var Warehouse = (function () {
            function Warehouse() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.RegionalAgentsService = [];
                this.PastOrders = [];
                this['_key'] = this.Id = 0;
            }
            Warehouse.InitWarehouse = function () { };
            Warehouse.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Warehouse;
        }());
        Warehouse.setGeoCoordinates = function ($this, value) {
            var oldValue = $this.GeoCoordinates;
            $this.GeoCoordinates = value;
            if (value != null) {
            }
        };
        Warehouse.setRegionalAgentsService = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.RegionalAgentsService == null)
                $this.RegionalAgentsService = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.RegionalAgentsService.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.removeRegionalAgentsService($this, $this.RegionalAgentsService[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addManyRegionalAgentsService($this, copyItems);
        };
        Warehouse.addManyRegionalAgentsService = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addRegionalAgentsService($this, items[i]);
            }
        };
        Warehouse.addRegionalAgentsService = function ($this, item) {
            if ($this.RegionalAgentsService == null)
                $this.RegionalAgentsService = [];
            if (item == null || $this.RegionalAgentsService.indexOf(item) > -1)
                return;
            $this.RegionalAgentsService.push(item);
            RegionalAgent.addWarehousesSupport(item, $this);
        };
        Warehouse.addRangeRegionalAgentsService = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addRegionalAgentsService($this, item); });
        };
        Warehouse.removeRegionalAgentsService = function ($this, item) {
            if ($this == null || $this.RegionalAgentsService == null || $this.RegionalAgentsService.indexOf(item) === -1)
                return;
            var _index = $this.RegionalAgentsService.indexOf(item);
            $this.RegionalAgentsService.splice(_index, 1);
            RegionalAgent.removeWarehousesSupport(item, $this);
        };
        Warehouse.clearRegionalAgentsService = function ($this) {
            $this.RegionalAgentsService = null;
        };
        Warehouse.setPastOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PastOrders == null)
                $this.PastOrders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PastOrders.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.removePastOrders($this, $this.PastOrders[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addManyPastOrders($this, copyItems);
        };
        Warehouse.addManyPastOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addPastOrders($this, items[i]);
            }
        };
        Warehouse.addPastOrders = function ($this, item) {
            if ($this.PastOrders == null)
                $this.PastOrders = [];
            if (item == null || $this.PastOrders.indexOf(item) > -1)
                return;
            $this.PastOrders.push(item);
            if (item.Warehouse != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder.setWarehouse(item, $this);
            }
        };
        Warehouse.addRangePastOrders = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse.addPastOrders($this, item); });
        };
        Warehouse.removePastOrders = function ($this, item) {
            if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1)
                return;
            var _index = $this.PastOrders.indexOf(item);
            $this.PastOrders.splice(_index, 1);
            item.Warehouse = null;
        };
        Warehouse.clearPastOrders = function ($this) {
            $this.PastOrders = null;
        };
        BO.Warehouse = Warehouse;
        var XPackLog = (function () {
            function XPackLog() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.XPackLog";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            XPackLog.GetRecordRequest = function () {
                var req = new Object();
                var query = new Object();
                var boolOp = new Object();
                var mustOp = new Object();
                var queryString = new Object();
                queryString.analyze_wildcard = true;
                queryString.query = "+result_type:\"record\"";
                mustOp.query_string = queryString;
                boolOp.must = mustOp;
                var filter = new Object();
                var range = new Object();
                var timestamp = new Object();
                timestamp.gte = "now-1y";
                timestamp.lte = "now";
                range.timestamp = timestamp;
                filter.range = range;
                boolOp.filter = filter;
                query.Bool = boolOp;
                req.query = query;
                return req;
            };
            XPackLog.Transform = function (logs) {
                var buckets = [];
                var _loop_3 = function (_ibucket) {
                    bucket = logs[_ibucket];
                    var log = new DSS2_SynchromodalityCapacityOptimisation.BO.XPackLog();
                    log.InitialRecordScore = Joove.Common.nullSafe(function () { return bucket.source.initial_record_score; }, 0);
                    log.Actual = Joove.Common.nullSafe(function () { return bucket.source.actual[0]; }, 0);
                    log.PartitionFieldValue = Joove.Common.nullSafe(function () { return bucket.source.partition_field_value; }, "");
                    log.Probability = Joove.Common.nullSafe(function () { return bucket.source.probability; }, 0);
                    log.RecordScore = Joove.Common.nullSafe(function () { return bucket.source.record_score; }, 0);
                    log.Timestamp = Joove.Common.nullSafe(function () { return bucket.source.timestamp; }, 0);
                    log.Typical = Joove.Common.nullSafe(function () { return bucket.source.typical[0]; }, 0);
                    Joove.Common.nullSafe(function () { return buckets.add(log); }, null);
                };
                var bucket;
                for (var _ibucket = 0; _ibucket < (logs == null ? 0 : logs.length); _ibucket++) {
                    _loop_3(_ibucket);
                }
                return buckets;
            };
            XPackLog.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return XPackLog;
        }());
        BO.XPackLog = XPackLog;
        var ApplicationUserAction = (function () {
            function ApplicationUserAction() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationUserAction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserAction;
        }());
        BO.ApplicationUserAction = ApplicationUserAction;
        var ApplicationUserExternalProfile = (function () {
            function ApplicationUserExternalProfile() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationUserExternalProfile.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserExternalProfile;
        }());
        BO.ApplicationUserExternalProfile = ApplicationUserExternalProfile;
        var ApplicationSetting = (function () {
            function ApplicationSetting() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationSetting.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationSetting;
        }());
        BO.ApplicationSetting = ApplicationSetting;
        var ApplicationUser = (function () {
            function ApplicationUser() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Permissions = [];
                this.Roles = [];
                this.Clients = [];
                this.Logins = [];
                this.Claims = [];
                this['_key'] = this.UserName = "";
            }
            ApplicationUser.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return ApplicationUser;
        }());
        ApplicationUser.setPermissions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Permissions == null)
                $this.Permissions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Permissions.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyPermissions($this, copyItems);
        };
        ApplicationUser.addManyPermissions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addPermissions($this, items[i]);
            }
        };
        ApplicationUser.addPermissions = function ($this, item) {
            if ($this.Permissions == null)
                $this.Permissions = [];
            if (item == null || $this.Permissions.indexOf(item) > -1)
                return;
            $this.Permissions.push(item);
            ApplicationPermission.addUsers(item, $this);
        };
        ApplicationUser.addRangePermissions = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addPermissions($this, item); });
        };
        ApplicationUser.removePermissions = function ($this, item) {
            if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                return;
            var _index = $this.Permissions.indexOf(item);
            $this.Permissions.splice(_index, 1);
            ApplicationPermission.removeUsers(item, $this);
        };
        ApplicationUser.clearPermissions = function ($this) {
            $this.Permissions = null;
        };
        ApplicationUser.setRoles = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Roles == null)
                $this.Roles = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Roles.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyRoles($this, copyItems);
        };
        ApplicationUser.addManyRoles = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addRoles($this, items[i]);
            }
        };
        ApplicationUser.addRoles = function ($this, item) {
            if ($this.Roles == null)
                $this.Roles = [];
            if (item == null || $this.Roles.indexOf(item) > -1)
                return;
            $this.Roles.push(item);
            ApplicationRole.addUsers(item, $this);
        };
        ApplicationUser.addRangeRoles = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addRoles($this, item); });
        };
        ApplicationUser.removeRoles = function ($this, item) {
            if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1)
                return;
            var _index = $this.Roles.indexOf(item);
            $this.Roles.splice(_index, 1);
            ApplicationRole.removeUsers(item, $this);
        };
        ApplicationUser.clearRoles = function ($this) {
            $this.Roles = null;
        };
        ApplicationUser.setClients = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Clients == null)
                $this.Clients = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Clients.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyClients($this, copyItems);
        };
        ApplicationUser.addManyClients = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClients($this, items[i]);
            }
        };
        ApplicationUser.addClients = function ($this, item) {
            if ($this.Clients == null)
                $this.Clients = [];
            if (item == null || $this.Clients.indexOf(item) > -1)
                return;
            $this.Clients.push(item);
            if (item.User != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationClient.setUser(item, $this);
            }
        };
        ApplicationUser.addRangeClients = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClients($this, item); });
        };
        ApplicationUser.removeClients = function ($this, item) {
            if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1)
                return;
            var _index = $this.Clients.indexOf(item);
            $this.Clients.splice(_index, 1);
            item.User = null;
        };
        ApplicationUser.clearClients = function ($this) {
            $this.Clients = null;
        };
        ApplicationUser.setLogins = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Logins == null)
                $this.Logins = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Logins.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyLogins($this, copyItems);
        };
        ApplicationUser.addManyLogins = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addLogins($this, items[i]);
            }
        };
        ApplicationUser.addLogins = function ($this, item) {
            if ($this.Logins == null)
                $this.Logins = [];
            if (item == null || $this.Logins.indexOf(item) > -1)
                return;
            $this.Logins.push(item);
            if (item.User != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUserLogin.setUser(item, $this);
            }
        };
        ApplicationUser.addRangeLogins = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addLogins($this, item); });
        };
        ApplicationUser.removeLogins = function ($this, item) {
            if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1)
                return;
            var _index = $this.Logins.indexOf(item);
            $this.Logins.splice(_index, 1);
            item.User = null;
        };
        ApplicationUser.clearLogins = function ($this) {
            $this.Logins = null;
        };
        ApplicationUser.setClaims = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Claims == null)
                $this.Claims = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Claims.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addManyClaims($this, copyItems);
        };
        ApplicationUser.addManyClaims = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClaims($this, items[i]);
            }
        };
        ApplicationUser.addClaims = function ($this, item) {
            if ($this.Claims == null)
                $this.Claims = [];
            if (item == null || $this.Claims.indexOf(item) > -1)
                return;
            $this.Claims.push(item);
            if (item.User != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUserClaim.setUser(item, $this);
            }
        };
        ApplicationUser.addRangeClaims = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClaims($this, item); });
        };
        ApplicationUser.removeClaims = function ($this, item) {
            if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1)
                return;
            var _index = $this.Claims.indexOf(item);
            $this.Claims.splice(_index, 1);
            item.User = null;
        };
        ApplicationUser.clearClaims = function ($this) {
            $this.Claims = null;
        };
        ApplicationUser.setProfile = function ($this, value) {
            var oldValue = $this.Profile;
            $this.Profile = value;
            if (value != null) {
            }
        };
        BO.ApplicationUser = ApplicationUser;
        var ApplicationRole = (function () {
            function ApplicationRole() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Users = [];
                this.Permissions = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationRole.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationRole;
        }());
        ApplicationRole.setUsers = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Users == null)
                $this.Users = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Users.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addManyUsers($this, copyItems);
        };
        ApplicationRole.addManyUsers = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addUsers($this, items[i]);
            }
        };
        ApplicationRole.addUsers = function ($this, item) {
            if ($this.Users == null)
                $this.Users = [];
            if (item == null || $this.Users.indexOf(item) > -1)
                return;
            $this.Users.push(item);
            ApplicationUser.addRoles(item, $this);
        };
        ApplicationRole.addRangeUsers = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addUsers($this, item); });
        };
        ApplicationRole.removeUsers = function ($this, item) {
            if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1)
                return;
            var _index = $this.Users.indexOf(item);
            $this.Users.splice(_index, 1);
            ApplicationUser.removeRoles(item, $this);
        };
        ApplicationRole.clearUsers = function ($this) {
            $this.Users = null;
        };
        ApplicationRole.setPermissions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Permissions == null)
                $this.Permissions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Permissions.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addManyPermissions($this, copyItems);
        };
        ApplicationRole.addManyPermissions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addPermissions($this, items[i]);
            }
        };
        ApplicationRole.addPermissions = function ($this, item) {
            if ($this.Permissions == null)
                $this.Permissions = [];
            if (item == null || $this.Permissions.indexOf(item) > -1)
                return;
            $this.Permissions.push(item);
            ApplicationPermission.addRoles(item, $this);
        };
        ApplicationRole.addRangePermissions = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationRole.addPermissions($this, item); });
        };
        ApplicationRole.removePermissions = function ($this, item) {
            if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                return;
            var _index = $this.Permissions.indexOf(item);
            $this.Permissions.splice(_index, 1);
            ApplicationPermission.removeRoles(item, $this);
        };
        ApplicationRole.clearPermissions = function ($this) {
            $this.Permissions = null;
        };
        BO.ApplicationRole = ApplicationRole;
        var ApplicationOperation = (function () {
            function ApplicationOperation() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Permissions = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationOperation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationOperation;
        }());
        ApplicationOperation.setPermissions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Permissions == null)
                $this.Permissions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Permissions.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.addManyPermissions($this, copyItems);
        };
        ApplicationOperation.addManyPermissions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.addPermissions($this, items[i]);
            }
        };
        ApplicationOperation.addPermissions = function ($this, item) {
            if ($this.Permissions == null)
                $this.Permissions = [];
            if (item == null || $this.Permissions.indexOf(item) > -1)
                return;
            $this.Permissions.push(item);
            ApplicationPermission.addOperations(item, $this);
        };
        ApplicationOperation.addRangePermissions = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationOperation.addPermissions($this, item); });
        };
        ApplicationOperation.removePermissions = function ($this, item) {
            if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                return;
            var _index = $this.Permissions.indexOf(item);
            $this.Permissions.splice(_index, 1);
            ApplicationPermission.removeOperations(item, $this);
        };
        ApplicationOperation.clearPermissions = function ($this) {
            $this.Permissions = null;
        };
        BO.ApplicationOperation = ApplicationOperation;
        var ApplicationPermission = (function () {
            function ApplicationPermission() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Users = [];
                this.Roles = [];
                this.Operations = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationPermission.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationPermission;
        }());
        ApplicationPermission.setUsers = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Users == null)
                $this.Users = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Users.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addManyUsers($this, copyItems);
        };
        ApplicationPermission.addManyUsers = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addUsers($this, items[i]);
            }
        };
        ApplicationPermission.addUsers = function ($this, item) {
            if ($this.Users == null)
                $this.Users = [];
            if (item == null || $this.Users.indexOf(item) > -1)
                return;
            $this.Users.push(item);
            ApplicationUser.addPermissions(item, $this);
        };
        ApplicationPermission.addRangeUsers = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addUsers($this, item); });
        };
        ApplicationPermission.removeUsers = function ($this, item) {
            if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1)
                return;
            var _index = $this.Users.indexOf(item);
            $this.Users.splice(_index, 1);
            ApplicationUser.removePermissions(item, $this);
        };
        ApplicationPermission.clearUsers = function ($this) {
            $this.Users = null;
        };
        ApplicationPermission.setRoles = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Roles == null)
                $this.Roles = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Roles.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addManyRoles($this, copyItems);
        };
        ApplicationPermission.addManyRoles = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addRoles($this, items[i]);
            }
        };
        ApplicationPermission.addRoles = function ($this, item) {
            if ($this.Roles == null)
                $this.Roles = [];
            if (item == null || $this.Roles.indexOf(item) > -1)
                return;
            $this.Roles.push(item);
            ApplicationRole.addPermissions(item, $this);
        };
        ApplicationPermission.addRangeRoles = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addRoles($this, item); });
        };
        ApplicationPermission.removeRoles = function ($this, item) {
            if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1)
                return;
            var _index = $this.Roles.indexOf(item);
            $this.Roles.splice(_index, 1);
            ApplicationRole.removePermissions(item, $this);
        };
        ApplicationPermission.clearRoles = function ($this) {
            $this.Roles = null;
        };
        ApplicationPermission.setOperations = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Operations == null)
                $this.Operations = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Operations.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addManyOperations($this, copyItems);
        };
        ApplicationPermission.addManyOperations = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addOperations($this, items[i]);
            }
        };
        ApplicationPermission.addOperations = function ($this, item) {
            if ($this.Operations == null)
                $this.Operations = [];
            if (item == null || $this.Operations.indexOf(item) > -1)
                return;
            $this.Operations.push(item);
            ApplicationOperation.addPermissions(item, $this);
        };
        ApplicationPermission.addRangeOperations = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationPermission.addOperations($this, item); });
        };
        ApplicationPermission.removeOperations = function ($this, item) {
            if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1)
                return;
            var _index = $this.Operations.indexOf(item);
            $this.Operations.splice(_index, 1);
            ApplicationOperation.removePermissions(item, $this);
        };
        ApplicationPermission.clearOperations = function ($this) {
            $this.Operations = null;
        };
        BO.ApplicationPermission = ApplicationPermission;
        var ApplicationClient = (function () {
            function ApplicationClient() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationClient.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationClient;
        }());
        ApplicationClient.setUser = function ($this, value) {
            var oldValue = $this.User;
            $this.User = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClients(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClients(value, $this);
            }
        };
        BO.ApplicationClient = ApplicationClient;
        var ApplicationUserLogin = (function () {
            function ApplicationUserLogin() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationUserLogin.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserLogin;
        }());
        ApplicationUserLogin.setUser = function ($this, value) {
            var oldValue = $this.User;
            $this.User = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeLogins(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addLogins(value, $this);
            }
        };
        BO.ApplicationUserLogin = ApplicationUserLogin;
        var ApplicationUserClaim = (function () {
            function ApplicationUserClaim() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationUserClaim.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserClaim;
        }());
        ApplicationUserClaim.setUser = function ($this, value) {
            var oldValue = $this.User;
            $this.User = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.removeClaims(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationUser.addClaims(value, $this);
            }
        };
        BO.ApplicationUserClaim = ApplicationUserClaim;
        var ProfileSetting = (function () {
            function ProfileSetting() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ProfileSetting.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProfileSetting;
        }());
        ProfileSetting.setParentProfile = function ($this, value) {
            var oldValue = $this.ParentProfile;
            $this.ParentProfile = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Profile.removeSettings(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addSettings(value, $this);
            }
        };
        BO.ProfileSetting = ProfileSetting;
        var Profile = (function () {
            function Profile() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Settings = [];
                this['_key'] = this.Id = 0;
            }
            Profile.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Profile;
        }());
        Profile.setSettings = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Settings == null)
                $this.Settings = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Settings.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Profile.removeSettings($this, $this.Settings[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addManySettings($this, copyItems);
        };
        Profile.addManySettings = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addSettings($this, items[i]);
            }
        };
        Profile.addSettings = function ($this, item) {
            if ($this.Settings == null)
                $this.Settings = [];
            if (item == null || $this.Settings.indexOf(item) > -1)
                return;
            $this.Settings.push(item);
            if (item.ParentProfile != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ProfileSetting.setParentProfile(item, $this);
            }
        };
        Profile.addRangeSettings = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.Profile.addSettings($this, item); });
        };
        Profile.removeSettings = function ($this, item) {
            if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1)
                return;
            var _index = $this.Settings.indexOf(item);
            $this.Settings.splice(_index, 1);
            item.ParentProfile = null;
        };
        Profile.clearSettings = function ($this) {
            $this.Settings = null;
        };
        BO.Profile = Profile;
        var ApplicationLanguage = (function () {
            function ApplicationLanguage() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationLanguage.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationLanguage;
        }());
        ApplicationLanguage.setDateTimeFormat = function ($this, value) {
            var oldValue = $this.DateTimeFormat;
            $this.DateTimeFormat = value;
            if (value != null) {
                if (oldValue != null && oldValue.ApplicationLanguage != null) {
                    oldValue.ApplicationLanguage = null;
                }
                if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.DateTimeFormat.setApplicationLanguage(value, $this);
                }
            }
        };
        BO.ApplicationLanguage = ApplicationLanguage;
        var DateTimeFormat = (function () {
            function DateTimeFormat() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
                this['_key'] = this.Id = 0;
            }
            DateTimeFormat.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DateTimeFormat;
        }());
        DateTimeFormat.setApplicationLanguage = function ($this, value) {
            var oldValue = $this.ApplicationLanguage;
            $this.ApplicationLanguage = value;
            if (value != null) {
                if (oldValue != null && oldValue.DateTimeFormat != null) {
                    oldValue.DateTimeFormat = null;
                }
                if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
                }
            }
        };
        BO.DateTimeFormat = DateTimeFormat;
        var ApplicationTheme = (function () {
            function ApplicationTheme() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationTheme.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationTheme;
        }());
        BO.ApplicationTheme = ApplicationTheme;
        var FileData = (function () {
            function FileData() {
                this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.FileData";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
            }
            FileData.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            return FileData;
        }());
        BO.FileData = FileData;
        var StorageMedium;
        (function (StorageMedium) {
            StorageMedium[StorageMedium["FileSystem"] = 0] = "FileSystem";
            StorageMedium[StorageMedium["DataBase"] = 1] = "DataBase";
        })(StorageMedium = BO.StorageMedium || (BO.StorageMedium = {}));
        var AuditEntityConfiguration = (function () {
            function AuditEntityConfiguration() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Properties = [];
                this['_key'] = this.Id = 0;
            }
            AuditEntityConfiguration.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditEntityConfiguration;
        }());
        AuditEntityConfiguration.setProperties = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Properties == null)
                $this.Properties = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Properties.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
        };
        AuditEntityConfiguration.addManyProperties = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addProperties($this, items[i]);
            }
        };
        AuditEntityConfiguration.addProperties = function ($this, item) {
            if ($this.Properties == null)
                $this.Properties = [];
            if (item == null || $this.Properties.indexOf(item) > -1)
                return;
            $this.Properties.push(item);
            if (item.Entity != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.AuditPropertyConfiguration.setEntity(item, $this);
            }
        };
        AuditEntityConfiguration.addRangeProperties = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addProperties($this, item); });
        };
        AuditEntityConfiguration.removeProperties = function ($this, item) {
            if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1)
                return;
            var _index = $this.Properties.indexOf(item);
            $this.Properties.splice(_index, 1);
            item.Entity = null;
        };
        AuditEntityConfiguration.clearProperties = function ($this) {
            $this.Properties = null;
        };
        BO.AuditEntityConfiguration = AuditEntityConfiguration;
        var AuditPropertyConfiguration = (function () {
            function AuditPropertyConfiguration() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this.Entity = new this.Domain.AuditEntityConfiguration();
                this['_key'] = this.Id = 0;
            }
            AuditPropertyConfiguration.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditPropertyConfiguration;
        }());
        AuditPropertyConfiguration.setEntity = function ($this, value) {
            var oldValue = $this.Entity;
            $this.Entity = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.AuditEntityConfiguration.addProperties(value, $this);
            }
        };
        BO.AuditPropertyConfiguration = AuditPropertyConfiguration;
        var AuditLogEntry = (function () {
            function AuditLogEntry() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogEntry.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogEntry;
        }());
        BO.AuditLogEntry = AuditLogEntry;
        var AuditLogEntryType = (function () {
            function AuditLogEntryType() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogEntryType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogEntryType;
        }());
        BO.AuditLogEntryType = AuditLogEntryType;
        var AuditLogPropertyActionType = (function () {
            function AuditLogPropertyActionType() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogPropertyActionType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogPropertyActionType;
        }());
        BO.AuditLogPropertyActionType = AuditLogPropertyActionType;
        var WorkflowStatus;
        (function (WorkflowStatus) {
            WorkflowStatus[WorkflowStatus["None"] = 0] = "None";
            WorkflowStatus[WorkflowStatus["Completed"] = 1] = "Completed";
            WorkflowStatus[WorkflowStatus["Pending"] = 2] = "Pending";
            WorkflowStatus[WorkflowStatus["Expired"] = 3] = "Expired";
            WorkflowStatus[WorkflowStatus["Cancelled"] = 4] = "Cancelled";
            WorkflowStatus[WorkflowStatus["Failed"] = 5] = "Failed";
            WorkflowStatus[WorkflowStatus["StepToContinueNotFound"] = 6] = "StepToContinueNotFound";
        })(WorkflowStatus = BO.WorkflowStatus || (BO.WorkflowStatus = {}));
        var WorkflowExecutionResult = (function () {
            function WorkflowExecutionResult() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.WorkflowExecutionResultKey = 0;
            }
            WorkflowExecutionResult.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
            };
            return WorkflowExecutionResult;
        }());
        WorkflowExecutionResult.setContext = function ($this, value) {
            var oldValue = $this.Context;
            $this.Context = value;
            if (value != null) {
                if (oldValue != null && oldValue.Result != null) {
                    oldValue.Result = null;
                }
                if ($this.Context.Result !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.WorkflowContextBase.setResult(value, $this);
                }
            }
        };
        BO.WorkflowExecutionResult = WorkflowExecutionResult;
        var WorkflowContextBase = (function () {
            function WorkflowContextBase() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
            }
            WorkflowContextBase.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            return WorkflowContextBase;
        }());
        WorkflowContextBase.setResult = function ($this, value) {
            var oldValue = $this.Result;
            $this.Result = value;
            if (value != null) {
                if (oldValue != null && oldValue.Context != null) {
                    oldValue.Context = null;
                }
                if ($this.Result.Context !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.WorkflowExecutionResult.setContext(value, $this);
                }
            }
        };
        BO.WorkflowContextBase = WorkflowContextBase;
        var WorkflowSchedule = (function () {
            function WorkflowSchedule() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
                this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                this['_key'] = this.Workflow = "";
            }
            WorkflowSchedule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Workflow == null || $this.Workflow == "";
            };
            return WorkflowSchedule;
        }());
        BO.WorkflowSchedule = WorkflowSchedule;
        var Driver = (function (_super) {
            __extends(Driver, _super);
            function Driver() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Driver";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            Driver.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return Driver;
        }(ApplicationUser));
        Driver.setEmployer = function ($this, value) {
            var oldValue = $this.Employer;
            $this.Employer = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Location.removeDriver(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Location.addDriver(value, $this);
            }
        };
        BO.Driver = Driver;
        var LSPUser = (function (_super) {
            __extends(LSPUser, _super);
            function LSPUser() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            LSPUser.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return LSPUser;
        }(ApplicationUser));
        LSPUser.setLSP = function ($this, value) {
            var oldValue = $this.LSP;
            $this.LSP = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.LSP.removeLSPUsers(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.LSP.addLSPUsers(value, $this);
            }
        };
        BO.LSPUser = LSPUser;
        var RegionalAgentUser = (function (_super) {
            __extends(RegionalAgentUser, _super);
            function RegionalAgentUser() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            RegionalAgentUser.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return RegionalAgentUser;
        }(ApplicationUser));
        RegionalAgentUser.setRegionalAgent = function ($this, value) {
            var oldValue = $this.RegionalAgent;
            $this.RegionalAgent = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.removeRAUsers(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent.addRAUsers(value, $this);
            }
        };
        BO.RegionalAgentUser = RegionalAgentUser;
        var TruckDriver = (function (_super) {
            __extends(TruckDriver, _super);
            function TruckDriver() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this.ProofOfDelivery = [];
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            TruckDriver.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return TruckDriver;
        }(ApplicationUser));
        TruckDriver.setProofOfDelivery = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ProofOfDelivery == null)
                $this.ProofOfDelivery = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ProofOfDelivery.length > 0) {
                DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.removeProofOfDelivery($this, $this.ProofOfDelivery[0]);
            }
            DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addManyProofOfDelivery($this, copyItems);
        };
        TruckDriver.addManyProofOfDelivery = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addProofOfDelivery($this, items[i]);
            }
        };
        TruckDriver.addProofOfDelivery = function ($this, item) {
            if ($this.ProofOfDelivery == null)
                $this.ProofOfDelivery = [];
            if (item == null || $this.ProofOfDelivery.indexOf(item) > -1)
                return;
            $this.ProofOfDelivery.push(item);
            if (item.TruckDriver != $this) {
                DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery.setTruckDriver(item, $this);
            }
        };
        TruckDriver.addRangeProofOfDelivery = function ($this, items) {
            items.forEach(function (item) { return DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver.addProofOfDelivery($this, item); });
        };
        TruckDriver.removeProofOfDelivery = function ($this, item) {
            if ($this == null || $this.ProofOfDelivery == null || $this.ProofOfDelivery.indexOf(item) === -1)
                return;
            var _index = $this.ProofOfDelivery.indexOf(item);
            $this.ProofOfDelivery.splice(_index, 1);
            item.TruckDriver = null;
        };
        TruckDriver.clearProofOfDelivery = function ($this) {
            $this.ProofOfDelivery = null;
        };
        TruckDriver.setTruck = function ($this, value) {
            var oldValue = $this.Truck;
            $this.Truck = value;
            if (value != null) {
                if (oldValue != null && oldValue.TruckDriver != null) {
                    oldValue.TruckDriver = null;
                }
                if ($this.Truck.TruckDriver !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Truck.setTruckDriver(value, $this);
                }
            }
        };
        BO.TruckDriver = TruckDriver;
        var Contact = (function (_super) {
            __extends(Contact, _super);
            function Contact() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Contact";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            Contact.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return Contact;
        }(ApplicationUser));
        Contact.setCompany = function ($this, value) {
            var oldValue = $this.Company;
            $this.Company = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.Company.removeContacts(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.Company.addContacts(value, $this);
            }
        };
        BO.Contact = Contact;
        var Retailer = (function (_super) {
            __extends(Retailer, _super);
            function Retailer() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Retailer";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            Retailer.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Retailer;
        }(Company));
        BO.Retailer = Retailer;
        var PastSales = (function (_super) {
            __extends(PastSales, _super);
            function PastSales() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.PastSales";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            PastSales.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PastSales;
        }(Sales));
        BO.PastSales = PastSales;
        var DeliveryPlan = (function (_super) {
            __extends(DeliveryPlan, _super);
            function DeliveryPlan() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.DeliveryPlan";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            DeliveryPlan.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DeliveryPlan;
        }(Sales));
        BO.DeliveryPlan = DeliveryPlan;
        var SalesForecastDetails = (function (_super) {
            __extends(SalesForecastDetails, _super);
            function SalesForecastDetails() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this.ComputedStock = 0;
                _this.NewOrder = 0;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            SalesForecastDetails.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SalesForecastDetails;
        }(Sales));
        SalesForecastDetails.setSalesForecast = function ($this, value) {
            var oldValue = $this.SalesForecast;
            $this.SalesForecast = value;
            if (value != null) {
                if (oldValue != null) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.removeSalesForecastDetails(oldValue, $this);
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast.addSalesForecastDetails(value, $this);
            }
        };
        BO.SalesForecastDetails = SalesForecastDetails;
        var Supplier = (function (_super) {
            __extends(Supplier, _super);
            function Supplier() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.Supplier";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            Supplier.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Supplier;
        }(Company));
        Supplier.setBusinessUnit = function ($this, value) {
            var oldValue = $this.BusinessUnit;
            $this.BusinessUnit = value;
            if (value != null) {
                if (oldValue != null && oldValue.Supplier != null) {
                    oldValue.Supplier = null;
                }
                if ($this.BusinessUnit.Supplier !== $this) {
                    DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit.setSupplier(value, $this);
                }
            }
        };
        BO.Supplier = Supplier;
        var WorkflowSockContext = (function (_super) {
            __extends(WorkflowSockContext, _super);
            function WorkflowSockContext() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS2_SynchromodalityCapacityOptimisation.BO.WorkflowSockContext";
                _this.Domain = DSS2_SynchromodalityCapacityOptimisation.BO;
                _this['_key'] = _this.Id = "00000000-0000-0000-0000-000000000000";
                return _this;
            }
            WorkflowSockContext.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            return WorkflowSockContext;
        }(WorkflowContextBase));
        BO.WorkflowSockContext = WorkflowSockContext;
    })(BO = DSS2_SynchromodalityCapacityOptimisation.BO || (DSS2_SynchromodalityCapacityOptimisation.BO = {}));
})(DSS2_SynchromodalityCapacityOptimisation || (DSS2_SynchromodalityCapacityOptimisation = {}));
var _appDomain = DSS2_SynchromodalityCapacityOptimisation.BO;
window.$domain = _appDomain;
