// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.UI.ViewModels.SignInPage;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS2_SynchromodalityCapacityOptimisation.UI.Controllers.SignInPage
{

    [RoutePrefix("SignInPage")]
    public class SignInPageController : ControllerBase<SignInPageViewModel, SignInPageViewModelDTO>
    {

        /*<Form:SignInPage:0/>*/
        public SignInPageController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(SignInPageController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS2_SynchromodalityCapacityOptimisation.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel
            {

            };
            _parentController = new MasterPageSignIn.MasterPageSignInController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(SignInPageViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(SignInPageViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Load", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Load")]
        public ActionResult Load()

        {
            @model = new SignInPageViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SignInPage"] = "Load";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Load", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Load")]
        public ActionResult _API_Load()

        {
            @model = new SignInPageViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SignInPage"] = "Load";
            PushToHistory();
            var _masterController = new DSS2_SynchromodalityCapacityOptimisation.UI.Controllers.MasterPageSignIn.MasterPageSignInController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteLoad();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="SignIn", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SignIn")]
        public ActionResult SignIn()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSignIn();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Load:1/>*/
        public ActionResult ExecuteLoad()
        {
            if (_parentController == null) _parentController = new MasterPageSignIn.MasterPageSignInController(new  DSS2_SynchromodalityCapacityOptimisation.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel());
            ((MasterPageSignIn.MasterPageSignInController) _parentController).ExecuteRender();
            ActionResult _result = null;
            if ((new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetCount<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>((u) => u.Roles.Any((r) => r.Name == "Administrator")) == 0))
            {
                _result = GetRedirectInfo("CreateAdmin", "Index", new  RouteValueDictionary(new {  }));
            }
            else if ((zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser() != null))
            {
                _result = GetRedirectInfo("HomePage", "Render", new  RouteValueDictionary(new {  }));
            }
            return _result;
        }
        /*<ControllerActionImplementation:SignIn:1/>*/
        public ActionResult ExecuteSignIn()
        {
            ActionResult _result = null;
            bool success = zAppDev.DotNet.Framework.Identity.IdentityHelper.SignIn(@model.UserNameTextBox, @model.PasswordTextBox, @model.RememberMeCB);
            if (((success) == false))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("SignInPage", "SignInFailed").ToString(), MessageType.Error);
                return null;
            }
            string returnUrl = zAppDev.DotNet.Framework.Utilities.Web.GetFormArgument("returnUrl");
            if (((((returnUrl == null || returnUrl.Trim() == "")) == false)))
            {
                ClientCommand(ClientCommands.REDIRECT, (!string.IsNullOrEmpty(ConfigurationHandler.GetAppSetting("ServerExternalPath")) ? ConfigurationHandler.GetAppSetting("ServerExternalPath"): zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +returnUrl);
            }
            else
            {
                _result = GetRedirectInfo("HomePage", "Render", new  RouteValueDictionary(new {  }));
            }
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new SignInPageViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("SignInPage");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: SignInPage, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            viewDTO.RuleEvaluations.DataValidations.Add(PasswordEmptyValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(UsernameEmptyValidation());
            var masterPageDataValidations = (_parentController as Controllers.MasterPageSignIn.MasterPageSignInController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }


        /*<DataValidation:PasswordEmptyValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult PasswordEmptyValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:PasswordEmptyValidation:2/>*/
                return (@model.PasswordTextBox == null || @model.PasswordTextBox.Trim() == "");
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:PasswordEmptyValidation:2/>*/
                return BaseViewPage<string>.GetResourceValue("SignInPage", "RES_DATAVALIDATION_MESSAGE_PasswordEmpty").ToString();
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "PasswordEmptyValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:UsernameEmptyValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult UsernameEmptyValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:UsernameEmptyValidation:2/>*/
                return (@model.UserNameTextBox == null || @model.UserNameTextBox.Trim() == "");
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:UsernameEmptyValidation:2/>*/
                return BaseViewPage<string>.GetResourceValue("SignInPage", "RES_DATAVALIDATION_MESSAGE_UsernameEmpty").ToString();
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "UsernameEmptyValidation",
                Evaluations = __evaluations
            };
        }

        #endregion
    }
}
