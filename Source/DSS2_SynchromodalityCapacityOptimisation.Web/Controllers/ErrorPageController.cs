// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.UI.ViewModels.ErrorPage;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS2_SynchromodalityCapacityOptimisation.UI.Controllers.ErrorPage
{

    [RoutePrefix("ErrorPage")]
    public class ErrorPageController : ControllerBase<ErrorPageViewModel, ErrorPageViewModelDTO>
    {

        /*<Form:ErrorPage:0/>*/
        public ErrorPageController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(ErrorPageController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS2_SynchromodalityCapacityOptimisation.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel
            {

            };
            _parentController = new MasterPageSignIn.MasterPageSignInController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(ErrorPageViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(ErrorPageViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new ErrorPageViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ErrorPage"] = "Render";
            Response.StatusCode = 500;
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new ErrorPageViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ErrorPage"] = "Render";
            PushToHistory();
            var _masterController = new DSS2_SynchromodalityCapacityOptimisation.UI.Controllers.MasterPageSignIn.MasterPageSignInController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="SendErrorToAdministrator", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SendErrorToAdministrator")]
        public ActionResult SendErrorToAdministrator()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSendErrorToAdministrator();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPageSignIn.MasterPageSignInController(new  DSS2_SynchromodalityCapacityOptimisation.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel());
            ((MasterPageSignIn.MasterPageSignInController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.StackTrace = zAppDev.DotNet.Framework.Utilities.Common.GetLastError().StackTrace;
            @model.ErrorMessage = zAppDev.DotNet.Framework.Utilities.Common.GetLastError().Message;
            @model.FriendlyErrorMessage = zAppDev.DotNet.Framework.Utilities.Common.GetLastError().GetFriendlyMessage();
            return _result;
        }
        /*<ControllerActionImplementation:SendErrorToAdministrator:1/>*/
        public ActionResult ExecuteSendErrorToAdministrator()
        {
            ActionResult _result = null;
            string developerEmail = zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("AdministratorEmail");
            if (((developerEmail == null || developerEmail.Trim() == "")))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ErrorPage", "RES_CUSTOM_Invalid_AdminEmail_Message").ToString(), MessageType.Error);
                return null;
            }
            @model.StackTrace = zAppDev.DotNet.Framework.Utilities.Common.GetLastError().StackTrace;
            @model.ErrorMessage = zAppDev.DotNet.Framework.Utilities.Common.GetLastError().Message;
            @model.FriendlyErrorMessage = zAppDev.DotNet.Framework.Utilities.Common.GetLastError().GetFriendlyMessage();
            zAppDev.DotNet.Framework.Utilities.EMailMessage mail = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            System.Collections.Generic.List<string> recipients = new System.Collections.Generic.List<string>();
            recipients.Add(developerEmail);
            mail.To = recipients.ToList();
            mail.Subject = "DSS2_SynchromodalityCapacityOptimisation" + " threw an Exception";
            mail.Body = "<b>Error Message:</b> " + @model.ErrorMessage + "<br /><br />";
            mail.Body = mail.Body + "<b>Friendly Error Message:</b> <span style='white-space: pre-line;'>" + @model.FriendlyErrorMessage + "</span><br /><br />";
            mail.Body = mail.Body + "<b>StackTrace:</b> " + @model.StackTrace + "<br />";
            if (((((@model.AdditionalErrorInformation == null || @model.AdditionalErrorInformation.Trim() == "")) == false)))
            {
                mail.Body = mail.Body + "<br /><b>Additional Information:</b> " + @model.AdditionalErrorInformation;
            }
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(mail);
            ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ErrorPage", "RES_CUSTOM_Successful_EMail_Message").ToString());
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new ErrorPageViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("ErrorPage");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: ErrorPage, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPageSignIn.MasterPageSignInController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
