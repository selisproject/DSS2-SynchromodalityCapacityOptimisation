// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System.Collections.Generic;
using System.Linq;
using System.Collections.Concurrent;
using System.Reflection;
using zAppDev.DotNet.Framework.Data;
using Microsoft.Extensions.Configuration;

using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.DAL;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation
{
    public class DatabaseSeeder
    {
        private ConcurrentDictionary<string, ApplicationPermission> _applicationPermissionDictionary = null;
        private IConfiguration configuration;

        public DatabaseSeeder(IConfiguration configuration = null)
        {
            this.configuration = configuration;
        }

        private ApplicationPermission CreateOrUpdatePermission(string name, string description, bool isCustom, Repository repo)
        {
            if (_applicationPermissionDictionary == null)
            {
                _applicationPermissionDictionary = new ConcurrentDictionary<string, ApplicationPermission>();
                var applicationPermissions = repo.Get<ApplicationPermission>(a => a.Name != null);
                foreach (var item in applicationPermissions)
                {
                    if (!_applicationPermissionDictionary.ContainsKey(item.Name))
                    {
                        _applicationPermissionDictionary.TryAdd(item.Name, item);
                    }
                }
            }
            bool update = false;
            ApplicationPermission p = null;
            if (_applicationPermissionDictionary.ContainsKey(name))
            {
                p = _applicationPermissionDictionary[name];
                if (p.IsCustom != isCustom)
                {
                    p.IsCustom = isCustom;
                    update = true;
                }
                if (p.Description != description)
                {
                    p.Description = description;
                    update = true;
                }
            }
            else
            {
                update = true;
                p = new ApplicationPermission();
                p.Name = name;
                p.IsCustom = isCustom;
                p.Description = description;
            }
            if (update)
            {
                repo.Save(p);
            }
            return p;
        }


        private ConcurrentDictionary<string, ApplicationOperation> _applicationOperationDictionary = null;


        private string GetApplicationOperationKey(string name, string parent, string type)
        {
            return name + '|' + parent + '|' + type;
        }

        private ApplicationOperation CreateOrUpdateOperation(string name, string parent, string type,
                bool isAvailableToAllAuthorizedUsers,
                bool isAvailableToAnonymous, IEnumerable<ApplicationPermission> perms, Repository repo)
        {
            if (_applicationOperationDictionary == null)
            {
                _applicationOperationDictionary = new ConcurrentDictionary<string, ApplicationOperation>();
                var applicationOperations = repo.Get<ApplicationOperation>(a => a.Name != null);
                foreach (ApplicationOperation item in applicationOperations)
                {
                    string key = GetApplicationOperationKey(item.Name, item.ParentControllerName, item.Type);
                    if (!_applicationOperationDictionary.ContainsKey(key))
                    {
                        _applicationOperationDictionary.TryAdd(key, item);
                    }
                }
            }
            ApplicationOperation op = null;
            string currentKey = GetApplicationOperationKey(name, parent, type);
            bool update = false;
            if (_applicationOperationDictionary.ContainsKey(currentKey))
            {
                op = _applicationOperationDictionary[currentKey];
                if (op.IsAvailableToAllAuthorizedUsers != isAvailableToAllAuthorizedUsers)
                {
                    op.IsAvailableToAllAuthorizedUsers = isAvailableToAllAuthorizedUsers;
                    update = true;
                }
                if (op.IsAvailableToAnonymous != isAvailableToAnonymous)
                {
                    op.IsAvailableToAnonymous = isAvailableToAnonymous;
                    update = true;
                }
                List<ApplicationPermission> applicationPermissions = op.Permissions.Where(p => !p.IsCustom).ToList();
                HandleApplicationPermissions<ApplicationOperation>(op, applicationPermissions, perms, ref update);
            }
            else
            {
                update = true;
                op = new ApplicationOperation();
                op.Name = name;
                op.Type = type;
                op.IsAvailableToAllAuthorizedUsers = isAvailableToAllAuthorizedUsers;
                op.IsAvailableToAnonymous = isAvailableToAnonymous;
                op.ParentControllerName = parent;
                if (perms != null)
                {
                    foreach (var p in perms)
                    {
                        op.AddPermissions(p);
                    }
                }
            }
            if (update)
            {
                repo.Save(op);
            }
            return op;
        }



        private ConcurrentDictionary<string, ApplicationRole> _applicationRoleDictionary = null;
        private ApplicationRole CreateOrUpdateRole(string name, string description, IEnumerable<ApplicationPermission> perms, Repository repo)
        {
            if (_applicationRoleDictionary == null)
            {
                _applicationRoleDictionary = new ConcurrentDictionary<string, ApplicationRole>();
                var applicationRoles = repo.Get<ApplicationRole>(a => a.Name != null);
                foreach (ApplicationRole item in applicationRoles)
                {
                    if (!_applicationRoleDictionary.ContainsKey(item.Name))
                    {
                        _applicationRoleDictionary.TryAdd(item.Name, item);
                    }
                }
            }
            ApplicationRole role = null;
            bool update = false;
            if (_applicationRoleDictionary.ContainsKey(name))
            {
                role = _applicationRoleDictionary[name];
                if (role.Description != description)
                {
                    role.Description = description;
                    update = true;
                }
                if (role.IsCustom != false)
                {
                    role.IsCustom = false;
                    update = true;
                }
                List<ApplicationPermission> applicationPermissions = role.Permissions.Where(p => !p.IsCustom).ToList();
                HandleApplicationPermissions<ApplicationRole>(role, applicationPermissions, perms, ref update);
            }
            else
            {
                update = true;
                role = new ApplicationRole();
                role.Name = name;
                role.Description = description;
                role.IsCustom = false;
                if (perms != null)
                {
                    foreach (var p in perms)
                    {
                        role.AddPermissions(p);
                    }
                }
            }
            if (update)
            {
                repo.Save(role);
            }
            return role;
        }


        private void RemoveApplicationPermissions<T>(T objT, List<ApplicationPermission> applicationPermissions)
        {
            MethodInfo removePermissions = typeof(T).GetMethod("RemovePermissions");
            foreach (var p in applicationPermissions)
            {
                removePermissions.Invoke(objT, new object[] { p });
            }
        }



        private void AddApplicationPermissions<T>(T objT,IEnumerable<ApplicationPermission> perms)
        {
            MethodInfo addPermissions = typeof(T).GetMethod("AddPermissions", new[] { typeof(ApplicationPermission) });
            foreach (var p in perms)
            {
                addPermissions.Invoke(objT, new object[] { p });
            }
        }


        private void HandleApplicationPermissions<T>(T objT, List<ApplicationPermission> applicationPermissions,
                IEnumerable<ApplicationPermission> perms,ref bool update)
        {
            if (perms == null)
            {
                if (applicationPermissions != null && applicationPermissions.Count > 0)
                {
                    update = true;
                    RemoveApplicationPermissions<T>(objT, applicationPermissions);
                }
            }
            else if (perms.Any())
            {
                if (applicationPermissions == null || applicationPermissions.Count == 0)
                {
                    update = true;
                    AddApplicationPermissions<T>(objT, perms);
                }
                else
                {
                    if (perms.Count() != applicationPermissions.Count)
                    {
                        update = true;
                        RemoveApplicationPermissions<T>(objT, applicationPermissions);
                        AddApplicationPermissions<T>(objT, perms);
                    }
                    else
                    {
                        bool diffFound = false;
                        foreach (var p in perms)
                        {
                            //if (!applicationPermissions.Contains(p))
                            var checkApplicationPermission = applicationPermissions.FirstOrDefault(a => a.Name == p.Name);
                            if (checkApplicationPermission == null)
                            {
                                diffFound = true;
                                break;
                            }
                        }
                        if (diffFound)
                        {
                            update = true;
                            RemoveApplicationPermissions<T>(objT, applicationPermissions);
                            AddApplicationPermissions<T>(objT, perms);
                        }
                    }
                }
            }
        }



        public void UpdateAuthorizationTables()
        {
            var confValue = System.Configuration.ConfigurationManager.AppSettings["SeedSecurityTables"];
            bool seedSecurityTables = true;
            bool bSeedSecurityTables;
            if (bool.TryParse(confValue, out bSeedSecurityTables))
            {
                seedSecurityTables = bSeedSecurityTables;
            }
            if(!seedSecurityTables) return;
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            MiniSessionManager.ExecuteInUoW(manager =>
            {
                var repo = new Repository(manager);
                var allRoles = new List<ApplicationRole>();
                #region Permissions
                var manageUsersPermission = CreateOrUpdatePermission("ManageUsers", "Can Manage Users", false, repo);
                var manageRolesPermission = CreateOrUpdatePermission("ManageRoles", "Can Manage Roles", false, repo);
                var managePermissionsPermission = CreateOrUpdatePermission("ManagePermissions", "Can Manage Permissions", false, repo);
                var manageOperationsPermission = CreateOrUpdatePermission("ManageOperations", "Can Manage Operations", false, repo);
                var manageSettingsPermission = CreateOrUpdatePermission("ManageSettings", "Can Manage Settings", false, repo);
                var manageApplicationDataPermission = CreateOrUpdatePermission("ManageApplicationData", "Can Manage Application Data", false, repo);
                var customerSelectionAndAdminAddPermission = CreateOrUpdatePermission("CustomerSelectionAndAdmin_Add", "CustomerSelectionAndAdmin_Add", false, repo);
                #endregion
                #region Operations
                CreateOrUpdateOperation("GeneralOperation", "ErrorPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "ErrorPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SendErrorToAdministrator", "ErrorPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "FirstAdminSetup", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "FirstAdminSetup", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "FirstAdminSetup", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "HomePage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "HomePage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "NotFoundPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "NotFoundPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignInPage", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Load", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("SignIn", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignOutPage", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("SignOut", "SignOutPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "SignOutPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "Unauthorized", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "Unauthorized", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UserPreferences", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "UserPreferences", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "UserPreferences", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("LanguageBoxDataSet", "UserPreferences", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("LocaleBoxDataSet", "UserPreferences", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("ApplicationThemeDataSet", "UserPreferences", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SignOut", "MasterPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageForSlide", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageForSlide", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ApplicationSettingForm", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("AddApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("EditApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("SaveApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("DeleteApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ApplicationSettingsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "ApplicationSettingsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "ApplicationSettingsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "ApplicationSettingsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ChangePassword", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "ChangePassword", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ChangePassword", "ChangePassword", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ForgotPassword", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "ForgotPassword", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ResetPasswordRequest", "ForgotPassword", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ResetPassword", "ForgotPassword", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageOperation", ClaimTypes.GenericAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("EditOperation", "ManageOperation", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("SaveOperation", "ManageOperation", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Button2DataSet", "ManageOperation", ClaimTypes.Dataset, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManagePermission", ClaimTypes.GenericAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("NewPermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("EditPermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("SavePermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("DeletePermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button4DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button41DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button5DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageRole", ClaimTypes.GenericAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("NewRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("EditRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("SaveRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("DeleteRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("AddPermissionDataSet", "ManageRole", ClaimTypes.Dataset, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageUser", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("NewUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("EditUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SaveUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SetPassword", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Button1DataSet", "ManageUser", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Button2DataSet", "ManageUser", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "OperationsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "OperationsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "OperationsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "OperationsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PermissionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "PermissionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "PermissionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "PermissionsList", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "RolesList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("Refresh", "RolesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "RolesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "RolesList", ClaimTypes.Dataset, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "UsersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "UsersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Refresh", "UsersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "UsersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageSignIn", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageSignIn", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CreateAdmin", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Index", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("Create", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("AuthorizeAccess", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ReconnectSockets", "WorkflowSock", ClaimTypes.IDEF0Activity, true, true, null, repo);
                CreateOrUpdateOperation("CalculateCost", "CostModel", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetVolumePerLSP", "KPIService", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetVolumePerUnit", "KPIService", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("CO2PerCarrier", "KPIService", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Orders", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("InitRegionalAgents", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Change", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("TestGoogleAPI", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("initWarehouse", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("testOrderGenerator", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("testReflection", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("TruckPosistions", "DataSeed", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("InitKPIs", "KPIInit", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetRA", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetOrderWMS", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("SaveOrder", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetTruckDriver", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetAllOrderWMS", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetOrderByTruck", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("GetOrderByAgency", "RA", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Publish", "capacities", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "deliveryDays", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Export", "exportInventoryItems", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Export", "exportItems", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("ExportOFDetails", "exportOFDetails", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("ExportSalesForecastDetails", "exportSalesForecastDetails", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "inventoryItems", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "items", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "minimumQuantities", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("CalculateForSKU", "OrderForecastService", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "pastOrders", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "pastSales", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "salesForecasts", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Import", "stocksOnHand", ClaimTypes.ExposedService, true, false, null, repo);
                #endregion
                #region Roles
                allRoles = new List<ApplicationRole>
                {
                    CreateOrUpdateRole("Administrator", "Administrator",
                    new [] { manageUsersPermission, manageRolesPermission, managePermissionsPermission, manageOperationsPermission, manageSettingsPermission, manageApplicationDataPermission }, repo),
                };
                #endregion
            });
            watch.Stop();
            log4net.LogManager.GetLogger(typeof(DatabaseSeeder)).Info($"Startup.Database finished in {watch.ElapsedMilliseconds}ms");
        }
    }
}
