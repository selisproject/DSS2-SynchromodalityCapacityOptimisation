// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System.Collections.Generic;
using System.Web.Http;
using WebApiThrottle;

namespace DSS2_SynchromodalityCapacityOptimisation.Web
{
    public class ThrottleConfig
    {
        public static void Register(HttpConfiguration config)
        {
            var policy = ThrottlePolicy.FromStore(new PolicyConfigurationProvider());
            config.Filters.Add(new ThrottlingFilter(
                                   /*policy: new ThrottlePolicy
                                   {
                                       //scope to IPs
                                       IpThrottling = false,
                                       IpRules = new Dictionary<string, RateLimits>
                                       {
                                           { "::1/10", new RateLimits { PerSecond = 2 } },
                                           { "192.168.2.1", new RateLimits { PerMinute = 30, PerHour = 30*60, PerDay = 30*60*24 } }
                                       },
                                       //white list the "::1" IP to disable throttling on localhost
                                       IpWhitelist = new List<string> { "127.0.0.1", "192.168.0.0/24" },
                                       //scope to clients (if IP throttling is applied then the scope becomes a combination of IP and client key)
                                       //ClientThrottling = true,
                                       //ClientRules = new Dictionary<string, RateLimits>
                                       //{
                                       //    { "api-client-key-demo", new RateLimits { PerDay = 5000 } }
                                       //},
                                       //white list API keys that donâ€™t require throttling
                                       //ClientWhitelist = new List<string> { "admin-key" },
                                       //Endpoint rate limits will be loaded from EnableThrottling attribute
                                       EndpointThrottling = true
                                   },*/
                                   policy: policy,
                                   logger: new Code.WebApi.ApiThrottleLogger(),
                                   policyRepository: new PolicyCacheRepository(), //todo: create a new implementation using out Cache
                                   //repository: new CacheRepository()
                                   repository: new Code.WebApi.ApiThrottleRepository() //todo: test and uncomment
                               ));
        }
    }
}