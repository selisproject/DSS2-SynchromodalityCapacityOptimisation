// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The Item class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Item : IDomainModelClass
    {
        #region Item's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="SKU")]
        protected string sKU = string.Empty;
        [DataMember(Name="Description")]
        protected string description;
        [DataMember(Name="UPC")]
        protected string uPC;
        [DataMember(Name="AvgDailyDemand")]
        protected decimal? avgDailyDemand;
        [DataMember(Name="CoverageDays")]
        protected int? coverageDays;
        [DataMember(Name="PalletSize")]
        protected int? palletSize;
        [DataMember(Name="SupplierPackSize")]
        protected int? supplierPackSize;
        [DataMember(Name="InnerPackSize")]
        protected int? innerPackSize;
        [DataMember(Name="PalletType")]
        protected string palletType;
        [DataMember(Name="PalTI")]
        protected int? palTI;
        [DataMember(Name="PalHI")]
        protected int? palHI;
        [DataMember(Name="UOM")]
        protected string uOM;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Item's Properties
/// <summary>
/// The SKU property
///
/// </summary>
///
        [Key]
        public virtual string SKU
        {
            get
            {
                return sKU;
            }
            set
            {
                sKU = value;
            }
        }
/// <summary>
/// The Description property
///
/// </summary>
///
        public virtual string Description
        {
            get
            {
                return description;
            }
            set
            {
                description = value;
            }
        }
/// <summary>
/// The UPC property
///
/// </summary>
///
        public virtual string UPC
        {
            get
            {
                return uPC;
            }
            set
            {
                uPC = value;
            }
        }
/// <summary>
/// The AvgDailyDemand property
///
/// </summary>
///
        public virtual decimal? AvgDailyDemand
        {
            get
            {
                return avgDailyDemand;
            }
            set
            {
                avgDailyDemand = value;
            }
        }
/// <summary>
/// The CoverageDays property
///
/// </summary>
///
        public virtual int? CoverageDays
        {
            get
            {
                return coverageDays;
            }
            set
            {
                coverageDays = value;
            }
        }
/// <summary>
/// The PalletSize property
///
/// </summary>
///
        public virtual int? PalletSize
        {
            get
            {
                return palletSize;
            }
            set
            {
                palletSize = value;
            }
        }
/// <summary>
/// The SupplierPackSize property
///
/// </summary>
///
        public virtual int? SupplierPackSize
        {
            get
            {
                return supplierPackSize;
            }
            set
            {
                supplierPackSize = value;
            }
        }
/// <summary>
/// The InnerPackSize property
///
/// </summary>
///
        public virtual int? InnerPackSize
        {
            get
            {
                return innerPackSize;
            }
            set
            {
                innerPackSize = value;
            }
        }
/// <summary>
/// The PalletType property
///
/// </summary>
///
        public virtual string PalletType
        {
            get
            {
                return palletType;
            }
            set
            {
                palletType = value;
            }
        }
/// <summary>
/// The PalTI property
///
/// </summary>
///
        public virtual int? PalTI
        {
            get
            {
                return palTI;
            }
            set
            {
                palTI = value;
            }
        }
/// <summary>
/// The PalHI property
///
/// </summary>
///
        public virtual int? PalHI
        {
            get
            {
                return palHI;
            }
            set
            {
                palHI = value;
            }
        }
/// <summary>
/// The UOM property
///
/// </summary>
///
        public virtual string UOM
        {
            get
            {
                return uOM;
            }
            set
            {
                uOM = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Item's Participant Properties
        [DataMember(Name="Agreements")]
        protected IList<Agreement> agreements = new List<Agreement>();
        public virtual List<Agreement> Agreements
        {
            get
            {
                if (agreements is Agreement[])
                {
                    agreements = agreements.ToList();
                }
                if (agreements == null)
                {
                    agreements = new List<Agreement>();
                }
                return agreements.ToList();
            }
            set
            {
                if (agreements is Agreement[])
                {
                    agreements = agreements.ToList();
                }
                if (agreements != null)
                {
                    var __itemsToDelete = new List<Agreement>(agreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAgreements(__item);
                    }
                }
                if(value == null)
                {
                    agreements = new List<Agreement>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAgreements(__item);
                }
            }
        }
        public virtual void AddAgreements(IList<Agreement> __items)
        {
            foreach (var __item in __items)
            {
                AddAgreements(__item);
            }
        }

        public virtual void InternalAddAgreements(Agreement __item)
        {
            if (__item == null || disableInternalAdditions) return;
            agreements?.Add(__item);
        }

        public virtual void InternalRemoveAgreements(Agreement __item)
        {
            if (__item == null) return;
            agreements?.Remove(__item);
        }

        public virtual void AddAgreements(Agreement __item)
        {
            if (__item == null) return;
            if (!agreements.Contains(__item))
                InternalAddAgreements(__item);
            if (!__item.Items.Contains(this))
                __item.AddItems(this);
        }

        public virtual void AddAtIndexAgreements(int index, Agreement __item)
        {
            if (__item == null) return;
            if (!agreements.Contains(__item))
                agreements.Insert(index, __item);
            if (!__item.Items.Contains(this))
                __item.AddItems(this);
        }

        public virtual void RemoveAgreements(Agreement __item)
        {
            if (__item != null)
            {
                if (agreements.Contains(__item))
                    InternalRemoveAgreements(__item);
                if(__item.Items.Contains(this))
                    __item.RemoveItems(this);
            }
        }
        public virtual void SetAgreementsAt(Agreement __item, int __index)
        {
            if (__item == null)
            {
                agreements[__index].RemoveItems(this);
            }
            else
            {
                agreements[__index] = __item;
                if (!__item.Items.Contains(this))
                    __item.AddItems(this);
            }
        }

        public virtual void ClearAgreements()
        {
            if (agreements!=null)
            {
                var __itemsToRemove = agreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAgreements(__item);
                }
            }
        }
        [DataMember(Name="DeliverySchedules")]
        protected IList<DeliverySchedule> deliverySchedules = new List<DeliverySchedule>();
        public virtual List<DeliverySchedule> DeliverySchedules
        {
            get
            {
                if (deliverySchedules is DeliverySchedule[])
                {
                    deliverySchedules = deliverySchedules.ToList();
                }
                if (deliverySchedules == null)
                {
                    deliverySchedules = new List<DeliverySchedule>();
                }
                return deliverySchedules.ToList();
            }
            set
            {
                if (deliverySchedules is DeliverySchedule[])
                {
                    deliverySchedules = deliverySchedules.ToList();
                }
                if (deliverySchedules != null)
                {
                    var __itemsToDelete = new List<DeliverySchedule>(deliverySchedules);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDeliverySchedules(__item);
                    }
                }
                if(value == null)
                {
                    deliverySchedules = new List<DeliverySchedule>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDeliverySchedules(__item);
                }
            }
        }
        public virtual void AddDeliverySchedules(IList<DeliverySchedule> __items)
        {
            foreach (var __item in __items)
            {
                AddDeliverySchedules(__item);
            }
        }

        public virtual void InternalAddDeliverySchedules(DeliverySchedule __item)
        {
            if (__item == null || disableInternalAdditions) return;
            deliverySchedules?.Add(__item);
        }

        public virtual void InternalRemoveDeliverySchedules(DeliverySchedule __item)
        {
            if (__item == null) return;
            deliverySchedules?.Remove(__item);
        }

        public virtual void AddDeliverySchedules(DeliverySchedule __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexDeliverySchedules(int index, DeliverySchedule __item)
        {
            if (__item == null) return;
            deliverySchedules?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveDeliverySchedules(DeliverySchedule __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetDeliverySchedulesAt(DeliverySchedule __item, int __index)
        {
            if (__item == null)
            {
                deliverySchedules[__index].Item = null;
            }
            else
            {
                deliverySchedules[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearDeliverySchedules()
        {
            if (deliverySchedules!=null)
            {
                var __itemsToRemove = deliverySchedules.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDeliverySchedules(__item);
                }
            }
        }
        [DataMember(Name="InventoryItems")]
        protected IList<InventoryItem> inventoryItems = new List<InventoryItem>();
        public virtual List<InventoryItem> InventoryItems
        {
            get
            {
                if (inventoryItems is InventoryItem[])
                {
                    inventoryItems = inventoryItems.ToList();
                }
                if (inventoryItems == null)
                {
                    inventoryItems = new List<InventoryItem>();
                }
                return inventoryItems.ToList();
            }
            set
            {
                if (inventoryItems is InventoryItem[])
                {
                    inventoryItems = inventoryItems.ToList();
                }
                if (inventoryItems != null)
                {
                    var __itemsToDelete = new List<InventoryItem>(inventoryItems);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveInventoryItems(__item);
                    }
                }
                if(value == null)
                {
                    inventoryItems = new List<InventoryItem>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddInventoryItems(__item);
                }
            }
        }
        public virtual void AddInventoryItems(IList<InventoryItem> __items)
        {
            foreach (var __item in __items)
            {
                AddInventoryItems(__item);
            }
        }

        public virtual void InternalAddInventoryItems(InventoryItem __item)
        {
            if (__item == null || disableInternalAdditions) return;
            inventoryItems?.Add(__item);
        }

        public virtual void InternalRemoveInventoryItems(InventoryItem __item)
        {
            if (__item == null) return;
            inventoryItems?.Remove(__item);
        }

        public virtual void AddInventoryItems(InventoryItem __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexInventoryItems(int index, InventoryItem __item)
        {
            if (__item == null) return;
            inventoryItems?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveInventoryItems(InventoryItem __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetInventoryItemsAt(InventoryItem __item, int __index)
        {
            if (__item == null)
            {
                inventoryItems[__index].Item = null;
            }
            else
            {
                inventoryItems[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearInventoryItems()
        {
            if (inventoryItems!=null)
            {
                var __itemsToRemove = inventoryItems.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveInventoryItems(__item);
                }
            }
        }
        [DataMember(Name="SupplierCapacities")]
        protected IList<SupplierCapacity> supplierCapacities = new List<SupplierCapacity>();
        public virtual List<SupplierCapacity> SupplierCapacities
        {
            get
            {
                if (supplierCapacities is SupplierCapacity[])
                {
                    supplierCapacities = supplierCapacities.ToList();
                }
                if (supplierCapacities == null)
                {
                    supplierCapacities = new List<SupplierCapacity>();
                }
                return supplierCapacities.ToList();
            }
            set
            {
                if (supplierCapacities is SupplierCapacity[])
                {
                    supplierCapacities = supplierCapacities.ToList();
                }
                if (supplierCapacities != null)
                {
                    var __itemsToDelete = new List<SupplierCapacity>(supplierCapacities);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSupplierCapacities(__item);
                    }
                }
                if(value == null)
                {
                    supplierCapacities = new List<SupplierCapacity>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSupplierCapacities(__item);
                }
            }
        }
        public virtual void AddSupplierCapacities(IList<SupplierCapacity> __items)
        {
            foreach (var __item in __items)
            {
                AddSupplierCapacities(__item);
            }
        }

        public virtual void InternalAddSupplierCapacities(SupplierCapacity __item)
        {
            if (__item == null || disableInternalAdditions) return;
            supplierCapacities?.Add(__item);
        }

        public virtual void InternalRemoveSupplierCapacities(SupplierCapacity __item)
        {
            if (__item == null) return;
            supplierCapacities?.Remove(__item);
        }

        public virtual void AddSupplierCapacities(SupplierCapacity __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexSupplierCapacities(int index, SupplierCapacity __item)
        {
            if (__item == null) return;
            supplierCapacities?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveSupplierCapacities(SupplierCapacity __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetSupplierCapacitiesAt(SupplierCapacity __item, int __index)
        {
            if (__item == null)
            {
                supplierCapacities[__index].Item = null;
            }
            else
            {
                supplierCapacities[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearSupplierCapacities()
        {
            if (supplierCapacities!=null)
            {
                var __itemsToRemove = supplierCapacities.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSupplierCapacities(__item);
                }
            }
        }
        [DataMember(Name="Supplier")]
        protected Supplier supplier;
        public virtual Supplier Supplier
        {
            get
            {
                return supplier;
            }
            set
            {
                if(Equals(supplier, value)) return;
                var __oldValue = supplier;
                supplier = value;
            }
        }
        [DataMember(Name="BusinessUnit")]
        protected BusinessUnit businessUnit;
        public virtual BusinessUnit BusinessUnit
        {
            get
            {
                return businessUnit;
            }
            set
            {
                if(Equals(businessUnit, value)) return;
                var __oldValue = businessUnit;
                if (value != null)
                {
                    businessUnit = value;
                }
                else
                {
                    if (businessUnit != null)
                    {
                        businessUnit = null;
                    }
                }
            }
        }
        [DataMember(Name="Category")]
        protected Category category;
        public virtual Category Category
        {
            get
            {
                return category;
            }
            set
            {
                if(Equals(category, value)) return;
                var __oldValue = category;
                if (value != null)
                {
                    category = value;
                }
                else
                {
                    if (category != null)
                    {
                        category = null;
                    }
                }
            }
        }
        [DataMember(Name="SubCategory")]
        protected SubCategory subCategory;
        public virtual SubCategory SubCategory
        {
            get
            {
                return subCategory;
            }
            set
            {
                if(Equals(subCategory, value)) return;
                var __oldValue = subCategory;
                if (value != null)
                {
                    subCategory = value;
                }
                else
                {
                    if (subCategory != null)
                    {
                        subCategory = null;
                    }
                }
            }
        }
        [DataMember(Name="BaseUnit")]
        protected BaseUnit baseUnit;
        public virtual BaseUnit BaseUnit
        {
            get
            {
                return baseUnit;
            }
            set
            {
                if(Equals(baseUnit, value)) return;
                var __oldValue = baseUnit;
                if (value != null)
                {
                    baseUnit = value;
                }
                else
                {
                    if (baseUnit != null)
                    {
                        baseUnit = null;
                    }
                }
            }
        }
        [DataMember(Name="MinimumQuantity")]
        protected MinimumQuantity minimumQuantity;
        public virtual MinimumQuantity MinimumQuantity
        {
            get
            {
                return minimumQuantity;
            }
            set
            {
                if(Equals(minimumQuantity, value)) return;
                var __oldValue = minimumQuantity;
                if (value != null)
                {
                    if(minimumQuantity != null && !Equals(minimumQuantity, value))
                        minimumQuantity.Item = null;
                    minimumQuantity = value;
                    if(minimumQuantity.Item != this)
                        minimumQuantity.Item = this;
                }
                else
                {
                    if (minimumQuantity != null)
                    {
                        var __obj = minimumQuantity;
                        minimumQuantity = null;
                        __obj.Item = null;
                    }
                }
            }
        }
        [DataMember(Name="Notifications")]
        protected IList<Notification> notifications = new List<Notification>();
        public virtual List<Notification> Notifications
        {
            get
            {
                if (notifications is Notification[])
                {
                    notifications = notifications.ToList();
                }
                if (notifications == null)
                {
                    notifications = new List<Notification>();
                }
                return notifications.ToList();
            }
            set
            {
                if (notifications is Notification[])
                {
                    notifications = notifications.ToList();
                }
                if (notifications != null)
                {
                    var __itemsToDelete = new List<Notification>(notifications);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveNotifications(__item);
                    }
                }
                if(value == null)
                {
                    notifications = new List<Notification>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddNotifications(__item);
                }
            }
        }
        public virtual void AddNotifications(IList<Notification> __items)
        {
            foreach (var __item in __items)
            {
                AddNotifications(__item);
            }
        }

        public virtual void InternalAddNotifications(Notification __item)
        {
            if (__item == null || disableInternalAdditions) return;
            notifications?.Add(__item);
        }

        public virtual void InternalRemoveNotifications(Notification __item)
        {
            if (__item == null) return;
            notifications?.Remove(__item);
        }

        public virtual void AddNotifications(Notification __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexNotifications(int index, Notification __item)
        {
            if (__item == null) return;
            notifications?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveNotifications(Notification __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetNotificationsAt(Notification __item, int __index)
        {
            if (__item == null)
            {
                notifications[__index].Item = null;
            }
            else
            {
                notifications[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearNotifications()
        {
            if (notifications!=null)
            {
                var __itemsToRemove = notifications.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveNotifications(__item);
                }
            }
        }
        [DataMember(Name="PastOrders")]
        protected IList<PastOrder> pastOrders = new List<PastOrder>();
        public virtual List<PastOrder> PastOrders
        {
            get
            {
                if (pastOrders is PastOrder[])
                {
                    pastOrders = pastOrders.ToList();
                }
                if (pastOrders == null)
                {
                    pastOrders = new List<PastOrder>();
                }
                return pastOrders.ToList();
            }
            set
            {
                if (pastOrders is PastOrder[])
                {
                    pastOrders = pastOrders.ToList();
                }
                if (pastOrders != null)
                {
                    var __itemsToDelete = new List<PastOrder>(pastOrders);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemovePastOrders(__item);
                    }
                }
                if(value == null)
                {
                    pastOrders = new List<PastOrder>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddPastOrders(__item);
                }
            }
        }
        public virtual void AddPastOrders(IList<PastOrder> __items)
        {
            foreach (var __item in __items)
            {
                AddPastOrders(__item);
            }
        }

        public virtual void InternalAddPastOrders(PastOrder __item)
        {
            if (__item == null || disableInternalAdditions) return;
            pastOrders?.Add(__item);
        }

        public virtual void InternalRemovePastOrders(PastOrder __item)
        {
            if (__item == null) return;
            pastOrders?.Remove(__item);
        }

        public virtual void AddPastOrders(PastOrder __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexPastOrders(int index, PastOrder __item)
        {
            if (__item == null) return;
            pastOrders?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemovePastOrders(PastOrder __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetPastOrdersAt(PastOrder __item, int __index)
        {
            if (__item == null)
            {
                pastOrders[__index].Item = null;
            }
            else
            {
                pastOrders[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearPastOrders()
        {
            if (pastOrders!=null)
            {
                var __itemsToRemove = pastOrders.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemovePastOrders(__item);
                }
            }
        }
        [DataMember(Name="ItemsForecast")]
        protected IList<Sales> itemsForecast = new List<Sales>();
        public virtual List<Sales> ItemsForecast
        {
            get
            {
                if (itemsForecast is Sales[])
                {
                    itemsForecast = itemsForecast.ToList();
                }
                if (itemsForecast == null)
                {
                    itemsForecast = new List<Sales>();
                }
                return itemsForecast.ToList();
            }
            set
            {
                if (itemsForecast is Sales[])
                {
                    itemsForecast = itemsForecast.ToList();
                }
                if (itemsForecast != null)
                {
                    var __itemsToDelete = new List<Sales>(itemsForecast);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveItemsForecast(__item);
                    }
                }
                if(value == null)
                {
                    itemsForecast = new List<Sales>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddItemsForecast(__item);
                }
            }
        }
        public virtual void AddItemsForecast(IList<Sales> __items)
        {
            foreach (var __item in __items)
            {
                AddItemsForecast(__item);
            }
        }

        public virtual void InternalAddItemsForecast(Sales __item)
        {
            if (__item == null || disableInternalAdditions) return;
            itemsForecast?.Add(__item);
        }

        public virtual void InternalRemoveItemsForecast(Sales __item)
        {
            if (__item == null) return;
            itemsForecast?.Remove(__item);
        }

        public virtual void AddItemsForecast(Sales __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexItemsForecast(int index, Sales __item)
        {
            if (__item == null) return;
            itemsForecast?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveItemsForecast(Sales __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetItemsForecastAt(Sales __item, int __index)
        {
            if (__item == null)
            {
                itemsForecast[__index].Item = null;
            }
            else
            {
                itemsForecast[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearItemsForecast()
        {
            if (itemsForecast!=null)
            {
                var __itemsToRemove = itemsForecast.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveItemsForecast(__item);
                }
            }
        }
        [DataMember(Name="SLALeadTimes")]
        protected IList<SLALeadTime> sLALeadTimes = new List<SLALeadTime>();
        public virtual List<SLALeadTime> SLALeadTimes
        {
            get
            {
                if (sLALeadTimes is SLALeadTime[])
                {
                    sLALeadTimes = sLALeadTimes.ToList();
                }
                if (sLALeadTimes == null)
                {
                    sLALeadTimes = new List<SLALeadTime>();
                }
                return sLALeadTimes.ToList();
            }
            set
            {
                if (sLALeadTimes is SLALeadTime[])
                {
                    sLALeadTimes = sLALeadTimes.ToList();
                }
                if (sLALeadTimes != null)
                {
                    var __itemsToDelete = new List<SLALeadTime>(sLALeadTimes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSLALeadTimes(__item);
                    }
                }
                if(value == null)
                {
                    sLALeadTimes = new List<SLALeadTime>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSLALeadTimes(__item);
                }
            }
        }
        public virtual void AddSLALeadTimes(IList<SLALeadTime> __items)
        {
            foreach (var __item in __items)
            {
                AddSLALeadTimes(__item);
            }
        }

        public virtual void InternalAddSLALeadTimes(SLALeadTime __item)
        {
            if (__item == null || disableInternalAdditions) return;
            sLALeadTimes?.Add(__item);
        }

        public virtual void InternalRemoveSLALeadTimes(SLALeadTime __item)
        {
            if (__item == null) return;
            sLALeadTimes?.Remove(__item);
        }

        public virtual void AddSLALeadTimes(SLALeadTime __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexSLALeadTimes(int index, SLALeadTime __item)
        {
            if (__item == null) return;
            sLALeadTimes?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveSLALeadTimes(SLALeadTime __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetSLALeadTimesAt(SLALeadTime __item, int __index)
        {
            if (__item == null)
            {
                sLALeadTimes[__index].Item = null;
            }
            else
            {
                sLALeadTimes[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearSLALeadTimes()
        {
            if (sLALeadTimes!=null)
            {
                var __itemsToRemove = sLALeadTimes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSLALeadTimes(__item);
                }
            }
        }
        [DataMember(Name="SLADeliveries")]
        protected IList<SLADelivery> sLADeliveries = new List<SLADelivery>();
        public virtual List<SLADelivery> SLADeliveries
        {
            get
            {
                if (sLADeliveries is SLADelivery[])
                {
                    sLADeliveries = sLADeliveries.ToList();
                }
                if (sLADeliveries == null)
                {
                    sLADeliveries = new List<SLADelivery>();
                }
                return sLADeliveries.ToList();
            }
            set
            {
                if (sLADeliveries is SLADelivery[])
                {
                    sLADeliveries = sLADeliveries.ToList();
                }
                if (sLADeliveries != null)
                {
                    var __itemsToDelete = new List<SLADelivery>(sLADeliveries);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSLADeliveries(__item);
                    }
                }
                if(value == null)
                {
                    sLADeliveries = new List<SLADelivery>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSLADeliveries(__item);
                }
            }
        }
        public virtual void AddSLADeliveries(IList<SLADelivery> __items)
        {
            foreach (var __item in __items)
            {
                AddSLADeliveries(__item);
            }
        }

        public virtual void InternalAddSLADeliveries(SLADelivery __item)
        {
            if (__item == null || disableInternalAdditions) return;
            sLADeliveries?.Add(__item);
        }

        public virtual void InternalRemoveSLADeliveries(SLADelivery __item)
        {
            if (__item == null) return;
            sLADeliveries?.Remove(__item);
        }

        public virtual void AddSLADeliveries(SLADelivery __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexSLADeliveries(int index, SLADelivery __item)
        {
            if (__item == null) return;
            sLADeliveries?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveSLADeliveries(SLADelivery __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetSLADeliveriesAt(SLADelivery __item, int __index)
        {
            if (__item == null)
            {
                sLADeliveries[__index].Item = null;
            }
            else
            {
                sLADeliveries[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearSLADeliveries()
        {
            if (sLADeliveries!=null)
            {
                var __itemsToRemove = sLADeliveries.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSLADeliveries(__item);
                }
            }
        }
        [DataMember(Name="StocksOnHand")]
        protected IList<StockOnHand> stocksOnHand = new List<StockOnHand>();
        public virtual List<StockOnHand> StocksOnHand
        {
            get
            {
                if (stocksOnHand is StockOnHand[])
                {
                    stocksOnHand = stocksOnHand.ToList();
                }
                if (stocksOnHand == null)
                {
                    stocksOnHand = new List<StockOnHand>();
                }
                return stocksOnHand.ToList();
            }
            set
            {
                if (stocksOnHand is StockOnHand[])
                {
                    stocksOnHand = stocksOnHand.ToList();
                }
                if (stocksOnHand != null)
                {
                    var __itemsToDelete = new List<StockOnHand>(stocksOnHand);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveStocksOnHand(__item);
                    }
                }
                if(value == null)
                {
                    stocksOnHand = new List<StockOnHand>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddStocksOnHand(__item);
                }
            }
        }
        public virtual void AddStocksOnHand(IList<StockOnHand> __items)
        {
            foreach (var __item in __items)
            {
                AddStocksOnHand(__item);
            }
        }

        public virtual void InternalAddStocksOnHand(StockOnHand __item)
        {
            if (__item == null || disableInternalAdditions) return;
            stocksOnHand?.Add(__item);
        }

        public virtual void InternalRemoveStocksOnHand(StockOnHand __item)
        {
            if (__item == null) return;
            stocksOnHand?.Remove(__item);
        }

        public virtual void AddStocksOnHand(StockOnHand __item)
        {
            if (__item == null) return;
            if (__item.Item != this)
                __item.Item = this;
        }

        public virtual void AddAtIndexStocksOnHand(int index, StockOnHand __item)
        {
            if (__item == null) return;
            stocksOnHand?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Item != this)
                    __item.Item = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveStocksOnHand(StockOnHand __item)
        {
            if (__item != null)
            {
                __item.Item = null;
            }
        }
        public virtual void SetStocksOnHandAt(StockOnHand __item, int __index)
        {
            if (__item == null)
            {
                stocksOnHand[__index].Item = null;
            }
            else
            {
                stocksOnHand[__index] = __item;
                if (__item.Item != this)
                    __item.Item = this;
            }
        }

        public virtual void ClearStocksOnHand()
        {
            if (stocksOnHand!=null)
            {
                var __itemsToRemove = stocksOnHand.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveStocksOnHand(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Item class
/// </summary>
/// <returns>New Item object</returns>
/// <remarks></remarks>
        public Item()
        {
            coverageDays = 1;
        }
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (SKU == null)
            {
                __errors.Add("Property 'SKU' is required.");
            }
            if (SKU != null && string.IsNullOrWhiteSpace(SKU))
            {
                __errors.Add("String 'SKU' cannot be empty.");
            }
            if (SKU != null && SKU.Length > 100)
            {
                __errors.Add("Length of property 'SKU' cannot be greater than 100.");
            }
            if (Description != null && Description.Length > 100)
            {
                __errors.Add("Length of property 'Description' cannot be greater than 100.");
            }
            if (UPC != null && UPC.Length > 100)
            {
                __errors.Add("Length of property 'UPC' cannot be greater than 100.");
            }
            if (PalletType != null && PalletType.Length > 100)
            {
                __errors.Add("Length of property 'PalletType' cannot be greater than 100.");
            }
            if (UOM != null && UOM.Length > 100)
            {
                __errors.Add("Length of property 'UOM' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Item' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (SKU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Description?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (UPC?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AvgDailyDemand?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CoverageDays?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PalletSize?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SupplierPackSize?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (InnerPackSize?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PalletType?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PalTI?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PalHI?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (UOM?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Item] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Item Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Item copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Item)copiedObjects[this];
            copy = copy ?? new Item();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.SKU = this.SKU;
            }
            copy.Description = this.Description;
            copy.UPC = this.UPC;
            copy.AvgDailyDemand = this.AvgDailyDemand;
            copy.CoverageDays = this.CoverageDays;
            copy.PalletSize = this.PalletSize;
            copy.SupplierPackSize = this.SupplierPackSize;
            copy.InnerPackSize = this.InnerPackSize;
            copy.PalletType = this.PalletType;
            copy.PalTI = this.PalTI;
            copy.PalHI = this.PalHI;
            copy.UOM = this.UOM;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.agreements = new List<Agreement>();
            if(deep && this.agreements != null)
            {
                foreach (var __item in this.agreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAgreements(__item);
                        else
                            copy.AddAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAgreements((Agreement)copiedObjects[__item]);
                    }
                }
            }
            copy.deliverySchedules = new List<DeliverySchedule>();
            if(deep && this.deliverySchedules != null)
            {
                foreach (var __item in this.deliverySchedules)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDeliverySchedules(__item);
                        else
                            copy.AddDeliverySchedules(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDeliverySchedules((DeliverySchedule)copiedObjects[__item]);
                    }
                }
            }
            copy.inventoryItems = new List<InventoryItem>();
            if(deep && this.inventoryItems != null)
            {
                foreach (var __item in this.inventoryItems)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddInventoryItems(__item);
                        else
                            copy.AddInventoryItems(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddInventoryItems((InventoryItem)copiedObjects[__item]);
                    }
                }
            }
            copy.supplierCapacities = new List<SupplierCapacity>();
            if(deep && this.supplierCapacities != null)
            {
                foreach (var __item in this.supplierCapacities)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSupplierCapacities(__item);
                        else
                            copy.AddSupplierCapacities(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSupplierCapacities((SupplierCapacity)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.supplier != null)
            {
                if (!copiedObjects.Contains(this.supplier))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Supplier = this.Supplier;
                    else if (asNew)
                        copy.Supplier = this.Supplier.Copy(deep, copiedObjects, true);
                    else
                        copy.supplier = this.supplier.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Supplier = (Supplier)copiedObjects[this.Supplier];
                    else
                        copy.supplier = (Supplier)copiedObjects[this.Supplier];
                }
            }
            if(deep && this.businessUnit != null)
            {
                if (!copiedObjects.Contains(this.businessUnit))
                {
                    if (asNew && reuseNestedObjects)
                        copy.BusinessUnit = this.BusinessUnit;
                    else if (asNew)
                        copy.BusinessUnit = this.BusinessUnit.Copy(deep, copiedObjects, true);
                    else
                        copy.businessUnit = this.businessUnit.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.BusinessUnit = (BusinessUnit)copiedObjects[this.BusinessUnit];
                    else
                        copy.businessUnit = (BusinessUnit)copiedObjects[this.BusinessUnit];
                }
            }
            if(deep && this.category != null)
            {
                if (!copiedObjects.Contains(this.category))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Category = this.Category;
                    else if (asNew)
                        copy.Category = this.Category.Copy(deep, copiedObjects, true);
                    else
                        copy.category = this.category.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Category = (Category)copiedObjects[this.Category];
                    else
                        copy.category = (Category)copiedObjects[this.Category];
                }
            }
            if(deep && this.subCategory != null)
            {
                if (!copiedObjects.Contains(this.subCategory))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SubCategory = this.SubCategory;
                    else if (asNew)
                        copy.SubCategory = this.SubCategory.Copy(deep, copiedObjects, true);
                    else
                        copy.subCategory = this.subCategory.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SubCategory = (SubCategory)copiedObjects[this.SubCategory];
                    else
                        copy.subCategory = (SubCategory)copiedObjects[this.SubCategory];
                }
            }
            if(deep && this.baseUnit != null)
            {
                if (!copiedObjects.Contains(this.baseUnit))
                {
                    if (asNew && reuseNestedObjects)
                        copy.BaseUnit = this.BaseUnit;
                    else if (asNew)
                        copy.BaseUnit = this.BaseUnit.Copy(deep, copiedObjects, true);
                    else
                        copy.baseUnit = this.baseUnit.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.BaseUnit = (BaseUnit)copiedObjects[this.BaseUnit];
                    else
                        copy.baseUnit = (BaseUnit)copiedObjects[this.BaseUnit];
                }
            }
            if(deep && this.minimumQuantity != null)
            {
                if (!copiedObjects.Contains(this.minimumQuantity))
                {
                    if (asNew && reuseNestedObjects)
                        copy.MinimumQuantity = this.MinimumQuantity;
                    else if (asNew)
                        copy.MinimumQuantity = this.MinimumQuantity.Copy(deep, copiedObjects, true);
                    else
                        copy.minimumQuantity = this.minimumQuantity.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.MinimumQuantity = (MinimumQuantity)copiedObjects[this.MinimumQuantity];
                    else
                        copy.minimumQuantity = (MinimumQuantity)copiedObjects[this.MinimumQuantity];
                }
            }
            copy.notifications = new List<Notification>();
            if(deep && this.notifications != null)
            {
                foreach (var __item in this.notifications)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddNotifications(__item);
                        else
                            copy.AddNotifications(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddNotifications((Notification)copiedObjects[__item]);
                    }
                }
            }
            copy.pastOrders = new List<PastOrder>();
            if(deep && this.pastOrders != null)
            {
                foreach (var __item in this.pastOrders)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddPastOrders(__item);
                        else
                            copy.AddPastOrders(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddPastOrders((PastOrder)copiedObjects[__item]);
                    }
                }
            }
            copy.itemsForecast = new List<Sales>();
            if(deep && this.itemsForecast != null)
            {
                foreach (var __item in this.itemsForecast)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddItemsForecast(__item);
                        else
                            copy.AddItemsForecast(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddItemsForecast((Sales)copiedObjects[__item]);
                    }
                }
            }
            copy.sLALeadTimes = new List<SLALeadTime>();
            if(deep && this.sLALeadTimes != null)
            {
                foreach (var __item in this.sLALeadTimes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSLALeadTimes(__item);
                        else
                            copy.AddSLALeadTimes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSLALeadTimes((SLALeadTime)copiedObjects[__item]);
                    }
                }
            }
            copy.sLADeliveries = new List<SLADelivery>();
            if(deep && this.sLADeliveries != null)
            {
                foreach (var __item in this.sLADeliveries)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSLADeliveries(__item);
                        else
                            copy.AddSLADeliveries(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSLADeliveries((SLADelivery)copiedObjects[__item]);
                    }
                }
            }
            copy.stocksOnHand = new List<StockOnHand>();
            if(deep && this.stocksOnHand != null)
            {
                foreach (var __item in this.stocksOnHand)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddStocksOnHand(__item);
                        else
                            copy.AddStocksOnHand(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddStocksOnHand((StockOnHand)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Item;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Item x, Item y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Item x, Item y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("SKU");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.SKU.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return string.IsNullOrEmpty(this.SKU);
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Item compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.SKU.Equals(compareTo.SKU);
        }

        #endregion


    }
}
