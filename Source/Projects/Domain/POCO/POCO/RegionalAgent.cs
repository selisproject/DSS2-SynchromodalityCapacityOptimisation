// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The RegionalAgent class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class RegionalAgent : IDomainModelClass
    {
        #region RegionalAgent's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="AgencyCode")]
        protected string agencyCode;
        [DataMember(Name="AgencyDescription")]
        protected string agencyDescription;
        [DataMember(Name="AgencyAddress")]
        protected string agencyAddress;
        [DataMember(Name="IsSelected")]
        protected bool isSelected;
        [DataMember(Name="Rating")]
        protected int? rating;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region RegionalAgent's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The AgencyCode property
///
/// </summary>
///
        public virtual string AgencyCode
        {
            get
            {
                return agencyCode;
            }
            set
            {
                agencyCode = value;
            }
        }
/// <summary>
/// The AgencyDescription property
///
/// </summary>
///
        public virtual string AgencyDescription
        {
            get
            {
                return agencyDescription;
            }
            set
            {
                agencyDescription = value;
            }
        }
/// <summary>
/// The AgencyAddress property
///
/// </summary>
///
        public virtual string AgencyAddress
        {
            get
            {
                return agencyAddress;
            }
            set
            {
                agencyAddress = value;
            }
        }
/// <summary>
/// The IsSelected property
///
/// </summary>
///
        public virtual bool IsSelected
        {
            get
            {
                return isSelected;
            }
            set
            {
                isSelected = value;
            }
        }
/// <summary>
/// The Rating property
///
/// </summary>
///
        public virtual int? Rating
        {
            get
            {
                return rating;
            }
            set
            {
                rating = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region RegionalAgent's Participant Properties
        [DataMember(Name="WarehousesSupport")]
        protected IList<Warehouse> warehousesSupport = new List<Warehouse>();
        public virtual List<Warehouse> WarehousesSupport
        {
            get
            {
                if (warehousesSupport is Warehouse[])
                {
                    warehousesSupport = warehousesSupport.ToList();
                }
                if (warehousesSupport == null)
                {
                    warehousesSupport = new List<Warehouse>();
                }
                return warehousesSupport.ToList();
            }
            set
            {
                if (warehousesSupport is Warehouse[])
                {
                    warehousesSupport = warehousesSupport.ToList();
                }
                if (warehousesSupport != null)
                {
                    var __itemsToDelete = new List<Warehouse>(warehousesSupport);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveWarehousesSupport(__item);
                    }
                }
                if(value == null)
                {
                    warehousesSupport = new List<Warehouse>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddWarehousesSupport(__item);
                }
            }
        }
        public virtual void AddWarehousesSupport(IList<Warehouse> __items)
        {
            foreach (var __item in __items)
            {
                AddWarehousesSupport(__item);
            }
        }

        public virtual void InternalAddWarehousesSupport(Warehouse __item)
        {
            if (__item == null || disableInternalAdditions) return;
            warehousesSupport?.Add(__item);
        }

        public virtual void InternalRemoveWarehousesSupport(Warehouse __item)
        {
            if (__item == null) return;
            warehousesSupport?.Remove(__item);
        }

        public virtual void AddWarehousesSupport(Warehouse __item)
        {
            if (__item == null) return;
            if (!warehousesSupport.Contains(__item))
                InternalAddWarehousesSupport(__item);
            if (!__item.RegionalAgentsService.Contains(this))
                __item.AddRegionalAgentsService(this);
        }

        public virtual void AddAtIndexWarehousesSupport(int index, Warehouse __item)
        {
            if (__item == null) return;
            if (!warehousesSupport.Contains(__item))
                warehousesSupport.Insert(index, __item);
            if (!__item.RegionalAgentsService.Contains(this))
                __item.AddRegionalAgentsService(this);
        }

        public virtual void RemoveWarehousesSupport(Warehouse __item)
        {
            if (__item != null)
            {
                if (warehousesSupport.Contains(__item))
                    InternalRemoveWarehousesSupport(__item);
                if(__item.RegionalAgentsService.Contains(this))
                    __item.RemoveRegionalAgentsService(this);
            }
        }
        public virtual void SetWarehousesSupportAt(Warehouse __item, int __index)
        {
            if (__item == null)
            {
                warehousesSupport[__index].RemoveRegionalAgentsService(this);
            }
            else
            {
                warehousesSupport[__index] = __item;
                if (!__item.RegionalAgentsService.Contains(this))
                    __item.AddRegionalAgentsService(this);
            }
        }

        public virtual void ClearWarehousesSupport()
        {
            if (warehousesSupport!=null)
            {
                var __itemsToRemove = warehousesSupport.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveWarehousesSupport(__item);
                }
            }
        }
        [DataMember(Name="RAUsers")]
        protected IList<RegionalAgentUser> rAUsers = new List<RegionalAgentUser>();
        public virtual List<RegionalAgentUser> RAUsers
        {
            get
            {
                if (rAUsers is RegionalAgentUser[])
                {
                    rAUsers = rAUsers.ToList();
                }
                if (rAUsers == null)
                {
                    rAUsers = new List<RegionalAgentUser>();
                }
                return rAUsers.ToList();
            }
            set
            {
                if (rAUsers is RegionalAgentUser[])
                {
                    rAUsers = rAUsers.ToList();
                }
                if (rAUsers != null)
                {
                    var __itemsToDelete = new List<RegionalAgentUser>(rAUsers);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveRAUsers(__item);
                    }
                }
                if(value == null)
                {
                    rAUsers = new List<RegionalAgentUser>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddRAUsers(__item);
                }
            }
        }
        public virtual void AddRAUsers(IList<RegionalAgentUser> __items)
        {
            foreach (var __item in __items)
            {
                AddRAUsers(__item);
            }
        }

        public virtual void InternalAddRAUsers(RegionalAgentUser __item)
        {
            if (__item == null || disableInternalAdditions) return;
            rAUsers?.Add(__item);
        }

        public virtual void InternalRemoveRAUsers(RegionalAgentUser __item)
        {
            if (__item == null) return;
            rAUsers?.Remove(__item);
        }

        public virtual void AddRAUsers(RegionalAgentUser __item)
        {
            if (__item == null) return;
            if (__item.RegionalAgent != this)
                __item.RegionalAgent = this;
        }

        public virtual void AddAtIndexRAUsers(int index, RegionalAgentUser __item)
        {
            if (__item == null) return;
            rAUsers?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.RegionalAgent != this)
                    __item.RegionalAgent = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveRAUsers(RegionalAgentUser __item)
        {
            if (__item != null)
            {
                __item.RegionalAgent = null;
            }
        }
        public virtual void SetRAUsersAt(RegionalAgentUser __item, int __index)
        {
            if (__item == null)
            {
                rAUsers[__index].RegionalAgent = null;
            }
            else
            {
                rAUsers[__index] = __item;
                if (__item.RegionalAgent != this)
                    __item.RegionalAgent = this;
            }
        }

        public virtual void ClearRAUsers()
        {
            if (rAUsers!=null)
            {
                var __itemsToRemove = rAUsers.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveRAUsers(__item);
                }
            }
        }
        [DataMember(Name="AddressCoordinates")]
        protected GeoCoordinates addressCoordinates;
        public virtual GeoCoordinates AddressCoordinates
        {
            get
            {
                return addressCoordinates;
            }
            set
            {
                if(Equals(addressCoordinates, value)) return;
                var __oldValue = addressCoordinates;
                if (value != null)
                {
                    addressCoordinates = value;
                }
                else
                {
                    if (addressCoordinates != null)
                    {
                        addressCoordinates = null;
                    }
                }
            }
        }
        [DataMember(Name="AreaSupport")]
        protected IList<GeoArea> areaSupport = new List<GeoArea>();
        public virtual List<GeoArea> AreaSupport
        {
            get
            {
                if (areaSupport is GeoArea[])
                {
                    areaSupport = areaSupport.ToList();
                }
                if (areaSupport == null)
                {
                    areaSupport = new List<GeoArea>();
                }
                return areaSupport.ToList();
            }
            set
            {
                if (areaSupport is GeoArea[])
                {
                    areaSupport = areaSupport.ToList();
                }
                if (areaSupport != null)
                {
                    var __itemsToDelete = new List<GeoArea>(areaSupport);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAreaSupport(__item);
                    }
                }
                if(value == null)
                {
                    areaSupport = new List<GeoArea>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAreaSupport(__item);
                }
            }
        }
        public virtual void AddAreaSupport(IList<GeoArea> __items)
        {
            foreach (var __item in __items)
            {
                AddAreaSupport(__item);
            }
        }

        public virtual void InternalAddAreaSupport(GeoArea __item)
        {
            if (__item == null || disableInternalAdditions) return;
            areaSupport?.Add(__item);
        }

        public virtual void InternalRemoveAreaSupport(GeoArea __item)
        {
            if (__item == null) return;
            areaSupport?.Remove(__item);
        }

        public virtual void AddAreaSupport(GeoArea __item)
        {
            if (__item == null) return;
            InternalAddAreaSupport(__item);
        }

        public virtual void AddAtIndexAreaSupport(int index, GeoArea __item)
        {
            if (__item == null) return;
            areaSupport?.Insert(index, __item);
        }

        public virtual void RemoveAreaSupport(GeoArea __item)
        {
            if (__item != null)
            {
                InternalRemoveAreaSupport(__item);
            }
        }
        public virtual void SetAreaSupportAt(GeoArea __item, int __index)
        {
            if (__item == null)
            {
                areaSupport[__index] = null;
            }
            else
            {
                areaSupport[__index] = __item;
            }
        }

        public virtual void ClearAreaSupport()
        {
            if (areaSupport!=null)
            {
                var __itemsToRemove = areaSupport.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAreaSupport(__item);
                }
            }
        }
        [DataMember(Name="Trucks")]
        protected IList<Truck> trucks = new List<Truck>();
        public virtual List<Truck> Trucks
        {
            get
            {
                if (trucks is Truck[])
                {
                    trucks = trucks.ToList();
                }
                if (trucks == null)
                {
                    trucks = new List<Truck>();
                }
                return trucks.ToList();
            }
            set
            {
                if (trucks is Truck[])
                {
                    trucks = trucks.ToList();
                }
                if (trucks != null)
                {
                    var __itemsToDelete = new List<Truck>(trucks);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveTrucks(__item);
                    }
                }
                if(value == null)
                {
                    trucks = new List<Truck>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddTrucks(__item);
                }
            }
        }
        public virtual void AddTrucks(IList<Truck> __items)
        {
            foreach (var __item in __items)
            {
                AddTrucks(__item);
            }
        }

        public virtual void InternalAddTrucks(Truck __item)
        {
            if (__item == null || disableInternalAdditions) return;
            trucks?.Add(__item);
        }

        public virtual void InternalRemoveTrucks(Truck __item)
        {
            if (__item == null) return;
            trucks?.Remove(__item);
        }

        public virtual void AddTrucks(Truck __item)
        {
            if (__item == null) return;
            if (__item.RegionalAgent != this)
                __item.RegionalAgent = this;
        }

        public virtual void AddAtIndexTrucks(int index, Truck __item)
        {
            if (__item == null) return;
            trucks?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.RegionalAgent != this)
                    __item.RegionalAgent = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveTrucks(Truck __item)
        {
            if (__item != null)
            {
                __item.RegionalAgent = null;
            }
        }
        public virtual void SetTrucksAt(Truck __item, int __index)
        {
            if (__item == null)
            {
                trucks[__index].RegionalAgent = null;
            }
            else
            {
                trucks[__index] = __item;
                if (__item.RegionalAgent != this)
                    __item.RegionalAgent = this;
            }
        }

        public virtual void ClearTrucks()
        {
            if (trucks!=null)
            {
                var __itemsToRemove = trucks.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveTrucks(__item);
                }
            }
        }
        [DataMember(Name="ScheduledRouteTemplates")]
        protected IList<ScheduledRouteTemplate> scheduledRouteTemplates = new List<ScheduledRouteTemplate>();
        public virtual List<ScheduledRouteTemplate> ScheduledRouteTemplates
        {
            get
            {
                if (scheduledRouteTemplates is ScheduledRouteTemplate[])
                {
                    scheduledRouteTemplates = scheduledRouteTemplates.ToList();
                }
                if (scheduledRouteTemplates == null)
                {
                    scheduledRouteTemplates = new List<ScheduledRouteTemplate>();
                }
                return scheduledRouteTemplates.ToList();
            }
            set
            {
                if (scheduledRouteTemplates is ScheduledRouteTemplate[])
                {
                    scheduledRouteTemplates = scheduledRouteTemplates.ToList();
                }
                if (scheduledRouteTemplates != null)
                {
                    var __itemsToDelete = new List<ScheduledRouteTemplate>(scheduledRouteTemplates);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveScheduledRouteTemplates(__item);
                    }
                }
                if(value == null)
                {
                    scheduledRouteTemplates = new List<ScheduledRouteTemplate>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddScheduledRouteTemplates(__item);
                }
            }
        }
        public virtual void AddScheduledRouteTemplates(IList<ScheduledRouteTemplate> __items)
        {
            foreach (var __item in __items)
            {
                AddScheduledRouteTemplates(__item);
            }
        }

        public virtual void InternalAddScheduledRouteTemplates(ScheduledRouteTemplate __item)
        {
            if (__item == null || disableInternalAdditions) return;
            scheduledRouteTemplates?.Add(__item);
        }

        public virtual void InternalRemoveScheduledRouteTemplates(ScheduledRouteTemplate __item)
        {
            if (__item == null) return;
            scheduledRouteTemplates?.Remove(__item);
        }

        public virtual void AddScheduledRouteTemplates(ScheduledRouteTemplate __item)
        {
            if (__item == null) return;
            if (__item.Owner != this)
                __item.Owner = this;
        }

        public virtual void AddAtIndexScheduledRouteTemplates(int index, ScheduledRouteTemplate __item)
        {
            if (__item == null) return;
            scheduledRouteTemplates?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Owner != this)
                    __item.Owner = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveScheduledRouteTemplates(ScheduledRouteTemplate __item)
        {
            if (__item != null)
            {
                __item.Owner = null;
            }
        }
        public virtual void SetScheduledRouteTemplatesAt(ScheduledRouteTemplate __item, int __index)
        {
            if (__item == null)
            {
                scheduledRouteTemplates[__index].Owner = null;
            }
            else
            {
                scheduledRouteTemplates[__index] = __item;
                if (__item.Owner != this)
                    __item.Owner = this;
            }
        }

        public virtual void ClearScheduledRouteTemplates()
        {
            if (scheduledRouteTemplates!=null)
            {
                var __itemsToRemove = scheduledRouteTemplates.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveScheduledRouteTemplates(__item);
                }
            }
        }
        [DataMember(Name="WorkContract")]
        protected IList<WorkContract> workContract = new List<WorkContract>();
        public virtual List<WorkContract> WorkContract
        {
            get
            {
                if (workContract is WorkContract[])
                {
                    workContract = workContract.ToList();
                }
                if (workContract == null)
                {
                    workContract = new List<WorkContract>();
                }
                return workContract.ToList();
            }
            set
            {
                if (workContract is WorkContract[])
                {
                    workContract = workContract.ToList();
                }
                if (workContract != null)
                {
                    var __itemsToDelete = new List<WorkContract>(workContract);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveWorkContract(__item);
                    }
                }
                if(value == null)
                {
                    workContract = new List<WorkContract>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddWorkContract(__item);
                }
            }
        }
        public virtual void AddWorkContract(IList<WorkContract> __items)
        {
            foreach (var __item in __items)
            {
                AddWorkContract(__item);
            }
        }

        public virtual void InternalAddWorkContract(WorkContract __item)
        {
            if (__item == null || disableInternalAdditions) return;
            workContract?.Add(__item);
        }

        public virtual void InternalRemoveWorkContract(WorkContract __item)
        {
            if (__item == null) return;
            workContract?.Remove(__item);
        }

        public virtual void AddWorkContract(WorkContract __item)
        {
            if (__item == null) return;
            if (__item.RegionalAgent != this)
                __item.RegionalAgent = this;
        }

        public virtual void AddAtIndexWorkContract(int index, WorkContract __item)
        {
            if (__item == null) return;
            workContract?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.RegionalAgent != this)
                    __item.RegionalAgent = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveWorkContract(WorkContract __item)
        {
            if (__item != null)
            {
                __item.RegionalAgent = null;
            }
        }
        public virtual void SetWorkContractAt(WorkContract __item, int __index)
        {
            if (__item == null)
            {
                workContract[__index].RegionalAgent = null;
            }
            else
            {
                workContract[__index] = __item;
                if (__item.RegionalAgent != this)
                    __item.RegionalAgent = this;
            }
        }

        public virtual void ClearWorkContract()
        {
            if (workContract!=null)
            {
                var __itemsToRemove = workContract.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveWorkContract(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the RegionalAgent class
/// </summary>
/// <returns>New RegionalAgent object</returns>
/// <remarks></remarks>
        public RegionalAgent() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (AgencyCode != null && AgencyCode.Length > 40)
            {
                __errors.Add("Length of property 'AgencyCode' cannot be greater than 40.");
            }
            if (AgencyDescription != null && AgencyDescription.Length > 200)
            {
                __errors.Add("Length of property 'AgencyDescription' cannot be greater than 200.");
            }
            if (AgencyAddress != null && AgencyAddress.Length > 500)
            {
                __errors.Add("Length of property 'AgencyAddress' cannot be greater than 500.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'RegionalAgent' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AgencyCode?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AgencyDescription?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AgencyAddress?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (IsSelected.GetHashCode() );
            hashCode = hashCode * -1521134295 + (Rating?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [RegionalAgent] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual RegionalAgent Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, RegionalAgent copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (RegionalAgent)copiedObjects[this];
            copy = copy ?? new RegionalAgent();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.AgencyCode = this.AgencyCode;
            copy.AgencyDescription = this.AgencyDescription;
            copy.AgencyAddress = this.AgencyAddress;
            copy.IsSelected = this.IsSelected;
            copy.Rating = this.Rating;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.warehousesSupport = new List<Warehouse>();
            if(deep && this.warehousesSupport != null)
            {
                foreach (var __item in this.warehousesSupport)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddWarehousesSupport(__item);
                        else
                            copy.AddWarehousesSupport(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddWarehousesSupport((Warehouse)copiedObjects[__item]);
                    }
                }
            }
            copy.rAUsers = new List<RegionalAgentUser>();
            if(deep && this.rAUsers != null)
            {
                foreach (var __item in this.rAUsers)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddRAUsers(__item);
                        else
                            copy.AddRAUsers(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddRAUsers((RegionalAgentUser)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.addressCoordinates != null)
            {
                if (!copiedObjects.Contains(this.addressCoordinates))
                {
                    if (asNew && reuseNestedObjects)
                        copy.AddressCoordinates = this.AddressCoordinates;
                    else if (asNew)
                        copy.AddressCoordinates = this.AddressCoordinates.Copy(deep, copiedObjects, true);
                    else
                        copy.addressCoordinates = this.addressCoordinates.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.AddressCoordinates = (GeoCoordinates)copiedObjects[this.AddressCoordinates];
                    else
                        copy.addressCoordinates = (GeoCoordinates)copiedObjects[this.AddressCoordinates];
                }
            }
            copy.areaSupport = new List<GeoArea>();
            if(deep && this.areaSupport != null)
            {
                foreach (var __item in this.areaSupport)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAreaSupport(__item);
                        else
                            copy.AddAreaSupport(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAreaSupport((GeoArea)copiedObjects[__item]);
                    }
                }
            }
            copy.trucks = new List<Truck>();
            if(deep && this.trucks != null)
            {
                foreach (var __item in this.trucks)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddTrucks(__item);
                        else
                            copy.AddTrucks(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddTrucks((Truck)copiedObjects[__item]);
                    }
                }
            }
            copy.scheduledRouteTemplates = new List<ScheduledRouteTemplate>();
            if(deep && this.scheduledRouteTemplates != null)
            {
                foreach (var __item in this.scheduledRouteTemplates)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddScheduledRouteTemplates(__item);
                        else
                            copy.AddScheduledRouteTemplates(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddScheduledRouteTemplates((ScheduledRouteTemplate)copiedObjects[__item]);
                    }
                }
            }
            copy.workContract = new List<WorkContract>();
            if(deep && this.workContract != null)
            {
                foreach (var __item in this.workContract)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddWorkContract(__item);
                        else
                            copy.AddWorkContract(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddWorkContract((WorkContract)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as RegionalAgent;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(RegionalAgent x, RegionalAgent y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(RegionalAgent x, RegionalAgent y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(RegionalAgent compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
