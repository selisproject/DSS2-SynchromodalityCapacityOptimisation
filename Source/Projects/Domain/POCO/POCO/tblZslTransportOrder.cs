// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The tblZslTransportOrder class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class tblZslTransportOrder : IDomainModelClass
    {
        #region tblZslTransportOrder's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="TransportOrderNo")]
        protected string transportOrderNo;
        [DataMember(Name="OrderYear")]
        protected int? orderYear;
        [DataMember(Name="DocumentTransportNo")]
        protected string documentTransportNo;
        [DataMember(Name="OrderDate")]
        protected DateTime? orderDate;
        [DataMember(Name="DepartureCustomerName")]
        protected string departureCustomerName;
        [DataMember(Name="DepartureAddress")]
        protected string departureAddress;
        [DataMember(Name="DepartureCity")]
        protected string departureCity;
        [DataMember(Name="DepartureState")]
        protected string departureState;
        [DataMember(Name="DestinationName")]
        protected string destinationName;
        [DataMember(Name="DestinationAddress")]
        protected string destinationAddress;
        [DataMember(Name="DestinationCity")]
        protected string destinationCity;
        [DataMember(Name="DestinationState")]
        protected string destinationState;
        [DataMember(Name="Qty")]
        protected int? qty;
        [DataMember(Name="OrderWeight")]
        protected decimal? orderWeight;
        [DataMember(Name="Volume")]
        protected decimal? volume;
        [DataMember(Name="Pallet")]
        protected int? pallet;
        [DataMember(Name="RetiredDate")]
        protected DateTime? retiredDate;
        [DataMember(Name="DeliveryDate")]
        protected DateTime? deliveryDate;
        [DataMember(Name="Note")]
        protected string note;
        [DataMember(Name="CallCustomerBefore")]
        protected string callCustomerBefore;
        [DataMember(Name="Telephone")]
        protected string telephone;
        [DataMember(Name="DayClosed")]
        protected string dayClosed;
        [DataMember(Name="Urgent")]
        protected string urgent;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

        #endregion
        #region tblZslTransportOrder's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The TransportOrderNo property
///
/// </summary>
///
        public virtual string TransportOrderNo
        {
            get
            {
                return transportOrderNo;
            }
            set
            {
                transportOrderNo = value;
            }
        }
/// <summary>
/// The OrderYear property
///
/// </summary>
///
        public virtual int? OrderYear
        {
            get
            {
                return orderYear;
            }
            set
            {
                orderYear = value;
            }
        }
/// <summary>
/// The DocumentTransportNo property
///
/// </summary>
///
        public virtual string DocumentTransportNo
        {
            get
            {
                return documentTransportNo;
            }
            set
            {
                documentTransportNo = value;
            }
        }
/// <summary>
/// The OrderDate property
///
/// </summary>
///
        public virtual DateTime? OrderDate
        {
            get
            {
                return orderDate;
            }
            set
            {
                orderDate = value;
            }
        }
/// <summary>
/// The DepartureCustomerName property
///
/// </summary>
///
        public virtual string DepartureCustomerName
        {
            get
            {
                return departureCustomerName;
            }
            set
            {
                departureCustomerName = value;
            }
        }
/// <summary>
/// The DepartureAddress property
///
/// </summary>
///
        public virtual string DepartureAddress
        {
            get
            {
                return departureAddress;
            }
            set
            {
                departureAddress = value;
            }
        }
/// <summary>
/// The DepartureCity property
///
/// </summary>
///
        public virtual string DepartureCity
        {
            get
            {
                return departureCity;
            }
            set
            {
                departureCity = value;
            }
        }
/// <summary>
/// The DepartureState property
///
/// </summary>
///
        public virtual string DepartureState
        {
            get
            {
                return departureState;
            }
            set
            {
                departureState = value;
            }
        }
/// <summary>
/// The DestinationName property
///
/// </summary>
///
        public virtual string DestinationName
        {
            get
            {
                return destinationName;
            }
            set
            {
                destinationName = value;
            }
        }
/// <summary>
/// The DestinationAddress property
///
/// </summary>
///
        public virtual string DestinationAddress
        {
            get
            {
                return destinationAddress;
            }
            set
            {
                destinationAddress = value;
            }
        }
/// <summary>
/// The DestinationCity property
///
/// </summary>
///
        public virtual string DestinationCity
        {
            get
            {
                return destinationCity;
            }
            set
            {
                destinationCity = value;
            }
        }
/// <summary>
/// The DestinationState property
///
/// </summary>
///
        public virtual string DestinationState
        {
            get
            {
                return destinationState;
            }
            set
            {
                destinationState = value;
            }
        }
/// <summary>
/// The Qty property
///
/// </summary>
///
        public virtual int? Qty
        {
            get
            {
                return qty;
            }
            set
            {
                qty = value;
            }
        }
/// <summary>
/// The OrderWeight property
///
/// </summary>
///
        public virtual decimal? OrderWeight
        {
            get
            {
                return orderWeight;
            }
            set
            {
                orderWeight = value;
            }
        }
/// <summary>
/// The Volume property
///
/// </summary>
///
        public virtual decimal? Volume
        {
            get
            {
                return volume;
            }
            set
            {
                volume = value;
            }
        }
/// <summary>
/// The Pallet property
///
/// </summary>
///
        public virtual int? Pallet
        {
            get
            {
                return pallet;
            }
            set
            {
                pallet = value;
            }
        }
/// <summary>
/// The RetiredDate property
///
/// </summary>
///
        public virtual DateTime? RetiredDate
        {
            get
            {
                return retiredDate;
            }
            set
            {
                retiredDate = value;
            }
        }
/// <summary>
/// The DeliveryDate property
///
/// </summary>
///
        public virtual DateTime? DeliveryDate
        {
            get
            {
                return deliveryDate;
            }
            set
            {
                deliveryDate = value;
            }
        }
/// <summary>
/// The Note property
///
/// </summary>
///
        public virtual string Note
        {
            get
            {
                return note;
            }
            set
            {
                note = value;
            }
        }
/// <summary>
/// The CallCustomerBefore property
///
/// </summary>
///
        public virtual string CallCustomerBefore
        {
            get
            {
                return callCustomerBefore;
            }
            set
            {
                callCustomerBefore = value;
            }
        }
/// <summary>
/// The Telephone property
///
/// </summary>
///
        public virtual string Telephone
        {
            get
            {
                return telephone;
            }
            set
            {
                telephone = value;
            }
        }
/// <summary>
/// The DayClosed property
///
/// </summary>
///
        public virtual string DayClosed
        {
            get
            {
                return dayClosed;
            }
            set
            {
                dayClosed = value;
            }
        }
/// <summary>
/// The Urgent property
///
/// </summary>
///
        public virtual string Urgent
        {
            get
            {
                return urgent;
            }
            set
            {
                urgent = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region tblZslTransportOrder's Participant Properties
        [DataMember(Name="TransportOrder")]
        protected tblZslTransportOrder transportOrder;
        public virtual tblZslTransportOrder TransportOrder
        {
            get
            {
                return transportOrder;
            }
            set
            {
                if(Equals(transportOrder, value)) return;
                var __oldValue = transportOrder;
                if (value != null)
                {
                    transportOrder = value;
                }
                else
                {
                    if (transportOrder != null)
                    {
                        transportOrder = null;
                    }
                }
            }
        }
        [DataMember(Name="tblZslCustomer")]
        protected tblZslCustomer _tblZslCustomer;
        public virtual tblZslCustomer tblZslCustomer
        {
            get
            {
                return _tblZslCustomer;
            }
            set
            {
                if(Equals(_tblZslCustomer, value)) return;
                var __oldValue = _tblZslCustomer;
                if (value != null)
                {
                    _tblZslCustomer = value;
                }
                else
                {
                    if (_tblZslCustomer != null)
                    {
                        _tblZslCustomer = null;
                    }
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the tblZslTransportOrder class
/// </summary>
/// <returns>New tblZslTransportOrder object</returns>
/// <remarks></remarks>
        public tblZslTransportOrder() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (TransportOrderNo != null && TransportOrderNo.Length > 100)
            {
                __errors.Add("Length of property 'TransportOrderNo' cannot be greater than 100.");
            }
            if (DocumentTransportNo != null && DocumentTransportNo.Length > 100)
            {
                __errors.Add("Length of property 'DocumentTransportNo' cannot be greater than 100.");
            }
            if (DepartureCustomerName != null && DepartureCustomerName.Length > 100)
            {
                __errors.Add("Length of property 'DepartureCustomerName' cannot be greater than 100.");
            }
            if (DepartureAddress != null && DepartureAddress.Length > 100)
            {
                __errors.Add("Length of property 'DepartureAddress' cannot be greater than 100.");
            }
            if (DepartureCity != null && DepartureCity.Length > 100)
            {
                __errors.Add("Length of property 'DepartureCity' cannot be greater than 100.");
            }
            if (DepartureState != null && DepartureState.Length > 100)
            {
                __errors.Add("Length of property 'DepartureState' cannot be greater than 100.");
            }
            if (DestinationName != null && DestinationName.Length > 100)
            {
                __errors.Add("Length of property 'DestinationName' cannot be greater than 100.");
            }
            if (DestinationAddress != null && DestinationAddress.Length > 100)
            {
                __errors.Add("Length of property 'DestinationAddress' cannot be greater than 100.");
            }
            if (DestinationCity != null && DestinationCity.Length > 100)
            {
                __errors.Add("Length of property 'DestinationCity' cannot be greater than 100.");
            }
            if (DestinationState != null && DestinationState.Length > 100)
            {
                __errors.Add("Length of property 'DestinationState' cannot be greater than 100.");
            }
            if (Note != null && Note.Length > 100)
            {
                __errors.Add("Length of property 'Note' cannot be greater than 100.");
            }
            if (CallCustomerBefore != null && CallCustomerBefore.Length > 100)
            {
                __errors.Add("Length of property 'CallCustomerBefore' cannot be greater than 100.");
            }
            if (Telephone != null && Telephone.Length > 100)
            {
                __errors.Add("Length of property 'Telephone' cannot be greater than 100.");
            }
            if (DayClosed != null && DayClosed.Length > 100)
            {
                __errors.Add("Length of property 'DayClosed' cannot be greater than 100.");
            }
            if (Urgent != null && Urgent.Length > 100)
            {
                __errors.Add("Length of property 'Urgent' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'tblZslTransportOrder' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TransportOrderNo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderYear?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DocumentTransportNo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DepartureCustomerName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DepartureAddress?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DepartureCity?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DepartureState?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DestinationName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DestinationAddress?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DestinationCity?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DestinationState?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Qty?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderWeight?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Volume?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Pallet?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RetiredDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DeliveryDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Note?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CallCustomerBefore?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Telephone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DayClosed?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Urgent?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [tblZslTransportOrder] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual tblZslTransportOrder Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, tblZslTransportOrder copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (tblZslTransportOrder)copiedObjects[this];
            copy = copy ?? new tblZslTransportOrder();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.TransportOrderNo = this.TransportOrderNo;
            copy.OrderYear = this.OrderYear;
            copy.DocumentTransportNo = this.DocumentTransportNo;
            copy.OrderDate = this.OrderDate;
            copy.DepartureCustomerName = this.DepartureCustomerName;
            copy.DepartureAddress = this.DepartureAddress;
            copy.DepartureCity = this.DepartureCity;
            copy.DepartureState = this.DepartureState;
            copy.DestinationName = this.DestinationName;
            copy.DestinationAddress = this.DestinationAddress;
            copy.DestinationCity = this.DestinationCity;
            copy.DestinationState = this.DestinationState;
            copy.Qty = this.Qty;
            copy.OrderWeight = this.OrderWeight;
            copy.Volume = this.Volume;
            copy.Pallet = this.Pallet;
            copy.RetiredDate = this.RetiredDate;
            copy.DeliveryDate = this.DeliveryDate;
            copy.Note = this.Note;
            copy.CallCustomerBefore = this.CallCustomerBefore;
            copy.Telephone = this.Telephone;
            copy.DayClosed = this.DayClosed;
            copy.Urgent = this.Urgent;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.transportOrder != null)
            {
                if (!copiedObjects.Contains(this.transportOrder))
                {
                    if (asNew && reuseNestedObjects)
                        copy.TransportOrder = this.TransportOrder;
                    else if (asNew)
                        copy.TransportOrder = this.TransportOrder.Copy(deep, copiedObjects, true);
                    else
                        copy.transportOrder = this.transportOrder.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.TransportOrder = (tblZslTransportOrder)copiedObjects[this.TransportOrder];
                    else
                        copy.transportOrder = (tblZslTransportOrder)copiedObjects[this.TransportOrder];
                }
            }
            if(deep && this._tblZslCustomer != null)
            {
                if (!copiedObjects.Contains(this._tblZslCustomer))
                {
                    if (asNew && reuseNestedObjects)
                        copy.tblZslCustomer = this.tblZslCustomer;
                    else if (asNew)
                        copy.tblZslCustomer = this.tblZslCustomer.Copy(deep, copiedObjects, true);
                    else
                        copy._tblZslCustomer = this._tblZslCustomer.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.tblZslCustomer = (tblZslCustomer)copiedObjects[this.tblZslCustomer];
                    else
                        copy._tblZslCustomer = (tblZslCustomer)copiedObjects[this.tblZslCustomer];
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as tblZslTransportOrder;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(tblZslTransportOrder x, tblZslTransportOrder y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(tblZslTransportOrder x, tblZslTransportOrder y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(tblZslTransportOrder compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
