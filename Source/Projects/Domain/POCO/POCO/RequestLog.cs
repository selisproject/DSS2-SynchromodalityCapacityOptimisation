// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The RequestLog class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class RequestLog : IDomainModelClass
    {
        #region RequestLog's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="RequestPath")]
        protected string requestPath;
        [DataMember(Name="Message")]
        protected string message;
        [DataMember(Name="RequestId")]
        protected string requestId;
        [DataMember(Name="RequestMethod")]
        protected string requestMethod;
        [DataMember(Name="ElapsedMsecs")]
        protected double? elapsedMsecs;
        [DataMember(Name="IP")]
        protected string iP;
        [DataMember(Name="Service")]
        protected string service;
        [DataMember(Name="Operation")]
        protected string operation;
        [DataMember(Name="StatusCode")]
        protected string statusCode;
        [DataMember(Name="Timestamp")]
        protected string timestamp;
        [DataMember(Name="Username")]
        protected string username;
        [DataMember(Name="RequestUri")]
        protected string requestUri;
        [DataMember(Name="ClientId")]
        protected string clientId;
        [DataMember(Name="ClientName")]
        protected string clientName;
        [DataMember(Name="ProductName")]
        protected string productName;
        [DataMember(Name="RequestLogKey")]
        protected int? requestLogKey = 0;
        #endregion
        #region RequestLog's Properties
/// <summary>
/// The RequestPath property
///
/// </summary>
///
        public virtual string RequestPath
        {
            get
            {
                return requestPath;
            }
            set
            {
                requestPath = value;
            }
        }
/// <summary>
/// The Message property
///
/// </summary>
///
        public virtual string Message
        {
            get
            {
                return message;
            }
            set
            {
                message = value;
            }
        }
/// <summary>
/// The RequestId property
///
/// </summary>
///
        public virtual string RequestId
        {
            get
            {
                return requestId;
            }
            set
            {
                requestId = value;
            }
        }
/// <summary>
/// The RequestMethod property
///
/// </summary>
///
        public virtual string RequestMethod
        {
            get
            {
                return requestMethod;
            }
            set
            {
                requestMethod = value;
            }
        }
/// <summary>
/// The ElapsedMsecs property
///
/// </summary>
///
        public virtual double? ElapsedMsecs
        {
            get
            {
                return elapsedMsecs;
            }
            set
            {
                elapsedMsecs = value;
            }
        }
/// <summary>
/// The IP property
///
/// </summary>
///
        public virtual string IP
        {
            get
            {
                return iP;
            }
            set
            {
                iP = value;
            }
        }
/// <summary>
/// The Service property
///
/// </summary>
///
        public virtual string Service
        {
            get
            {
                return service;
            }
            set
            {
                service = value;
            }
        }
/// <summary>
/// The Operation property
///
/// </summary>
///
        public virtual string Operation
        {
            get
            {
                return operation;
            }
            set
            {
                operation = value;
            }
        }
/// <summary>
/// The StatusCode property
///
/// </summary>
///
        public virtual string StatusCode
        {
            get
            {
                return statusCode;
            }
            set
            {
                statusCode = value;
            }
        }
/// <summary>
/// The Timestamp property
///
/// </summary>
///
        public virtual string Timestamp
        {
            get
            {
                return timestamp;
            }
            set
            {
                timestamp = value;
            }
        }
/// <summary>
/// The Username property
///
/// </summary>
///
        public virtual string Username
        {
            get
            {
                return username;
            }
            set
            {
                username = value;
            }
        }
/// <summary>
/// The RequestUri property
///
/// </summary>
///
        public virtual string RequestUri
        {
            get
            {
                return requestUri;
            }
            set
            {
                requestUri = value;
            }
        }
/// <summary>
/// The ClientId property
///
/// </summary>
///
        public virtual string ClientId
        {
            get
            {
                return clientId;
            }
            set
            {
                clientId = value;
            }
        }
/// <summary>
/// The ClientName property
///
/// </summary>
///
        public virtual string ClientName
        {
            get
            {
                return clientName;
            }
            set
            {
                clientName = value;
            }
        }
/// <summary>
/// The ProductName property
///
/// </summary>
///
        public virtual string ProductName
        {
            get
            {
                return productName;
            }
            set
            {
                productName = value;
            }
        }
/// <summary>
/// The RequestLogKey property
///
/// </summary>
///
        [Key]
        public virtual int? RequestLogKey
        {
            get
            {
                return requestLogKey;
            }
            set
            {
                requestLogKey = value;
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the RequestLog class
/// </summary>
/// <returns>New RequestLog object</returns>
/// <remarks></remarks>
        public RequestLog() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (RequestPath != null && RequestPath.Length > 100)
            {
                __errors.Add("Length of property 'RequestPath' cannot be greater than 100.");
            }
            if (Message != null && Message.Length > 100)
            {
                __errors.Add("Length of property 'Message' cannot be greater than 100.");
            }
            if (RequestId != null && RequestId.Length > 100)
            {
                __errors.Add("Length of property 'RequestId' cannot be greater than 100.");
            }
            if (RequestMethod != null && RequestMethod.Length > 100)
            {
                __errors.Add("Length of property 'RequestMethod' cannot be greater than 100.");
            }
            if (IP != null && IP.Length > 100)
            {
                __errors.Add("Length of property 'IP' cannot be greater than 100.");
            }
            if (Service != null && Service.Length > 100)
            {
                __errors.Add("Length of property 'Service' cannot be greater than 100.");
            }
            if (Operation != null && Operation.Length > 100)
            {
                __errors.Add("Length of property 'Operation' cannot be greater than 100.");
            }
            if (StatusCode != null && StatusCode.Length > 100)
            {
                __errors.Add("Length of property 'StatusCode' cannot be greater than 100.");
            }
            if (Timestamp != null && Timestamp.Length > 100)
            {
                __errors.Add("Length of property 'Timestamp' cannot be greater than 100.");
            }
            if (Username != null && Username.Length > 100)
            {
                __errors.Add("Length of property 'Username' cannot be greater than 100.");
            }
            if (RequestUri != null && RequestUri.Length > 100)
            {
                __errors.Add("Length of property 'RequestUri' cannot be greater than 100.");
            }
            if (ClientId != null && ClientId.Length > 100)
            {
                __errors.Add("Length of property 'ClientId' cannot be greater than 100.");
            }
            if (ClientName != null && ClientName.Length > 100)
            {
                __errors.Add("Length of property 'ClientName' cannot be greater than 100.");
            }
            if (ProductName != null && ProductName.Length > 100)
            {
                __errors.Add("Length of property 'ProductName' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'RequestLog' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (RequestPath?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Message?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RequestId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RequestMethod?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ElapsedMsecs?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (IP?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Service?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Operation?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (StatusCode?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Timestamp?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Username?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RequestUri?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ClientId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ClientName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ProductName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RequestLogKey?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [RequestLog] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual RequestLog Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, RequestLog copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (RequestLog)copiedObjects[this];
            copy = copy ?? new RequestLog();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.RequestLogKey = this.RequestLogKey;
            }
            copy.RequestPath = this.RequestPath;
            copy.Message = this.Message;
            copy.RequestId = this.RequestId;
            copy.RequestMethod = this.RequestMethod;
            copy.ElapsedMsecs = this.ElapsedMsecs;
            copy.IP = this.IP;
            copy.Service = this.Service;
            copy.Operation = this.Operation;
            copy.StatusCode = this.StatusCode;
            copy.Timestamp = this.Timestamp;
            copy.Username = this.Username;
            copy.RequestUri = this.RequestUri;
            copy.ClientId = this.ClientId;
            copy.ClientName = this.ClientName;
            copy.ProductName = this.ProductName;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as RequestLog;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(RequestLog x, RequestLog y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(RequestLog x, RequestLog y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("RequestLogKey");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.RequestLogKey.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.RequestLogKey == default(int) || this.RequestLogKey.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(RequestLog compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.RequestLogKey.Equals(compareTo.RequestLogKey);
        }

        #endregion


    }
}
