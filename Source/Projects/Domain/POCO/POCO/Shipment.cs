// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The Shipment class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Shipment : IDomainModelClass
    {
        #region Shipment's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="Owner")]
        protected string owner;
        [DataMember(Name="DepartureTime")]
        protected DateTime? departureTime;
        [DataMember(Name="CurrentStatus")]
        protected string currentStatus;
        [DataMember(Name="Temperature")]
        protected string temperature;
        [DataMember(Name="LoadPercentage")]
        protected int? loadPercentage;
        [DataMember(Name="TotalVolume")]
        protected decimal? totalVolume;
        [DataMember(Name="AverageVolume")]
        protected decimal? averageVolume;
        [DataMember(Name="MaxTravelTime")]
        protected int? maxTravelTime;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Shipment's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The Owner property
///
/// </summary>
///
        public virtual string Owner
        {
            get
            {
                return owner;
            }
            set
            {
                owner = value;
            }
        }
/// <summary>
/// The DepartureTime property
///
/// </summary>
///
        public virtual DateTime? DepartureTime
        {
            get
            {
                return departureTime;
            }
            set
            {
                departureTime = value;
            }
        }
/// <summary>
/// The CurrentStatus property
///
/// </summary>
///
        public virtual string CurrentStatus
        {
            get
            {
                var __valToGet = Get_CurrentStatus();
                return __valToGet;
            }
            set
            {
                currentStatus = value;
            }
        }
/// <summary>
/// The Temperature property
///
/// </summary>
///
        public virtual string Temperature
        {
            get
            {
                return temperature;
            }
            set
            {
                temperature = value;
            }
        }
/// <summary>
/// The LoadPercentage property
///
/// </summary>
///
        public virtual int? LoadPercentage
        {
            get
            {
                return loadPercentage;
            }
            set
            {
                loadPercentage = value;
            }
        }
/// <summary>
/// The TotalVolume property
///
/// </summary>
///
        public virtual decimal? TotalVolume
        {
            get
            {
                return totalVolume;
            }
            set
            {
                totalVolume = value;
            }
        }
/// <summary>
/// The AverageVolume property
///
/// </summary>
///
        public virtual decimal? AverageVolume
        {
            get
            {
                return averageVolume;
            }
            set
            {
                averageVolume = value;
            }
        }
/// <summary>
/// The MaxTravelTime property
///
/// </summary>
///
        public virtual int? MaxTravelTime
        {
            get
            {
                return maxTravelTime;
            }
            set
            {
                maxTravelTime = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Shipment's Participant Properties
        [DataMember(Name="ShippingOrders")]
        protected IList<ShippingOrder> shippingOrders = new List<ShippingOrder>();
        public virtual List<ShippingOrder> ShippingOrders
        {
            get
            {
                if (shippingOrders is ShippingOrder[])
                {
                    shippingOrders = shippingOrders.ToList();
                }
                if (shippingOrders == null)
                {
                    shippingOrders = new List<ShippingOrder>();
                }
                return shippingOrders.ToList();
            }
            set
            {
                if (shippingOrders is ShippingOrder[])
                {
                    shippingOrders = shippingOrders.ToList();
                }
                if (shippingOrders != null)
                {
                    var __itemsToDelete = new List<ShippingOrder>(shippingOrders);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveShippingOrders(__item);
                    }
                }
                if(value == null)
                {
                    shippingOrders = new List<ShippingOrder>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddShippingOrders(__item);
                }
            }
        }
        public virtual void AddShippingOrders(IList<ShippingOrder> __items)
        {
            foreach (var __item in __items)
            {
                AddShippingOrders(__item);
            }
        }

        public virtual void InternalAddShippingOrders(ShippingOrder __item)
        {
            if (__item == null || disableInternalAdditions) return;
            shippingOrders?.Add(__item);
        }

        public virtual void InternalRemoveShippingOrders(ShippingOrder __item)
        {
            if (__item == null) return;
            shippingOrders?.Remove(__item);
        }

        public virtual void AddShippingOrders(ShippingOrder __item)
        {
            if (__item == null) return;
            if (!shippingOrders.Contains(__item))
                InternalAddShippingOrders(__item);
            if (!__item.Shipment.Contains(this))
                __item.AddShipment(this);
        }

        public virtual void AddAtIndexShippingOrders(int index, ShippingOrder __item)
        {
            if (__item == null) return;
            if (!shippingOrders.Contains(__item))
                shippingOrders.Insert(index, __item);
            if (!__item.Shipment.Contains(this))
                __item.AddShipment(this);
        }

        public virtual void RemoveShippingOrders(ShippingOrder __item)
        {
            if (__item != null)
            {
                if (shippingOrders.Contains(__item))
                    InternalRemoveShippingOrders(__item);
                if(__item.Shipment.Contains(this))
                    __item.RemoveShipment(this);
            }
        }
        public virtual void SetShippingOrdersAt(ShippingOrder __item, int __index)
        {
            if (__item == null)
            {
                shippingOrders[__index].RemoveShipment(this);
            }
            else
            {
                shippingOrders[__index] = __item;
                if (!__item.Shipment.Contains(this))
                    __item.AddShipment(this);
            }
        }

        public virtual void ClearShippingOrders()
        {
            if (shippingOrders!=null)
            {
                var __itemsToRemove = shippingOrders.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveShippingOrders(__item);
                }
            }
        }
        [DataMember(Name="ShipmentStatus")]
        protected IList<ShipmentStatus> shipmentStatus = new List<ShipmentStatus>();
        public virtual List<ShipmentStatus> ShipmentStatus
        {
            get
            {
                if (shipmentStatus is ShipmentStatus[])
                {
                    shipmentStatus = shipmentStatus.ToList();
                }
                if (shipmentStatus == null)
                {
                    shipmentStatus = new List<ShipmentStatus>();
                }
                return shipmentStatus.ToList();
            }
            set
            {
                if (shipmentStatus is ShipmentStatus[])
                {
                    shipmentStatus = shipmentStatus.ToList();
                }
                if (shipmentStatus != null)
                {
                    var __itemsToDelete = new List<ShipmentStatus>(shipmentStatus);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveShipmentStatus(__item);
                    }
                }
                if(value == null)
                {
                    shipmentStatus = new List<ShipmentStatus>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddShipmentStatus(__item);
                }
            }
        }
        public virtual void AddShipmentStatus(IList<ShipmentStatus> __items)
        {
            foreach (var __item in __items)
            {
                AddShipmentStatus(__item);
            }
        }

        public virtual void InternalAddShipmentStatus(ShipmentStatus __item)
        {
            if (__item == null || disableInternalAdditions) return;
            shipmentStatus?.Add(__item);
        }

        public virtual void InternalRemoveShipmentStatus(ShipmentStatus __item)
        {
            if (__item == null) return;
            shipmentStatus?.Remove(__item);
        }

        public virtual void AddShipmentStatus(ShipmentStatus __item)
        {
            if (__item == null) return;
            InternalAddShipmentStatus(__item);
        }

        public virtual void AddAtIndexShipmentStatus(int index, ShipmentStatus __item)
        {
            if (__item == null) return;
            shipmentStatus?.Insert(index, __item);
        }

        public virtual void RemoveShipmentStatus(ShipmentStatus __item)
        {
            if (__item != null)
            {
                InternalRemoveShipmentStatus(__item);
            }
        }
        public virtual void SetShipmentStatusAt(ShipmentStatus __item, int __index)
        {
            if (__item == null)
            {
                shipmentStatus[__index] = null;
            }
            else
            {
                shipmentStatus[__index] = __item;
            }
        }

        public virtual void ClearShipmentStatus()
        {
            if (shipmentStatus!=null)
            {
                var __itemsToRemove = shipmentStatus.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveShipmentStatus(__item);
                }
            }
        }
        [DataMember(Name="DeparturePoint")]
        protected Location departurePoint;
        public virtual Location DeparturePoint
        {
            get
            {
                return departurePoint;
            }
            set
            {
                if(Equals(departurePoint, value)) return;
                var __oldValue = departurePoint;
                if (value != null)
                {
                    departurePoint = value;
                }
                else
                {
                    if (departurePoint != null)
                    {
                        departurePoint = null;
                    }
                }
            }
        }
        [DataMember(Name="FinalDestination")]
        protected Location finalDestination;
        public virtual Location FinalDestination
        {
            get
            {
                return finalDestination;
            }
            set
            {
                if(Equals(finalDestination, value)) return;
                var __oldValue = finalDestination;
                if (value != null)
                {
                    finalDestination = value;
                }
                else
                {
                    if (finalDestination != null)
                    {
                        finalDestination = null;
                    }
                }
            }
        }
        [DataMember(Name="Driver")]
        protected Driver driver;
        public virtual Driver Driver
        {
            get
            {
                return driver;
            }
            set
            {
                if(Equals(driver, value)) return;
                var __oldValue = driver;
                if (value != null)
                {
                    driver = value;
                }
                else
                {
                    if (driver != null)
                    {
                        driver = null;
                    }
                }
            }
        }
        [DataMember(Name="OccupiedVolume")]
        protected CustomVolume occupiedVolume;
        public virtual CustomVolume OccupiedVolume
        {
            get
            {
                return occupiedVolume;
            }
            set
            {
                if(Equals(occupiedVolume, value)) return;
                var __oldValue = occupiedVolume;
                if (value != null)
                {
                    occupiedVolume = value;
                }
                else
                {
                    if (occupiedVolume != null)
                    {
                        occupiedVolume = null;
                    }
                }
            }
        }
        [DataMember(Name="AcceptedConditions")]
        protected IList<Condition> acceptedConditions = new List<Condition>();
        public virtual List<Condition> AcceptedConditions
        {
            get
            {
                if (acceptedConditions is Condition[])
                {
                    acceptedConditions = acceptedConditions.ToList();
                }
                if (acceptedConditions == null)
                {
                    acceptedConditions = new List<Condition>();
                }
                return acceptedConditions.ToList();
            }
            set
            {
                if (acceptedConditions is Condition[])
                {
                    acceptedConditions = acceptedConditions.ToList();
                }
                if (acceptedConditions != null)
                {
                    var __itemsToDelete = new List<Condition>(acceptedConditions);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAcceptedConditions(__item);
                    }
                }
                if(value == null)
                {
                    acceptedConditions = new List<Condition>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAcceptedConditions(__item);
                }
            }
        }
        public virtual void AddAcceptedConditions(IList<Condition> __items)
        {
            foreach (var __item in __items)
            {
                AddAcceptedConditions(__item);
            }
        }

        public virtual void InternalAddAcceptedConditions(Condition __item)
        {
            if (__item == null || disableInternalAdditions) return;
            acceptedConditions?.Add(__item);
        }

        public virtual void InternalRemoveAcceptedConditions(Condition __item)
        {
            if (__item == null) return;
            acceptedConditions?.Remove(__item);
        }

        public virtual void AddAcceptedConditions(Condition __item)
        {
            if (__item == null) return;
            InternalAddAcceptedConditions(__item);
        }

        public virtual void AddAtIndexAcceptedConditions(int index, Condition __item)
        {
            if (__item == null) return;
            acceptedConditions?.Insert(index, __item);
        }

        public virtual void RemoveAcceptedConditions(Condition __item)
        {
            if (__item != null)
            {
                InternalRemoveAcceptedConditions(__item);
            }
        }
        public virtual void SetAcceptedConditionsAt(Condition __item, int __index)
        {
            if (__item == null)
            {
                acceptedConditions[__index] = null;
            }
            else
            {
                acceptedConditions[__index] = __item;
            }
        }

        public virtual void ClearAcceptedConditions()
        {
            if (acceptedConditions!=null)
            {
                var __itemsToRemove = acceptedConditions.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAcceptedConditions(__item);
                }
            }
        }
        [DataMember(Name="VehiculeType")]
        protected Vehicule vehiculeType;
        public virtual Vehicule VehiculeType
        {
            get
            {
                return vehiculeType;
            }
            set
            {
                if(Equals(vehiculeType, value)) return;
                var __oldValue = vehiculeType;
                if (value != null)
                {
                    vehiculeType = value;
                }
                else
                {
                    if (vehiculeType != null)
                    {
                        vehiculeType = null;
                    }
                }
            }
        }
        [DataMember(Name="Path")]
        protected IList<Point> path = new List<Point>();
        public virtual List<Point> Path
        {
            get
            {
                if (path is Point[])
                {
                    path = path.ToList();
                }
                if (path == null)
                {
                    path = new List<Point>();
                }
                return path.ToList();
            }
            set
            {
                if (path is Point[])
                {
                    path = path.ToList();
                }
                if (path != null)
                {
                    var __itemsToDelete = new List<Point>(path);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemovePath(__item);
                    }
                }
                if(value == null)
                {
                    path = new List<Point>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddPath(__item);
                }
            }
        }
        public virtual void AddPath(IList<Point> __items)
        {
            foreach (var __item in __items)
            {
                AddPath(__item);
            }
        }

        public virtual void InternalAddPath(Point __item)
        {
            if (__item == null || disableInternalAdditions) return;
            path?.Add(__item);
        }

        public virtual void InternalRemovePath(Point __item)
        {
            if (__item == null) return;
            path?.Remove(__item);
        }

        public virtual void AddPath(Point __item)
        {
            if (__item == null) return;
            InternalAddPath(__item);
        }

        public virtual void AddAtIndexPath(int index, Point __item)
        {
            if (__item == null) return;
            path?.Insert(index, __item);
        }

        public virtual void RemovePath(Point __item)
        {
            if (__item != null)
            {
                InternalRemovePath(__item);
            }
        }
        public virtual void SetPathAt(Point __item, int __index)
        {
            if (__item == null)
            {
                path[__index] = null;
            }
            else
            {
                path[__index] = __item;
            }
        }

        public virtual void ClearPath()
        {
            if (path!=null)
            {
                var __itemsToRemove = path.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemovePath(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Shipment class
/// </summary>
/// <returns>New Shipment object</returns>
/// <remarks></remarks>
        public Shipment() {}
        #endregion
        #region Accessors Implementation
        private string Get_CurrentStatus()
        {
            if ((this?.shipmentStatus?.OrderByDescending((a) => a.TimeReported).FirstOrDefault() != null && this?.shipmentStatus?.OrderByDescending((a) => a.TimeReported).FirstOrDefault()?.Status != null))
            {
                return (this?.shipmentStatus?.OrderByDescending((a) => a.TimeReported).FirstOrDefault()?.Status?.Description ?? "");
            }
            return null;
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Owner != null && Owner.Length > 100)
            {
                __errors.Add("Length of property 'Owner' cannot be greater than 100.");
            }
            if (CurrentStatus != null && CurrentStatus.Length > 100)
            {
                __errors.Add("Length of property 'CurrentStatus' cannot be greater than 100.");
            }
            if (Temperature != null && Temperature.Length > 100)
            {
                __errors.Add("Length of property 'Temperature' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Shipment' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Owner?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DepartureTime?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CurrentStatus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Temperature?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LoadPercentage?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TotalVolume?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AverageVolume?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (MaxTravelTime?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Shipment] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Shipment Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Shipment copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Shipment)copiedObjects[this];
            copy = copy ?? new Shipment();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.Owner = this.Owner;
            copy.DepartureTime = this.DepartureTime;
            copy.CurrentStatus = this.CurrentStatus;
            copy.Temperature = this.Temperature;
            copy.LoadPercentage = this.LoadPercentage;
            copy.TotalVolume = this.TotalVolume;
            copy.AverageVolume = this.AverageVolume;
            copy.MaxTravelTime = this.MaxTravelTime;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.shippingOrders = new List<ShippingOrder>();
            if(deep && this.shippingOrders != null)
            {
                foreach (var __item in this.shippingOrders)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddShippingOrders(__item);
                        else
                            copy.AddShippingOrders(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddShippingOrders((ShippingOrder)copiedObjects[__item]);
                    }
                }
            }
            copy.shipmentStatus = new List<ShipmentStatus>();
            if(deep && this.shipmentStatus != null)
            {
                foreach (var __item in this.shipmentStatus)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddShipmentStatus(__item);
                        else
                            copy.AddShipmentStatus(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddShipmentStatus((ShipmentStatus)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.departurePoint != null)
            {
                if (!copiedObjects.Contains(this.departurePoint))
                {
                    if (asNew && reuseNestedObjects)
                        copy.DeparturePoint = this.DeparturePoint;
                    else if (asNew)
                        copy.DeparturePoint = this.DeparturePoint.Copy(deep, copiedObjects, true);
                    else
                        copy.departurePoint = this.departurePoint.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.DeparturePoint = (Location)copiedObjects[this.DeparturePoint];
                    else
                        copy.departurePoint = (Location)copiedObjects[this.DeparturePoint];
                }
            }
            if(deep && this.finalDestination != null)
            {
                if (!copiedObjects.Contains(this.finalDestination))
                {
                    if (asNew && reuseNestedObjects)
                        copy.FinalDestination = this.FinalDestination;
                    else if (asNew)
                        copy.FinalDestination = this.FinalDestination.Copy(deep, copiedObjects, true);
                    else
                        copy.finalDestination = this.finalDestination.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.FinalDestination = (Location)copiedObjects[this.FinalDestination];
                    else
                        copy.finalDestination = (Location)copiedObjects[this.FinalDestination];
                }
            }
            if(deep && this.driver != null)
            {
                if (!copiedObjects.Contains(this.driver))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Driver = this.Driver;
                    else if (asNew)
                        copy.Driver = this.Driver.Copy(deep, copiedObjects, true);
                    else
                        copy.driver = this.driver.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Driver = (Driver)copiedObjects[this.Driver];
                    else
                        copy.driver = (Driver)copiedObjects[this.Driver];
                }
            }
            if(deep && this.occupiedVolume != null)
            {
                if (!copiedObjects.Contains(this.occupiedVolume))
                {
                    if (asNew && reuseNestedObjects)
                        copy.OccupiedVolume = this.OccupiedVolume;
                    else if (asNew)
                        copy.OccupiedVolume = this.OccupiedVolume.Copy(deep, copiedObjects, true);
                    else
                        copy.occupiedVolume = this.occupiedVolume.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.OccupiedVolume = (CustomVolume)copiedObjects[this.OccupiedVolume];
                    else
                        copy.occupiedVolume = (CustomVolume)copiedObjects[this.OccupiedVolume];
                }
            }
            copy.acceptedConditions = new List<Condition>();
            if(deep && this.acceptedConditions != null)
            {
                foreach (var __item in this.acceptedConditions)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAcceptedConditions(__item);
                        else
                            copy.AddAcceptedConditions(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAcceptedConditions((Condition)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.vehiculeType != null)
            {
                if (!copiedObjects.Contains(this.vehiculeType))
                {
                    if (asNew && reuseNestedObjects)
                        copy.VehiculeType = this.VehiculeType;
                    else if (asNew)
                        copy.VehiculeType = this.VehiculeType.Copy(deep, copiedObjects, true);
                    else
                        copy.vehiculeType = this.vehiculeType.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.VehiculeType = (Vehicule)copiedObjects[this.VehiculeType];
                    else
                        copy.vehiculeType = (Vehicule)copiedObjects[this.VehiculeType];
                }
            }
            copy.path = new List<Point>();
            if(deep && this.path != null)
            {
                foreach (var __item in this.path)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddPath(__item);
                        else
                            copy.AddPath(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddPath((Point)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Shipment;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Shipment x, Shipment y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Shipment x, Shipment y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Shipment compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
