// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The ShippingOrder class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class ShippingOrder : IDomainModelClass
    {
        #region ShippingOrder's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="DepartureDate")]
        protected DateTime? departureDate;
        [DataMember(Name="ArrivalDate")]
        protected DateTime? arrivalDate;
        [DataMember(Name="Shipper")]
        protected string shipper;
        [DataMember(Name="Carrier")]
        protected string carrier;
        [DataMember(Name="CurrentStatus")]
        protected string currentStatus;
        [DataMember(Name="ItemDescription")]
        protected string itemDescription;
        [DataMember(Name="Conditions")]
        protected string conditions;
        [DataMember(Name="AggregateVolume")]
        protected decimal? aggregateVolume;
        [DataMember(Name="Priority")]
        protected int? priority;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region ShippingOrder's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The DepartureDate property
///
/// </summary>
///
        public virtual DateTime? DepartureDate
        {
            get
            {
                return departureDate;
            }
            set
            {
                departureDate = value;
            }
        }
/// <summary>
/// The ArrivalDate property
///
/// </summary>
///
        public virtual DateTime? ArrivalDate
        {
            get
            {
                return arrivalDate;
            }
            set
            {
                arrivalDate = value;
            }
        }
/// <summary>
/// The Shipper property
///
/// </summary>
///
        public virtual string Shipper
        {
            get
            {
                return shipper;
            }
            set
            {
                shipper = value;
            }
        }
/// <summary>
/// The Carrier property
///
/// </summary>
///
        public virtual string Carrier
        {
            get
            {
                return carrier;
            }
            set
            {
                carrier = value;
            }
        }
/// <summary>
/// The CurrentStatus property
///
/// </summary>
///
        public virtual string CurrentStatus
        {
            get
            {
                var __valToGet = Get_CurrentStatus();
                return __valToGet;
            }
            set
            {
                currentStatus = value;
            }
        }
/// <summary>
/// The ItemDescription property
///
/// </summary>
///
        public virtual string ItemDescription
        {
            get
            {
                return itemDescription;
            }
            set
            {
                itemDescription = value;
            }
        }
/// <summary>
/// The Conditions property
///
/// </summary>
///
        public virtual string Conditions
        {
            get
            {
                return conditions;
            }
            set
            {
                conditions = value;
            }
        }
/// <summary>
/// The AggregateVolume property
///
/// </summary>
///
        public virtual decimal? AggregateVolume
        {
            get
            {
                return aggregateVolume;
            }
            set
            {
                aggregateVolume = value;
            }
        }
/// <summary>
/// The Priority property
///
/// </summary>
///
        public virtual int? Priority
        {
            get
            {
                return priority;
            }
            set
            {
                priority = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region ShippingOrder's Participant Properties
        [DataMember(Name="Shipment")]
        protected IList<Shipment> shipment = new List<Shipment>();
        public virtual List<Shipment> Shipment
        {
            get
            {
                if (shipment is Shipment[])
                {
                    shipment = shipment.ToList();
                }
                if (shipment == null)
                {
                    shipment = new List<Shipment>();
                }
                return shipment.ToList();
            }
            set
            {
                if (shipment is Shipment[])
                {
                    shipment = shipment.ToList();
                }
                if (shipment != null)
                {
                    var __itemsToDelete = new List<Shipment>(shipment);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveShipment(__item);
                    }
                }
                if(value == null)
                {
                    shipment = new List<Shipment>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddShipment(__item);
                }
            }
        }
        public virtual void AddShipment(IList<Shipment> __items)
        {
            foreach (var __item in __items)
            {
                AddShipment(__item);
            }
        }

        public virtual void InternalAddShipment(Shipment __item)
        {
            if (__item == null || disableInternalAdditions) return;
            shipment?.Add(__item);
        }

        public virtual void InternalRemoveShipment(Shipment __item)
        {
            if (__item == null) return;
            shipment?.Remove(__item);
        }

        public virtual void AddShipment(Shipment __item)
        {
            if (__item == null) return;
            if (!shipment.Contains(__item))
                InternalAddShipment(__item);
            if (!__item.ShippingOrders.Contains(this))
                __item.AddShippingOrders(this);
        }

        public virtual void AddAtIndexShipment(int index, Shipment __item)
        {
            if (__item == null) return;
            if (!shipment.Contains(__item))
                shipment.Insert(index, __item);
            if (!__item.ShippingOrders.Contains(this))
                __item.AddShippingOrders(this);
        }

        public virtual void RemoveShipment(Shipment __item)
        {
            if (__item != null)
            {
                if (shipment.Contains(__item))
                    InternalRemoveShipment(__item);
                if(__item.ShippingOrders.Contains(this))
                    __item.RemoveShippingOrders(this);
            }
        }
        public virtual void SetShipmentAt(Shipment __item, int __index)
        {
            if (__item == null)
            {
                shipment[__index].RemoveShippingOrders(this);
            }
            else
            {
                shipment[__index] = __item;
                if (!__item.ShippingOrders.Contains(this))
                    __item.AddShippingOrders(this);
            }
        }

        public virtual void ClearShipment()
        {
            if (shipment!=null)
            {
                var __itemsToRemove = shipment.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveShipment(__item);
                }
            }
        }
        [DataMember(Name="DeparturePoint")]
        protected Location departurePoint;
        public virtual Location DeparturePoint
        {
            get
            {
                return departurePoint;
            }
            set
            {
                if(Equals(departurePoint, value)) return;
                var __oldValue = departurePoint;
                departurePoint = value;
            }
        }
        [DataMember(Name="ArrivalPoint")]
        protected Location arrivalPoint;
        public virtual Location ArrivalPoint
        {
            get
            {
                return arrivalPoint;
            }
            set
            {
                if(Equals(arrivalPoint, value)) return;
                var __oldValue = arrivalPoint;
                arrivalPoint = value;
            }
        }
        [DataMember(Name="StatusEvolution")]
        protected IList<StatusEvolution> statusEvolution = new List<StatusEvolution>();
        public virtual List<StatusEvolution> StatusEvolution
        {
            get
            {
                if (statusEvolution is StatusEvolution[])
                {
                    statusEvolution = statusEvolution.ToList();
                }
                if (statusEvolution == null)
                {
                    statusEvolution = new List<StatusEvolution>();
                }
                return statusEvolution.ToList();
            }
            set
            {
                if (statusEvolution is StatusEvolution[])
                {
                    statusEvolution = statusEvolution.ToList();
                }
                if (statusEvolution != null)
                {
                    var __itemsToDelete = new List<StatusEvolution>(statusEvolution);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveStatusEvolution(__item);
                    }
                }
                if(value == null)
                {
                    statusEvolution = new List<StatusEvolution>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddStatusEvolution(__item);
                }
            }
        }
        public virtual void AddStatusEvolution(IList<StatusEvolution> __items)
        {
            foreach (var __item in __items)
            {
                AddStatusEvolution(__item);
            }
        }

        public virtual void InternalAddStatusEvolution(StatusEvolution __item)
        {
            if (__item == null || disableInternalAdditions) return;
            statusEvolution?.Add(__item);
        }

        public virtual void InternalRemoveStatusEvolution(StatusEvolution __item)
        {
            if (__item == null) return;
            statusEvolution?.Remove(__item);
        }

        public virtual void AddStatusEvolution(StatusEvolution __item)
        {
            if (__item == null) return;
            InternalAddStatusEvolution(__item);
        }

        public virtual void AddAtIndexStatusEvolution(int index, StatusEvolution __item)
        {
            if (__item == null) return;
            statusEvolution?.Insert(index, __item);
        }

        public virtual void RemoveStatusEvolution(StatusEvolution __item)
        {
            if (__item != null)
            {
                InternalRemoveStatusEvolution(__item);
            }
        }
        public virtual void SetStatusEvolutionAt(StatusEvolution __item, int __index)
        {
            if (__item == null)
            {
                statusEvolution[__index] = null;
            }
            else
            {
                statusEvolution[__index] = __item;
            }
        }

        public virtual void ClearStatusEvolution()
        {
            if (statusEvolution!=null)
            {
                var __itemsToRemove = statusEvolution.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveStatusEvolution(__item);
                }
            }
        }
        [DataMember(Name="Parent")]
        protected ShippingOrder parent;
        public virtual ShippingOrder Parent
        {
            get
            {
                return parent;
            }
            set
            {
                if(Equals(parent, value)) return;
                var __oldValue = parent;
                parent = value;
            }
        }
        [DataMember(Name="PlannedVolume")]
        protected IList<CustomVolume> plannedVolume = new List<CustomVolume>();
        public virtual List<CustomVolume> PlannedVolume
        {
            get
            {
                if (plannedVolume is CustomVolume[])
                {
                    plannedVolume = plannedVolume.ToList();
                }
                if (plannedVolume == null)
                {
                    plannedVolume = new List<CustomVolume>();
                }
                return plannedVolume.ToList();
            }
            set
            {
                if (plannedVolume is CustomVolume[])
                {
                    plannedVolume = plannedVolume.ToList();
                }
                if (plannedVolume != null)
                {
                    var __itemsToDelete = new List<CustomVolume>(plannedVolume);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemovePlannedVolume(__item);
                    }
                }
                if(value == null)
                {
                    plannedVolume = new List<CustomVolume>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddPlannedVolume(__item);
                }
            }
        }
        public virtual void AddPlannedVolume(IList<CustomVolume> __items)
        {
            foreach (var __item in __items)
            {
                AddPlannedVolume(__item);
            }
        }

        public virtual void InternalAddPlannedVolume(CustomVolume __item)
        {
            if (__item == null || disableInternalAdditions) return;
            plannedVolume?.Add(__item);
        }

        public virtual void InternalRemovePlannedVolume(CustomVolume __item)
        {
            if (__item == null) return;
            plannedVolume?.Remove(__item);
        }

        public virtual void AddPlannedVolume(CustomVolume __item)
        {
            if (__item == null) return;
            InternalAddPlannedVolume(__item);
        }

        public virtual void AddAtIndexPlannedVolume(int index, CustomVolume __item)
        {
            if (__item == null) return;
            plannedVolume?.Insert(index, __item);
        }

        public virtual void RemovePlannedVolume(CustomVolume __item)
        {
            if (__item != null)
            {
                InternalRemovePlannedVolume(__item);
            }
        }
        public virtual void SetPlannedVolumeAt(CustomVolume __item, int __index)
        {
            if (__item == null)
            {
                plannedVolume[__index] = null;
            }
            else
            {
                plannedVolume[__index] = __item;
            }
        }

        public virtual void ClearPlannedVolume()
        {
            if (plannedVolume!=null)
            {
                var __itemsToRemove = plannedVolume.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemovePlannedVolume(__item);
                }
            }
        }
        [DataMember(Name="ActualVolume")]
        protected IList<CustomVolume> actualVolume = new List<CustomVolume>();
        public virtual List<CustomVolume> ActualVolume
        {
            get
            {
                if (actualVolume is CustomVolume[])
                {
                    actualVolume = actualVolume.ToList();
                }
                if (actualVolume == null)
                {
                    actualVolume = new List<CustomVolume>();
                }
                return actualVolume.ToList();
            }
            set
            {
                if (actualVolume is CustomVolume[])
                {
                    actualVolume = actualVolume.ToList();
                }
                if (actualVolume != null)
                {
                    var __itemsToDelete = new List<CustomVolume>(actualVolume);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveActualVolume(__item);
                    }
                }
                if(value == null)
                {
                    actualVolume = new List<CustomVolume>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddActualVolume(__item);
                }
            }
        }
        public virtual void AddActualVolume(IList<CustomVolume> __items)
        {
            foreach (var __item in __items)
            {
                AddActualVolume(__item);
            }
        }

        public virtual void InternalAddActualVolume(CustomVolume __item)
        {
            if (__item == null || disableInternalAdditions) return;
            actualVolume?.Add(__item);
        }

        public virtual void InternalRemoveActualVolume(CustomVolume __item)
        {
            if (__item == null) return;
            actualVolume?.Remove(__item);
        }

        public virtual void AddActualVolume(CustomVolume __item)
        {
            if (__item == null) return;
            InternalAddActualVolume(__item);
        }

        public virtual void AddAtIndexActualVolume(int index, CustomVolume __item)
        {
            if (__item == null) return;
            actualVolume?.Insert(index, __item);
        }

        public virtual void RemoveActualVolume(CustomVolume __item)
        {
            if (__item != null)
            {
                InternalRemoveActualVolume(__item);
            }
        }
        public virtual void SetActualVolumeAt(CustomVolume __item, int __index)
        {
            if (__item == null)
            {
                actualVolume[__index] = null;
            }
            else
            {
                actualVolume[__index] = __item;
            }
        }

        public virtual void ClearActualVolume()
        {
            if (actualVolume!=null)
            {
                var __itemsToRemove = actualVolume.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveActualVolume(__item);
                }
            }
        }
        [DataMember(Name="ItemType")]
        protected ItemType itemType;
        public virtual ItemType ItemType
        {
            get
            {
                return itemType;
            }
            set
            {
                if(Equals(itemType, value)) return;
                var __oldValue = itemType;
                if (value != null)
                {
                    itemType = value;
                }
                else
                {
                    if (itemType != null)
                    {
                        itemType = null;
                    }
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the ShippingOrder class
/// </summary>
/// <returns>New ShippingOrder object</returns>
/// <remarks></remarks>
        public ShippingOrder() {}
        #endregion
        #region Accessors Implementation
        private string Get_CurrentStatus()
        {
            if ((this?.statusEvolution?.OrderByDescending((a) => a.TimeChanged).FirstOrDefault() != null && this?.statusEvolution?.OrderByDescending((a) => a.TimeChanged).FirstOrDefault()?.Status != null))
            {
                return (this?.statusEvolution?.OrderByDescending((a) => a.TimeChanged).FirstOrDefault()?.Status?.Description ?? "");
            }
            return null;
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Shipper != null && Shipper.Length > 100)
            {
                __errors.Add("Length of property 'Shipper' cannot be greater than 100.");
            }
            if (Carrier != null && Carrier.Length > 100)
            {
                __errors.Add("Length of property 'Carrier' cannot be greater than 100.");
            }
            if (CurrentStatus != null && CurrentStatus.Length > 100)
            {
                __errors.Add("Length of property 'CurrentStatus' cannot be greater than 100.");
            }
            if (ItemDescription != null && ItemDescription.Length > 100)
            {
                __errors.Add("Length of property 'ItemDescription' cannot be greater than 100.");
            }
            if (Conditions != null && Conditions.Length > 100)
            {
                __errors.Add("Length of property 'Conditions' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'ShippingOrder' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DepartureDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ArrivalDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Shipper?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Carrier?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CurrentStatus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ItemDescription?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Conditions?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AggregateVolume?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Priority?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [ShippingOrder] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual ShippingOrder Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, ShippingOrder copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (ShippingOrder)copiedObjects[this];
            copy = copy ?? new ShippingOrder();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.DepartureDate = this.DepartureDate;
            copy.ArrivalDate = this.ArrivalDate;
            copy.Shipper = this.Shipper;
            copy.Carrier = this.Carrier;
            copy.CurrentStatus = this.CurrentStatus;
            copy.ItemDescription = this.ItemDescription;
            copy.Conditions = this.Conditions;
            copy.AggregateVolume = this.AggregateVolume;
            copy.Priority = this.Priority;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.shipment = new List<Shipment>();
            if(deep && this.shipment != null)
            {
                foreach (var __item in this.shipment)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddShipment(__item);
                        else
                            copy.AddShipment(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddShipment((Shipment)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.departurePoint != null)
            {
                if (!copiedObjects.Contains(this.departurePoint))
                {
                    if (asNew && reuseNestedObjects)
                        copy.DeparturePoint = this.DeparturePoint;
                    else if (asNew)
                        copy.DeparturePoint = this.DeparturePoint.Copy(deep, copiedObjects, true);
                    else
                        copy.departurePoint = this.departurePoint.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.DeparturePoint = (Location)copiedObjects[this.DeparturePoint];
                    else
                        copy.departurePoint = (Location)copiedObjects[this.DeparturePoint];
                }
            }
            if(deep && this.arrivalPoint != null)
            {
                if (!copiedObjects.Contains(this.arrivalPoint))
                {
                    if (asNew && reuseNestedObjects)
                        copy.ArrivalPoint = this.ArrivalPoint;
                    else if (asNew)
                        copy.ArrivalPoint = this.ArrivalPoint.Copy(deep, copiedObjects, true);
                    else
                        copy.arrivalPoint = this.arrivalPoint.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.ArrivalPoint = (Location)copiedObjects[this.ArrivalPoint];
                    else
                        copy.arrivalPoint = (Location)copiedObjects[this.ArrivalPoint];
                }
            }
            copy.statusEvolution = new List<StatusEvolution>();
            if(deep && this.statusEvolution != null)
            {
                foreach (var __item in this.statusEvolution)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddStatusEvolution(__item);
                        else
                            copy.AddStatusEvolution(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddStatusEvolution((StatusEvolution)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.parent != null)
            {
                if (!copiedObjects.Contains(this.parent))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Parent = this.Parent;
                    else if (asNew)
                        copy.Parent = this.Parent.Copy(deep, copiedObjects, true);
                    else
                        copy.parent = this.parent.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Parent = (ShippingOrder)copiedObjects[this.Parent];
                    else
                        copy.parent = (ShippingOrder)copiedObjects[this.Parent];
                }
            }
            copy.plannedVolume = new List<CustomVolume>();
            if(deep && this.plannedVolume != null)
            {
                foreach (var __item in this.plannedVolume)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddPlannedVolume(__item);
                        else
                            copy.AddPlannedVolume(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddPlannedVolume((CustomVolume)copiedObjects[__item]);
                    }
                }
            }
            copy.actualVolume = new List<CustomVolume>();
            if(deep && this.actualVolume != null)
            {
                foreach (var __item in this.actualVolume)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddActualVolume(__item);
                        else
                            copy.AddActualVolume(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddActualVolume((CustomVolume)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.itemType != null)
            {
                if (!copiedObjects.Contains(this.itemType))
                {
                    if (asNew && reuseNestedObjects)
                        copy.ItemType = this.ItemType;
                    else if (asNew)
                        copy.ItemType = this.ItemType.Copy(deep, copiedObjects, true);
                    else
                        copy.itemType = this.itemType.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.ItemType = (ItemType)copiedObjects[this.ItemType];
                    else
                        copy.itemType = (ItemType)copiedObjects[this.ItemType];
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as ShippingOrder;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(ShippingOrder x, ShippingOrder y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(ShippingOrder x, ShippingOrder y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(ShippingOrder compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
