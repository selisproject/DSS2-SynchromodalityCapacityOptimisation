// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The Warehouse class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Warehouse : IDomainModelClass
    {
        #region Warehouse's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="Code")]
        protected string code;
        [DataMember(Name="Description")]
        protected string description;
        [DataMember(Name="FlowType")]
        protected string flowType;
        [DataMember(Name="Title")]
        protected string title;
        [DataMember(Name="Address")]
        protected string address;
        [DataMember(Name="Telephone")]
        protected string telephone;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Warehouse's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The Code property
///
/// </summary>
///
        public virtual string Code
        {
            get
            {
                return code;
            }
            set
            {
                code = value;
            }
        }
/// <summary>
/// The Description property
///
/// </summary>
///
        public virtual string Description
        {
            get
            {
                return description;
            }
            set
            {
                description = value;
            }
        }
/// <summary>
/// The FlowType property
///
/// </summary>
///
        public virtual string FlowType
        {
            get
            {
                return flowType;
            }
            set
            {
                flowType = value;
            }
        }
/// <summary>
/// The Title property
///
/// </summary>
///
        public virtual string Title
        {
            get
            {
                return title;
            }
            set
            {
                title = value;
            }
        }
/// <summary>
/// The Address property
///
/// </summary>
///
        public virtual string Address
        {
            get
            {
                return address;
            }
            set
            {
                address = value;
            }
        }
/// <summary>
/// The Telephone property
///
/// </summary>
///
        public virtual string Telephone
        {
            get
            {
                return telephone;
            }
            set
            {
                telephone = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Warehouse's Participant Properties
        [DataMember(Name="GeoCoordinates")]
        protected GeoCoordinates geoCoordinates;
        public virtual GeoCoordinates GeoCoordinates
        {
            get
            {
                return geoCoordinates;
            }
            set
            {
                if(Equals(geoCoordinates, value)) return;
                var __oldValue = geoCoordinates;
                if (value != null)
                {
                    geoCoordinates = value;
                }
                else
                {
                    if (geoCoordinates != null)
                    {
                        geoCoordinates = null;
                    }
                }
            }
        }
        [DataMember(Name="RegionalAgentsService")]
        protected IList<RegionalAgent> regionalAgentsService = new List<RegionalAgent>();
        public virtual List<RegionalAgent> RegionalAgentsService
        {
            get
            {
                if (regionalAgentsService is RegionalAgent[])
                {
                    regionalAgentsService = regionalAgentsService.ToList();
                }
                if (regionalAgentsService == null)
                {
                    regionalAgentsService = new List<RegionalAgent>();
                }
                return regionalAgentsService.ToList();
            }
            set
            {
                if (regionalAgentsService is RegionalAgent[])
                {
                    regionalAgentsService = regionalAgentsService.ToList();
                }
                if (regionalAgentsService != null)
                {
                    var __itemsToDelete = new List<RegionalAgent>(regionalAgentsService);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveRegionalAgentsService(__item);
                    }
                }
                if(value == null)
                {
                    regionalAgentsService = new List<RegionalAgent>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddRegionalAgentsService(__item);
                }
            }
        }
        public virtual void AddRegionalAgentsService(IList<RegionalAgent> __items)
        {
            foreach (var __item in __items)
            {
                AddRegionalAgentsService(__item);
            }
        }

        public virtual void InternalAddRegionalAgentsService(RegionalAgent __item)
        {
            if (__item == null || disableInternalAdditions) return;
            regionalAgentsService?.Add(__item);
        }

        public virtual void InternalRemoveRegionalAgentsService(RegionalAgent __item)
        {
            if (__item == null) return;
            regionalAgentsService?.Remove(__item);
        }

        public virtual void AddRegionalAgentsService(RegionalAgent __item)
        {
            if (__item == null) return;
            if (!regionalAgentsService.Contains(__item))
                InternalAddRegionalAgentsService(__item);
            if (!__item.WarehousesSupport.Contains(this))
                __item.AddWarehousesSupport(this);
        }

        public virtual void AddAtIndexRegionalAgentsService(int index, RegionalAgent __item)
        {
            if (__item == null) return;
            if (!regionalAgentsService.Contains(__item))
                regionalAgentsService.Insert(index, __item);
            if (!__item.WarehousesSupport.Contains(this))
                __item.AddWarehousesSupport(this);
        }

        public virtual void RemoveRegionalAgentsService(RegionalAgent __item)
        {
            if (__item != null)
            {
                if (regionalAgentsService.Contains(__item))
                    InternalRemoveRegionalAgentsService(__item);
                if(__item.WarehousesSupport.Contains(this))
                    __item.RemoveWarehousesSupport(this);
            }
        }
        public virtual void SetRegionalAgentsServiceAt(RegionalAgent __item, int __index)
        {
            if (__item == null)
            {
                regionalAgentsService[__index].RemoveWarehousesSupport(this);
            }
            else
            {
                regionalAgentsService[__index] = __item;
                if (!__item.WarehousesSupport.Contains(this))
                    __item.AddWarehousesSupport(this);
            }
        }

        public virtual void ClearRegionalAgentsService()
        {
            if (regionalAgentsService!=null)
            {
                var __itemsToRemove = regionalAgentsService.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveRegionalAgentsService(__item);
                }
            }
        }
        [DataMember(Name="PastOrders")]
        protected IList<PastOrder> pastOrders = new List<PastOrder>();
        public virtual List<PastOrder> PastOrders
        {
            get
            {
                if (pastOrders is PastOrder[])
                {
                    pastOrders = pastOrders.ToList();
                }
                if (pastOrders == null)
                {
                    pastOrders = new List<PastOrder>();
                }
                return pastOrders.ToList();
            }
            set
            {
                if (pastOrders is PastOrder[])
                {
                    pastOrders = pastOrders.ToList();
                }
                if (pastOrders != null)
                {
                    var __itemsToDelete = new List<PastOrder>(pastOrders);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemovePastOrders(__item);
                    }
                }
                if(value == null)
                {
                    pastOrders = new List<PastOrder>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddPastOrders(__item);
                }
            }
        }
        public virtual void AddPastOrders(IList<PastOrder> __items)
        {
            foreach (var __item in __items)
            {
                AddPastOrders(__item);
            }
        }

        public virtual void InternalAddPastOrders(PastOrder __item)
        {
            if (__item == null || disableInternalAdditions) return;
            pastOrders?.Add(__item);
        }

        public virtual void InternalRemovePastOrders(PastOrder __item)
        {
            if (__item == null) return;
            pastOrders?.Remove(__item);
        }

        public virtual void AddPastOrders(PastOrder __item)
        {
            if (__item == null) return;
            if (__item.Warehouse != this)
                __item.Warehouse = this;
        }

        public virtual void AddAtIndexPastOrders(int index, PastOrder __item)
        {
            if (__item == null) return;
            pastOrders?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Warehouse != this)
                    __item.Warehouse = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemovePastOrders(PastOrder __item)
        {
            if (__item != null)
            {
                __item.Warehouse = null;
            }
        }
        public virtual void SetPastOrdersAt(PastOrder __item, int __index)
        {
            if (__item == null)
            {
                pastOrders[__index].Warehouse = null;
            }
            else
            {
                pastOrders[__index] = __item;
                if (__item.Warehouse != this)
                    __item.Warehouse = this;
            }
        }

        public virtual void ClearPastOrders()
        {
            if (pastOrders!=null)
            {
                var __itemsToRemove = pastOrders.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemovePastOrders(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Warehouse class
/// </summary>
/// <returns>New Warehouse object</returns>
/// <remarks></remarks>
        public Warehouse() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Code != null && Code.Length > 100)
            {
                __errors.Add("Length of property 'Code' cannot be greater than 100.");
            }
            if (Description != null && Description.Length > 100)
            {
                __errors.Add("Length of property 'Description' cannot be greater than 100.");
            }
            if (FlowType != null && FlowType.Length > 100)
            {
                __errors.Add("Length of property 'FlowType' cannot be greater than 100.");
            }
            if (Title != null && Title.Length > 100)
            {
                __errors.Add("Length of property 'Title' cannot be greater than 100.");
            }
            if (Address != null && Address.Length > 100)
            {
                __errors.Add("Length of property 'Address' cannot be greater than 100.");
            }
            if (Telephone != null && Telephone.Length > 100)
            {
                __errors.Add("Length of property 'Telephone' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Warehouse' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Code?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Description?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (FlowType?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Title?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Address?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Telephone?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Warehouse] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Warehouse Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Warehouse copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Warehouse)copiedObjects[this];
            copy = copy ?? new Warehouse();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.Code = this.Code;
            copy.Description = this.Description;
            copy.FlowType = this.FlowType;
            copy.Title = this.Title;
            copy.Address = this.Address;
            copy.Telephone = this.Telephone;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.geoCoordinates != null)
            {
                if (!copiedObjects.Contains(this.geoCoordinates))
                {
                    if (asNew && reuseNestedObjects)
                        copy.GeoCoordinates = this.GeoCoordinates;
                    else if (asNew)
                        copy.GeoCoordinates = this.GeoCoordinates.Copy(deep, copiedObjects, true);
                    else
                        copy.geoCoordinates = this.geoCoordinates.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.GeoCoordinates = (GeoCoordinates)copiedObjects[this.GeoCoordinates];
                    else
                        copy.geoCoordinates = (GeoCoordinates)copiedObjects[this.GeoCoordinates];
                }
            }
            copy.regionalAgentsService = new List<RegionalAgent>();
            if(deep && this.regionalAgentsService != null)
            {
                foreach (var __item in this.regionalAgentsService)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddRegionalAgentsService(__item);
                        else
                            copy.AddRegionalAgentsService(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddRegionalAgentsService((RegionalAgent)copiedObjects[__item]);
                    }
                }
            }
            copy.pastOrders = new List<PastOrder>();
            if(deep && this.pastOrders != null)
            {
                foreach (var __item in this.pastOrders)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddPastOrders(__item);
                        else
                            copy.AddPastOrders(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddPastOrders((PastOrder)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Warehouse;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Warehouse x, Warehouse y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Warehouse x, Warehouse y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Warehouse compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
