// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The ScheduledRouteTemplate class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class ScheduledRouteTemplate : IDomainModelClass
    {
        #region ScheduledRouteTemplate's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="Origin")]
        protected string origin;
        [DataMember(Name="Destination")]
        protected string destination;
        [DataMember(Name="DaysOfWeek")]
        protected string daysOfWeek;
        [DataMember(Name="PricePerPallet")]
        protected decimal? pricePerPallet;
        [DataMember(Name="PricePerKilogram")]
        protected decimal? pricePerKilogram;
        [DataMember(Name="PricePerCubicMeter")]
        protected decimal? pricePerCubicMeter;
        [DataMember(Name="TotalAvailableCapacityKG")]
        protected decimal? totalAvailableCapacityKG;
        [DataMember(Name="EffectiveFrom")]
        protected DateTime? effectiveFrom;
        [DataMember(Name="EffectiveTo")]
        protected DateTime? effectiveTo;
        [DataMember(Name="TypeOfGoods")]
        protected DSS2_SynchromodalityCapacityOptimisation.BO.TruckContent? typeOfGoods;
        [DataMember(Name="AvailableCapacityLaden")]
        protected int? availableCapacityLaden;
        [DataMember(Name="CreatedOn")]
        protected DateTime? createdOn;
        [DataMember(Name="Frequency")]
        protected DSS2_SynchromodalityCapacityOptimisation.BO.RouteFrequency? frequency;
        [DataMember(Name="IsPrivate")]
        protected bool isPrivate;
        [DataMember(Name="TotalAvailableCapacityLaden")]
        protected int? totalAvailableCapacityLaden;
        [DataMember(Name="TotalAvailableCapacityM3")]
        protected decimal? totalAvailableCapacityM3;
        [DataMember(Name="AvailableCapacityKG")]
        protected decimal? availableCapacityKG;
        [DataMember(Name="AvailableCapacityM3")]
        protected decimal? availableCapacityM3;
        [DataMember(Name="FixedPrice")]
        protected decimal? fixedPrice;
        [DataMember(Name="TruckPlate")]
        protected string truckPlate;
        [DataMember(Name="DeliveryDate")]
        protected DateTime? deliveryDate;
        [DataMember(Name="ByRA")]
        protected bool byRA;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region ScheduledRouteTemplate's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The Origin property
///
/// </summary>
///
        public virtual string Origin
        {
            get
            {
                return origin;
            }
            set
            {
                origin = value;
            }
        }
/// <summary>
/// The Destination property
///
/// </summary>
///
        public virtual string Destination
        {
            get
            {
                return destination;
            }
            set
            {
                destination = value;
            }
        }
/// <summary>
/// The DaysOfWeek property
///
/// </summary>
///
        public virtual string DaysOfWeek
        {
            get
            {
                return daysOfWeek;
            }
            set
            {
                daysOfWeek = value;
            }
        }
/// <summary>
/// The PricePerPallet property
///
/// </summary>
///
        public virtual decimal? PricePerPallet
        {
            get
            {
                return pricePerPallet;
            }
            set
            {
                pricePerPallet = value;
            }
        }
/// <summary>
/// The PricePerKilogram property
///
/// </summary>
///
        public virtual decimal? PricePerKilogram
        {
            get
            {
                return pricePerKilogram;
            }
            set
            {
                pricePerKilogram = value;
            }
        }
/// <summary>
/// The PricePerCubicMeter property
///
/// </summary>
///
        public virtual decimal? PricePerCubicMeter
        {
            get
            {
                return pricePerCubicMeter;
            }
            set
            {
                pricePerCubicMeter = value;
            }
        }
/// <summary>
/// The TotalAvailableCapacityKG property
///
/// </summary>
///
        public virtual decimal? TotalAvailableCapacityKG
        {
            get
            {
                return totalAvailableCapacityKG;
            }
            set
            {
                totalAvailableCapacityKG = value;
            }
        }
/// <summary>
/// The EffectiveFrom property
///
/// </summary>
///
        public virtual DateTime? EffectiveFrom
        {
            get
            {
                return effectiveFrom;
            }
            set
            {
                effectiveFrom = value;
            }
        }
/// <summary>
/// The EffectiveTo property
///
/// </summary>
///
        public virtual DateTime? EffectiveTo
        {
            get
            {
                return effectiveTo;
            }
            set
            {
                effectiveTo = value;
            }
        }
/// <summary>
/// The TypeOfGoods property
///
/// </summary>
///
        public virtual DSS2_SynchromodalityCapacityOptimisation.BO.TruckContent? TypeOfGoods
        {
            get
            {
                return typeOfGoods;
            }
            set
            {
                typeOfGoods = value;
            }
        }
/// <summary>
/// The AvailableCapacityLaden property
///
/// </summary>
///
        public virtual int? AvailableCapacityLaden
        {
            get
            {
                return availableCapacityLaden;
            }
            set
            {
                availableCapacityLaden = value;
            }
        }
/// <summary>
/// The CreatedOn property
///
/// </summary>
///
        public virtual DateTime? CreatedOn
        {
            get
            {
                return createdOn;
            }
            set
            {
                createdOn = value;
            }
        }
/// <summary>
/// The Frequency property
///
/// </summary>
///
        public virtual DSS2_SynchromodalityCapacityOptimisation.BO.RouteFrequency? Frequency
        {
            get
            {
                return frequency;
            }
            set
            {
                frequency = value;
            }
        }
/// <summary>
/// The IsPrivate property
///
/// </summary>
///
        public virtual bool IsPrivate
        {
            get
            {
                return isPrivate;
            }
            set
            {
                isPrivate = value;
            }
        }
/// <summary>
/// The TotalAvailableCapacityLaden property
///
/// </summary>
///
        public virtual int? TotalAvailableCapacityLaden
        {
            get
            {
                return totalAvailableCapacityLaden;
            }
            set
            {
                totalAvailableCapacityLaden = value;
            }
        }
/// <summary>
/// The TotalAvailableCapacityM3 property
///
/// </summary>
///
        public virtual decimal? TotalAvailableCapacityM3
        {
            get
            {
                return totalAvailableCapacityM3;
            }
            set
            {
                totalAvailableCapacityM3 = value;
            }
        }
/// <summary>
/// The AvailableCapacityKG property
///
/// </summary>
///
        public virtual decimal? AvailableCapacityKG
        {
            get
            {
                return availableCapacityKG;
            }
            set
            {
                availableCapacityKG = value;
            }
        }
/// <summary>
/// The AvailableCapacityM3 property
///
/// </summary>
///
        public virtual decimal? AvailableCapacityM3
        {
            get
            {
                return availableCapacityM3;
            }
            set
            {
                availableCapacityM3 = value;
            }
        }
/// <summary>
/// The FixedPrice property
///
/// </summary>
///
        public virtual decimal? FixedPrice
        {
            get
            {
                return fixedPrice;
            }
            set
            {
                fixedPrice = value;
            }
        }
/// <summary>
/// The TruckPlate property
///
/// </summary>
///
        public virtual string TruckPlate
        {
            get
            {
                return truckPlate;
            }
            set
            {
                truckPlate = value;
            }
        }
/// <summary>
/// The DeliveryDate property
///
/// </summary>
///
        public virtual DateTime? DeliveryDate
        {
            get
            {
                return deliveryDate;
            }
            set
            {
                deliveryDate = value;
            }
        }
/// <summary>
/// The ByRA property
///
/// </summary>
///
        public virtual bool ByRA
        {
            get
            {
                return byRA;
            }
            set
            {
                byRA = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region ScheduledRouteTemplate's Participant Properties
        [DataMember(Name="Owner")]
        protected RegionalAgent owner;
        public virtual RegionalAgent Owner
        {
            get
            {
                return owner;
            }
            set
            {
                if(Equals(owner, value)) return;
                var __oldValue = owner;
                owner?.InternalRemoveScheduledRouteTemplates(this);
                owner = value;
                if (value != null)
                {
                    owner.InternalAddScheduledRouteTemplates(this);
                }
            }
        }
        [DataMember(Name="VisibleTo")]
        protected IList<LSP> visibleTo = new List<LSP>();
        public virtual List<LSP> VisibleTo
        {
            get
            {
                if (visibleTo is LSP[])
                {
                    visibleTo = visibleTo.ToList();
                }
                if (visibleTo == null)
                {
                    visibleTo = new List<LSP>();
                }
                return visibleTo.ToList();
            }
            set
            {
                if (visibleTo is LSP[])
                {
                    visibleTo = visibleTo.ToList();
                }
                if (visibleTo != null)
                {
                    var __itemsToDelete = new List<LSP>(visibleTo);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveVisibleTo(__item);
                    }
                }
                if(value == null)
                {
                    visibleTo = new List<LSP>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddVisibleTo(__item);
                }
            }
        }
        public virtual void AddVisibleTo(IList<LSP> __items)
        {
            foreach (var __item in __items)
            {
                AddVisibleTo(__item);
            }
        }

        public virtual void InternalAddVisibleTo(LSP __item)
        {
            if (__item == null || disableInternalAdditions) return;
            visibleTo?.Add(__item);
        }

        public virtual void InternalRemoveVisibleTo(LSP __item)
        {
            if (__item == null) return;
            visibleTo?.Remove(__item);
        }

        public virtual void AddVisibleTo(LSP __item)
        {
            if (__item == null) return;
            if (!visibleTo.Contains(__item))
                InternalAddVisibleTo(__item);
            if (!__item.PrivateTemplates.Contains(this))
                __item.AddPrivateTemplates(this);
        }

        public virtual void AddAtIndexVisibleTo(int index, LSP __item)
        {
            if (__item == null) return;
            if (!visibleTo.Contains(__item))
                visibleTo.Insert(index, __item);
            if (!__item.PrivateTemplates.Contains(this))
                __item.AddPrivateTemplates(this);
        }

        public virtual void RemoveVisibleTo(LSP __item)
        {
            if (__item != null)
            {
                if (visibleTo.Contains(__item))
                    InternalRemoveVisibleTo(__item);
                if(__item.PrivateTemplates.Contains(this))
                    __item.RemovePrivateTemplates(this);
            }
        }
        public virtual void SetVisibleToAt(LSP __item, int __index)
        {
            if (__item == null)
            {
                visibleTo[__index].RemovePrivateTemplates(this);
            }
            else
            {
                visibleTo[__index] = __item;
                if (!__item.PrivateTemplates.Contains(this))
                    __item.AddPrivateTemplates(this);
            }
        }

        public virtual void ClearVisibleTo()
        {
            if (visibleTo!=null)
            {
                var __itemsToRemove = visibleTo.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveVisibleTo(__item);
                }
            }
        }
        [DataMember(Name="OwnerLSP")]
        protected LSP ownerLSP;
        public virtual LSP OwnerLSP
        {
            get
            {
                return ownerLSP;
            }
            set
            {
                if(Equals(ownerLSP, value)) return;
                var __oldValue = ownerLSP;
                if (value != null)
                {
                    ownerLSP = value;
                }
                else
                {
                    if (ownerLSP != null)
                    {
                        ownerLSP = null;
                    }
                }
            }
        }
        [DataMember(Name="VisibleToRAs")]
        protected IList<RegionalAgent> visibleToRAs = new List<RegionalAgent>();
        public virtual List<RegionalAgent> VisibleToRAs
        {
            get
            {
                if (visibleToRAs is RegionalAgent[])
                {
                    visibleToRAs = visibleToRAs.ToList();
                }
                if (visibleToRAs == null)
                {
                    visibleToRAs = new List<RegionalAgent>();
                }
                return visibleToRAs.ToList();
            }
            set
            {
                if (visibleToRAs is RegionalAgent[])
                {
                    visibleToRAs = visibleToRAs.ToList();
                }
                if (visibleToRAs != null)
                {
                    var __itemsToDelete = new List<RegionalAgent>(visibleToRAs);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveVisibleToRAs(__item);
                    }
                }
                if(value == null)
                {
                    visibleToRAs = new List<RegionalAgent>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddVisibleToRAs(__item);
                }
            }
        }
        public virtual void AddVisibleToRAs(IList<RegionalAgent> __items)
        {
            foreach (var __item in __items)
            {
                AddVisibleToRAs(__item);
            }
        }

        public virtual void InternalAddVisibleToRAs(RegionalAgent __item)
        {
            if (__item == null || disableInternalAdditions) return;
            visibleToRAs?.Add(__item);
        }

        public virtual void InternalRemoveVisibleToRAs(RegionalAgent __item)
        {
            if (__item == null) return;
            visibleToRAs?.Remove(__item);
        }

        public virtual void AddVisibleToRAs(RegionalAgent __item)
        {
            if (__item == null) return;
            if (!visibleToRAs.Contains(__item))
                InternalAddVisibleToRAs(__item);
        }

        public virtual void AddAtIndexVisibleToRAs(int index, RegionalAgent __item)
        {
            if (__item == null) return;
            if (!visibleToRAs.Contains(__item))
                visibleToRAs.Insert(index, __item);
        }

        public virtual void RemoveVisibleToRAs(RegionalAgent __item)
        {
            if (__item != null)
            {
                InternalRemoveVisibleToRAs(__item);
            }
        }
        public virtual void SetVisibleToRAsAt(RegionalAgent __item, int __index)
        {
            if (__item == null)
            {
                visibleToRAs[__index] = null;
            }
            else
            {
                visibleToRAs[__index] = __item;
            }
        }

        public virtual void ClearVisibleToRAs()
        {
            if (visibleToRAs!=null)
            {
                var __itemsToRemove = visibleToRAs.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveVisibleToRAs(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the ScheduledRouteTemplate class
/// </summary>
/// <returns>New ScheduledRouteTemplate object</returns>
/// <remarks></remarks>
        public ScheduledRouteTemplate() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Origin != null && Origin.Length > 100)
            {
                __errors.Add("Length of property 'Origin' cannot be greater than 100.");
            }
            if (Destination != null && Destination.Length > 100)
            {
                __errors.Add("Length of property 'Destination' cannot be greater than 100.");
            }
            if (DaysOfWeek != null && DaysOfWeek.Length > 100)
            {
                __errors.Add("Length of property 'DaysOfWeek' cannot be greater than 100.");
            }
            if (TruckPlate != null && TruckPlate.Length > 100)
            {
                __errors.Add("Length of property 'TruckPlate' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'ScheduledRouteTemplate' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Origin?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Destination?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DaysOfWeek?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PricePerPallet?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PricePerKilogram?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PricePerCubicMeter?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TotalAvailableCapacityKG?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EffectiveFrom?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EffectiveTo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TypeOfGoods?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AvailableCapacityLaden?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CreatedOn?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Frequency?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (IsPrivate.GetHashCode() );
            hashCode = hashCode * -1521134295 + (TotalAvailableCapacityLaden?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TotalAvailableCapacityM3?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AvailableCapacityKG?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AvailableCapacityM3?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (FixedPrice?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TruckPlate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DeliveryDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ByRA.GetHashCode() );
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [ScheduledRouteTemplate] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual ScheduledRouteTemplate Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, ScheduledRouteTemplate copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (ScheduledRouteTemplate)copiedObjects[this];
            copy = copy ?? new ScheduledRouteTemplate();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.Origin = this.Origin;
            copy.Destination = this.Destination;
            copy.DaysOfWeek = this.DaysOfWeek;
            copy.PricePerPallet = this.PricePerPallet;
            copy.PricePerKilogram = this.PricePerKilogram;
            copy.PricePerCubicMeter = this.PricePerCubicMeter;
            copy.TotalAvailableCapacityKG = this.TotalAvailableCapacityKG;
            copy.EffectiveFrom = this.EffectiveFrom;
            copy.EffectiveTo = this.EffectiveTo;
            copy.TypeOfGoods = this.TypeOfGoods;
            copy.AvailableCapacityLaden = this.AvailableCapacityLaden;
            copy.CreatedOn = this.CreatedOn;
            copy.Frequency = this.Frequency;
            copy.IsPrivate = this.IsPrivate;
            copy.TotalAvailableCapacityLaden = this.TotalAvailableCapacityLaden;
            copy.TotalAvailableCapacityM3 = this.TotalAvailableCapacityM3;
            copy.AvailableCapacityKG = this.AvailableCapacityKG;
            copy.AvailableCapacityM3 = this.AvailableCapacityM3;
            copy.FixedPrice = this.FixedPrice;
            copy.TruckPlate = this.TruckPlate;
            copy.DeliveryDate = this.DeliveryDate;
            copy.ByRA = this.ByRA;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.owner != null)
            {
                if (!copiedObjects.Contains(this.owner))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Owner = this.Owner;
                    else if (asNew)
                        copy.Owner = this.Owner.Copy(deep, copiedObjects, true);
                    else
                        copy.owner = this.owner.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Owner = (RegionalAgent)copiedObjects[this.Owner];
                    else
                        copy.owner = (RegionalAgent)copiedObjects[this.Owner];
                }
            }
            copy.visibleTo = new List<LSP>();
            if(deep && this.visibleTo != null)
            {
                foreach (var __item in this.visibleTo)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddVisibleTo(__item);
                        else
                            copy.AddVisibleTo(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddVisibleTo((LSP)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.ownerLSP != null)
            {
                if (!copiedObjects.Contains(this.ownerLSP))
                {
                    if (asNew && reuseNestedObjects)
                        copy.OwnerLSP = this.OwnerLSP;
                    else if (asNew)
                        copy.OwnerLSP = this.OwnerLSP.Copy(deep, copiedObjects, true);
                    else
                        copy.ownerLSP = this.ownerLSP.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.OwnerLSP = (LSP)copiedObjects[this.OwnerLSP];
                    else
                        copy.ownerLSP = (LSP)copiedObjects[this.OwnerLSP];
                }
            }
            copy.visibleToRAs = new List<RegionalAgent>();
            if(deep && this.visibleToRAs != null)
            {
                foreach (var __item in this.visibleToRAs)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddVisibleToRAs(__item);
                        else
                            copy.AddVisibleToRAs(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddVisibleToRAs((RegionalAgent)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as ScheduledRouteTemplate;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(ScheduledRouteTemplate x, ScheduledRouteTemplate y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(ScheduledRouteTemplate x, ScheduledRouteTemplate y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(ScheduledRouteTemplate compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
