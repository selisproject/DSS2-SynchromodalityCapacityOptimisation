// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The TblZslNormalisationSuggestion class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class TblZslNormalisationSuggestion : IDomainModelClass
    {
        #region TblZslNormalisationSuggestion's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="SuggestionsId")]
        protected long? suggestionsId = 0L;
        [DataMember(Name="Customer_Name")]
        protected string customer_Name;
        [DataMember(Name="Sender_Name")]
        protected string sender_Name;
        [DataMember(Name="Sender_Address")]
        protected string sender_Address;
        [DataMember(Name="Existing_Sender_City")]
        protected string existing_Sender_City;
        [DataMember(Name="Normalised_Sender_City")]
        protected string normalised_Sender_City;
        [DataMember(Name="Sender_Country")]
        protected string sender_Country;
        [DataMember(Name="Sender_Zipcode")]
        protected int? sender_Zipcode;
        [DataMember(Name="Receiver_Name")]
        protected string receiver_Name;
        [DataMember(Name="Receiver_Address")]
        protected string receiver_Address;
        [DataMember(Name="Existing_Receiver_City")]
        protected string existing_Receiver_City;
        [DataMember(Name="Normalised_Receiver_City")]
        protected string normalised_Receiver_City;
        [DataMember(Name="Existing_Pallet_Name")]
        protected string existing_Pallet_Name;
        [DataMember(Name="Normalised_Pallet_Name")]
        protected string normalised_Pallet_Name;
        [DataMember(Name="Receiver_Zipcode")]
        protected int? receiver_Zipcode;
        [DataMember(Name="Receiver_Country")]
        protected string receiver_Country;
        [DataMember(Name="Carrier")]
        protected string carrier;
        [DataMember(Name="Order_Number")]
        protected string order_Number;
        [DataMember(Name="Shipment_Date")]
        protected string shipment_Date;
        [DataMember(Name="Weight")]
        protected int? weight;
        [DataMember(Name="Volume")]
        protected int? volume;
        [DataMember(Name="Cost")]
        protected int? cost;
        [DataMember(Name="Currency")]
        protected string currency;
        [DataMember(Name="Number_Of_Pallets")]
        protected int? number_Of_Pallets;
        [DataMember(Name="Suggestion_Date")]
        protected string suggestion_Date;
        [DataMember(Name="Approved")]
        protected bool approved;
        [DataMember(Name="ApprovedBy")]
        protected string approvedBy;
        [DataMember(Name="ApprovedDate")]
        protected string approvedDate;
        [DataMember(Name="Owner")]
        protected string owner;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

        #endregion
        #region TblZslNormalisationSuggestion's Properties
/// <summary>
/// The SuggestionsId property
///
/// </summary>
///
        [Key]
        public virtual long? SuggestionsId
        {
            get
            {
                return suggestionsId;
            }
            set
            {
                suggestionsId = value;
            }
        }
/// <summary>
/// The Customer_Name property
///
/// </summary>
///
        public virtual string Customer_Name
        {
            get
            {
                return customer_Name;
            }
            set
            {
                customer_Name = value;
            }
        }
/// <summary>
/// The Sender_Name property
///
/// </summary>
///
        public virtual string Sender_Name
        {
            get
            {
                return sender_Name;
            }
            set
            {
                sender_Name = value;
            }
        }
/// <summary>
/// The Sender_Address property
///
/// </summary>
///
        public virtual string Sender_Address
        {
            get
            {
                return sender_Address;
            }
            set
            {
                sender_Address = value;
            }
        }
/// <summary>
/// The Existing_Sender_City property
///
/// </summary>
///
        public virtual string Existing_Sender_City
        {
            get
            {
                return existing_Sender_City;
            }
            set
            {
                existing_Sender_City = value;
            }
        }
/// <summary>
/// The Normalised_Sender_City property
///
/// </summary>
///
        public virtual string Normalised_Sender_City
        {
            get
            {
                return normalised_Sender_City;
            }
            set
            {
                normalised_Sender_City = value;
            }
        }
/// <summary>
/// The Sender_Country property
///
/// </summary>
///
        public virtual string Sender_Country
        {
            get
            {
                return sender_Country;
            }
            set
            {
                sender_Country = value;
            }
        }
/// <summary>
/// The Sender_Zipcode property
///
/// </summary>
///
        public virtual int? Sender_Zipcode
        {
            get
            {
                return sender_Zipcode;
            }
            set
            {
                sender_Zipcode = value;
            }
        }
/// <summary>
/// The Receiver_Name property
///
/// </summary>
///
        public virtual string Receiver_Name
        {
            get
            {
                return receiver_Name;
            }
            set
            {
                receiver_Name = value;
            }
        }
/// <summary>
/// The Receiver_Address property
///
/// </summary>
///
        public virtual string Receiver_Address
        {
            get
            {
                return receiver_Address;
            }
            set
            {
                receiver_Address = value;
            }
        }
/// <summary>
/// The Existing_Receiver_City property
///
/// </summary>
///
        public virtual string Existing_Receiver_City
        {
            get
            {
                return existing_Receiver_City;
            }
            set
            {
                existing_Receiver_City = value;
            }
        }
/// <summary>
/// The Normalised_Receiver_City property
///
/// </summary>
///
        public virtual string Normalised_Receiver_City
        {
            get
            {
                return normalised_Receiver_City;
            }
            set
            {
                normalised_Receiver_City = value;
            }
        }
/// <summary>
/// The Existing_Pallet_Name property
///
/// </summary>
///
        public virtual string Existing_Pallet_Name
        {
            get
            {
                return existing_Pallet_Name;
            }
            set
            {
                existing_Pallet_Name = value;
            }
        }
/// <summary>
/// The Normalised_Pallet_Name property
///
/// </summary>
///
        public virtual string Normalised_Pallet_Name
        {
            get
            {
                return normalised_Pallet_Name;
            }
            set
            {
                normalised_Pallet_Name = value;
            }
        }
/// <summary>
/// The Receiver_Zipcode property
///
/// </summary>
///
        public virtual int? Receiver_Zipcode
        {
            get
            {
                return receiver_Zipcode;
            }
            set
            {
                receiver_Zipcode = value;
            }
        }
/// <summary>
/// The Receiver_Country property
///
/// </summary>
///
        public virtual string Receiver_Country
        {
            get
            {
                return receiver_Country;
            }
            set
            {
                receiver_Country = value;
            }
        }
/// <summary>
/// The Carrier property
///
/// </summary>
///
        public virtual string Carrier
        {
            get
            {
                return carrier;
            }
            set
            {
                carrier = value;
            }
        }
/// <summary>
/// The Order_Number property
///
/// </summary>
///
        public virtual string Order_Number
        {
            get
            {
                return order_Number;
            }
            set
            {
                order_Number = value;
            }
        }
/// <summary>
/// The Shipment_Date property
///
/// </summary>
///
        public virtual string Shipment_Date
        {
            get
            {
                return shipment_Date;
            }
            set
            {
                shipment_Date = value;
            }
        }
/// <summary>
/// The Weight property
///
/// </summary>
///
        public virtual int? Weight
        {
            get
            {
                return weight;
            }
            set
            {
                weight = value;
            }
        }
/// <summary>
/// The Volume property
///
/// </summary>
///
        public virtual int? Volume
        {
            get
            {
                return volume;
            }
            set
            {
                volume = value;
            }
        }
/// <summary>
/// The Cost property
///
/// </summary>
///
        public virtual int? Cost
        {
            get
            {
                return cost;
            }
            set
            {
                cost = value;
            }
        }
/// <summary>
/// The Currency property
///
/// </summary>
///
        public virtual string Currency
        {
            get
            {
                return currency;
            }
            set
            {
                currency = value;
            }
        }
/// <summary>
/// The Number_Of_Pallets property
///
/// </summary>
///
        public virtual int? Number_Of_Pallets
        {
            get
            {
                return number_Of_Pallets;
            }
            set
            {
                number_Of_Pallets = value;
            }
        }
/// <summary>
/// The Suggestion_Date property
///
/// </summary>
///
        public virtual string Suggestion_Date
        {
            get
            {
                return suggestion_Date;
            }
            set
            {
                suggestion_Date = value;
            }
        }
/// <summary>
/// The Approved property
///
/// </summary>
///
        public virtual bool Approved
        {
            get
            {
                return approved;
            }
            set
            {
                approved = value;
            }
        }
/// <summary>
/// The ApprovedBy property
///
/// </summary>
///
        public virtual string ApprovedBy
        {
            get
            {
                return approvedBy;
            }
            set
            {
                approvedBy = value;
            }
        }
/// <summary>
/// The ApprovedDate property
///
/// </summary>
///
        public virtual string ApprovedDate
        {
            get
            {
                return approvedDate;
            }
            set
            {
                approvedDate = value;
            }
        }
/// <summary>
/// The Owner property
///
/// </summary>
///
        public virtual string Owner
        {
            get
            {
                return owner;
            }
            set
            {
                owner = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the TblZslNormalisationSuggestion class
/// </summary>
/// <returns>New TblZslNormalisationSuggestion object</returns>
/// <remarks></remarks>
        public TblZslNormalisationSuggestion() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (SuggestionsId == null)
            {
                __errors.Add("Property 'SuggestionsId' is required.");
            }
            if (Customer_Name != null && Customer_Name.Length > 100)
            {
                __errors.Add("Length of property 'Customer_Name' cannot be greater than 100.");
            }
            if (Sender_Name != null && Sender_Name.Length > 100)
            {
                __errors.Add("Length of property 'Sender_Name' cannot be greater than 100.");
            }
            if (Sender_Address != null && Sender_Address.Length > 100)
            {
                __errors.Add("Length of property 'Sender_Address' cannot be greater than 100.");
            }
            if (Existing_Sender_City != null && Existing_Sender_City.Length > 100)
            {
                __errors.Add("Length of property 'Existing_Sender_City' cannot be greater than 100.");
            }
            if (Normalised_Sender_City != null && Normalised_Sender_City.Length > 100)
            {
                __errors.Add("Length of property 'Normalised_Sender_City' cannot be greater than 100.");
            }
            if (Sender_Country != null && Sender_Country.Length > 100)
            {
                __errors.Add("Length of property 'Sender_Country' cannot be greater than 100.");
            }
            if (Receiver_Name != null && Receiver_Name.Length > 100)
            {
                __errors.Add("Length of property 'Receiver_Name' cannot be greater than 100.");
            }
            if (Receiver_Address != null && Receiver_Address.Length > 100)
            {
                __errors.Add("Length of property 'Receiver_Address' cannot be greater than 100.");
            }
            if (Existing_Receiver_City != null && Existing_Receiver_City.Length > 100)
            {
                __errors.Add("Length of property 'Existing_Receiver_City' cannot be greater than 100.");
            }
            if (Normalised_Receiver_City != null && Normalised_Receiver_City.Length > 100)
            {
                __errors.Add("Length of property 'Normalised_Receiver_City' cannot be greater than 100.");
            }
            if (Existing_Pallet_Name != null && Existing_Pallet_Name.Length > 100)
            {
                __errors.Add("Length of property 'Existing_Pallet_Name' cannot be greater than 100.");
            }
            if (Normalised_Pallet_Name != null && Normalised_Pallet_Name.Length > 100)
            {
                __errors.Add("Length of property 'Normalised_Pallet_Name' cannot be greater than 100.");
            }
            if (Receiver_Country != null && Receiver_Country.Length > 100)
            {
                __errors.Add("Length of property 'Receiver_Country' cannot be greater than 100.");
            }
            if (Carrier != null && Carrier.Length > 100)
            {
                __errors.Add("Length of property 'Carrier' cannot be greater than 100.");
            }
            if (Order_Number != null && Order_Number.Length > 100)
            {
                __errors.Add("Length of property 'Order_Number' cannot be greater than 100.");
            }
            if (Shipment_Date != null && Shipment_Date.Length > 100)
            {
                __errors.Add("Length of property 'Shipment_Date' cannot be greater than 100.");
            }
            if (Currency != null && Currency.Length > 100)
            {
                __errors.Add("Length of property 'Currency' cannot be greater than 100.");
            }
            if (Suggestion_Date != null && Suggestion_Date.Length > 100)
            {
                __errors.Add("Length of property 'Suggestion_Date' cannot be greater than 100.");
            }
            if (ApprovedBy != null && ApprovedBy.Length > 100)
            {
                __errors.Add("Length of property 'ApprovedBy' cannot be greater than 100.");
            }
            if (ApprovedDate != null && ApprovedDate.Length > 100)
            {
                __errors.Add("Length of property 'ApprovedDate' cannot be greater than 100.");
            }
            if (Owner != null && Owner.Length > 100)
            {
                __errors.Add("Length of property 'Owner' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'TblZslNormalisationSuggestion' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (SuggestionsId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Customer_Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Sender_Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Sender_Address?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Existing_Sender_City?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Normalised_Sender_City?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Sender_Country?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Sender_Zipcode?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Receiver_Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Receiver_Address?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Existing_Receiver_City?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Normalised_Receiver_City?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Existing_Pallet_Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Normalised_Pallet_Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Receiver_Zipcode?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Receiver_Country?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Carrier?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Order_Number?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Shipment_Date?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Weight?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Volume?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Cost?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Currency?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Number_Of_Pallets?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Suggestion_Date?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Approved.GetHashCode() );
            hashCode = hashCode * -1521134295 + (ApprovedBy?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ApprovedDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Owner?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [TblZslNormalisationSuggestion] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual TblZslNormalisationSuggestion Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, TblZslNormalisationSuggestion copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (TblZslNormalisationSuggestion)copiedObjects[this];
            copy = copy ?? new TblZslNormalisationSuggestion();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.SuggestionsId = this.SuggestionsId;
            }
            copy.Customer_Name = this.Customer_Name;
            copy.Sender_Name = this.Sender_Name;
            copy.Sender_Address = this.Sender_Address;
            copy.Existing_Sender_City = this.Existing_Sender_City;
            copy.Normalised_Sender_City = this.Normalised_Sender_City;
            copy.Sender_Country = this.Sender_Country;
            copy.Sender_Zipcode = this.Sender_Zipcode;
            copy.Receiver_Name = this.Receiver_Name;
            copy.Receiver_Address = this.Receiver_Address;
            copy.Existing_Receiver_City = this.Existing_Receiver_City;
            copy.Normalised_Receiver_City = this.Normalised_Receiver_City;
            copy.Existing_Pallet_Name = this.Existing_Pallet_Name;
            copy.Normalised_Pallet_Name = this.Normalised_Pallet_Name;
            copy.Receiver_Zipcode = this.Receiver_Zipcode;
            copy.Receiver_Country = this.Receiver_Country;
            copy.Carrier = this.Carrier;
            copy.Order_Number = this.Order_Number;
            copy.Shipment_Date = this.Shipment_Date;
            copy.Weight = this.Weight;
            copy.Volume = this.Volume;
            copy.Cost = this.Cost;
            copy.Currency = this.Currency;
            copy.Number_Of_Pallets = this.Number_Of_Pallets;
            copy.Suggestion_Date = this.Suggestion_Date;
            copy.Approved = this.Approved;
            copy.ApprovedBy = this.ApprovedBy;
            copy.ApprovedDate = this.ApprovedDate;
            copy.Owner = this.Owner;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as TblZslNormalisationSuggestion;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(TblZslNormalisationSuggestion x, TblZslNormalisationSuggestion y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(TblZslNormalisationSuggestion x, TblZslNormalisationSuggestion y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("SuggestionsId");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.SuggestionsId.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.SuggestionsId == default(long) || this.SuggestionsId.Equals(default(long));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(TblZslNormalisationSuggestion compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.SuggestionsId.Equals(compareTo.SuggestionsId);
        }

        #endregion


    }
}
