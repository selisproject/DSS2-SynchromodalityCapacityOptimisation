// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The OrderForecast class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class OrderForecast : IDomainModelClass
    {
        #region OrderForecast's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="ImportId")]
        protected int? importId;
        [DataMember(Name="Status")]
        protected string status;
        [DataMember(Name="CreatedBy")]
        protected string createdBy;
        [DataMember(Name="CreatedOn")]
        protected DateTime? createdOn;
        [DataMember(Name="StartDate")]
        protected DateTime? startDate;
        [DataMember(Name="EndDate")]
        protected DateTime? endDate;
        [DataMember(Name="State")]
        protected string state;
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region OrderForecast's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The ImportId property
///
/// </summary>
///
        public virtual int? ImportId
        {
            get
            {
                return importId;
            }
            set
            {
                importId = value;
            }
        }
/// <summary>
/// The Status property
///
/// </summary>
///
        public virtual string Status
        {
            get
            {
                return status;
            }
            set
            {
                status = value;
            }
        }
/// <summary>
/// The CreatedBy property
///
/// </summary>
///
        public virtual string CreatedBy
        {
            get
            {
                return createdBy;
            }
            set
            {
                createdBy = value;
            }
        }
/// <summary>
/// The CreatedOn property
///
/// </summary>
///
        public virtual DateTime? CreatedOn
        {
            get
            {
                return createdOn;
            }
            set
            {
                createdOn = value;
            }
        }
/// <summary>
/// The StartDate property
///
/// </summary>
///
        public virtual DateTime? StartDate
        {
            get
            {
                return startDate;
            }
            set
            {
                startDate = value;
            }
        }
/// <summary>
/// The EndDate property
///
/// </summary>
///
        public virtual DateTime? EndDate
        {
            get
            {
                return endDate;
            }
            set
            {
                endDate = value;
            }
        }
/// <summary>
/// The State property
///
/// </summary>
///
        public virtual string State
        {
            get
            {
                return state;
            }
            set
            {
                state = value;
            }
        }
        #endregion
        #region OrderForecast's Participant Properties
        [DataMember(Name="OrderForecastDetails")]
        protected IList<OrderForecastDetails> orderForecastDetails = new List<OrderForecastDetails>();
        public virtual List<OrderForecastDetails> OrderForecastDetails
        {
            get
            {
                if (orderForecastDetails is OrderForecastDetails[])
                {
                    orderForecastDetails = orderForecastDetails.ToList();
                }
                if (orderForecastDetails == null)
                {
                    orderForecastDetails = new List<OrderForecastDetails>();
                }
                return orderForecastDetails.ToList();
            }
            set
            {
                if (orderForecastDetails is OrderForecastDetails[])
                {
                    orderForecastDetails = orderForecastDetails.ToList();
                }
                if (orderForecastDetails != null)
                {
                    var __itemsToDelete = new List<OrderForecastDetails>(orderForecastDetails);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveOrderForecastDetails(__item);
                    }
                }
                if(value == null)
                {
                    orderForecastDetails = new List<OrderForecastDetails>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddOrderForecastDetails(__item);
                }
            }
        }
        public virtual void AddOrderForecastDetails(IList<OrderForecastDetails> __items)
        {
            foreach (var __item in __items)
            {
                AddOrderForecastDetails(__item);
            }
        }

        public virtual void InternalAddOrderForecastDetails(OrderForecastDetails __item)
        {
            if (__item == null || disableInternalAdditions) return;
            orderForecastDetails?.Add(__item);
        }

        public virtual void InternalRemoveOrderForecastDetails(OrderForecastDetails __item)
        {
            if (__item == null) return;
            orderForecastDetails?.Remove(__item);
        }

        public virtual void AddOrderForecastDetails(OrderForecastDetails __item)
        {
            if (__item == null) return;
            if (__item.OrderForecast != this)
                __item.OrderForecast = this;
        }

        public virtual void AddAtIndexOrderForecastDetails(int index, OrderForecastDetails __item)
        {
            if (__item == null) return;
            orderForecastDetails?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.OrderForecast != this)
                    __item.OrderForecast = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveOrderForecastDetails(OrderForecastDetails __item)
        {
            if (__item != null)
            {
                __item.OrderForecast = null;
            }
        }
        public virtual void SetOrderForecastDetailsAt(OrderForecastDetails __item, int __index)
        {
            if (__item == null)
            {
                orderForecastDetails[__index].OrderForecast = null;
            }
            else
            {
                orderForecastDetails[__index] = __item;
                if (__item.OrderForecast != this)
                    __item.OrderForecast = this;
            }
        }

        public virtual void ClearOrderForecastDetails()
        {
            if (orderForecastDetails!=null)
            {
                var __itemsToRemove = orderForecastDetails.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveOrderForecastDetails(__item);
                }
            }
        }
        [DataMember(Name="SalesForecast")]
        protected SalesForecast salesForecast;
        public virtual SalesForecast SalesForecast
        {
            get
            {
                return salesForecast;
            }
            set
            {
                if(Equals(salesForecast, value)) return;
                var __oldValue = salesForecast;
                salesForecast?.InternalRemoveOrderForecasts(this);
                salesForecast = value;
                if (value != null)
                {
                    salesForecast.InternalAddOrderForecasts(this);
                }
            }
        }
        [DataMember(Name="SupplierParameters")]
        protected IList<SupplierParameter> supplierParameters = new List<SupplierParameter>();
        public virtual List<SupplierParameter> SupplierParameters
        {
            get
            {
                if (supplierParameters is SupplierParameter[])
                {
                    supplierParameters = supplierParameters.ToList();
                }
                if (supplierParameters == null)
                {
                    supplierParameters = new List<SupplierParameter>();
                }
                return supplierParameters.ToList();
            }
            set
            {
                if (supplierParameters is SupplierParameter[])
                {
                    supplierParameters = supplierParameters.ToList();
                }
                if (supplierParameters != null)
                {
                    var __itemsToDelete = new List<SupplierParameter>(supplierParameters);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSupplierParameters(__item);
                    }
                }
                if(value == null)
                {
                    supplierParameters = new List<SupplierParameter>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSupplierParameters(__item);
                }
            }
        }
        public virtual void AddSupplierParameters(IList<SupplierParameter> __items)
        {
            foreach (var __item in __items)
            {
                AddSupplierParameters(__item);
            }
        }

        public virtual void InternalAddSupplierParameters(SupplierParameter __item)
        {
            if (__item == null || disableInternalAdditions) return;
            supplierParameters?.Add(__item);
        }

        public virtual void InternalRemoveSupplierParameters(SupplierParameter __item)
        {
            if (__item == null) return;
            supplierParameters?.Remove(__item);
        }

        public virtual void AddSupplierParameters(SupplierParameter __item)
        {
            if (__item == null) return;
            if (__item.OrderForecast != this)
                __item.OrderForecast = this;
        }

        public virtual void AddAtIndexSupplierParameters(int index, SupplierParameter __item)
        {
            if (__item == null) return;
            supplierParameters?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.OrderForecast != this)
                    __item.OrderForecast = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveSupplierParameters(SupplierParameter __item)
        {
            if (__item != null)
            {
                __item.OrderForecast = null;
            }
        }
        public virtual void SetSupplierParametersAt(SupplierParameter __item, int __index)
        {
            if (__item == null)
            {
                supplierParameters[__index].OrderForecast = null;
            }
            else
            {
                supplierParameters[__index] = __item;
                if (__item.OrderForecast != this)
                    __item.OrderForecast = this;
            }
        }

        public virtual void ClearSupplierParameters()
        {
            if (supplierParameters!=null)
            {
                var __itemsToRemove = supplierParameters.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSupplierParameters(__item);
                }
            }
        }
        [DataMember(Name="ItemParameters")]
        protected IList<ItemParameter> itemParameters = new List<ItemParameter>();
        public virtual List<ItemParameter> ItemParameters
        {
            get
            {
                if (itemParameters is ItemParameter[])
                {
                    itemParameters = itemParameters.ToList();
                }
                if (itemParameters == null)
                {
                    itemParameters = new List<ItemParameter>();
                }
                return itemParameters.ToList();
            }
            set
            {
                if (itemParameters is ItemParameter[])
                {
                    itemParameters = itemParameters.ToList();
                }
                if (itemParameters != null)
                {
                    var __itemsToDelete = new List<ItemParameter>(itemParameters);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveItemParameters(__item);
                    }
                }
                if(value == null)
                {
                    itemParameters = new List<ItemParameter>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddItemParameters(__item);
                }
            }
        }
        public virtual void AddItemParameters(IList<ItemParameter> __items)
        {
            foreach (var __item in __items)
            {
                AddItemParameters(__item);
            }
        }

        public virtual void InternalAddItemParameters(ItemParameter __item)
        {
            if (__item == null || disableInternalAdditions) return;
            itemParameters?.Add(__item);
        }

        public virtual void InternalRemoveItemParameters(ItemParameter __item)
        {
            if (__item == null) return;
            itemParameters?.Remove(__item);
        }

        public virtual void AddItemParameters(ItemParameter __item)
        {
            if (__item == null) return;
            InternalAddItemParameters(__item);
        }

        public virtual void AddAtIndexItemParameters(int index, ItemParameter __item)
        {
            if (__item == null) return;
            itemParameters?.Insert(index, __item);
        }

        public virtual void RemoveItemParameters(ItemParameter __item)
        {
            if (__item != null)
            {
                InternalRemoveItemParameters(__item);
            }
        }
        public virtual void SetItemParametersAt(ItemParameter __item, int __index)
        {
            if (__item == null)
            {
                itemParameters[__index] = null;
            }
            else
            {
                itemParameters[__index] = __item;
            }
        }

        public virtual void ClearItemParameters()
        {
            if (itemParameters!=null)
            {
                var __itemsToRemove = itemParameters.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveItemParameters(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the OrderForecast class
/// </summary>
/// <returns>New OrderForecast object</returns>
/// <remarks></remarks>
        public OrderForecast() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Status != null && Status.Length > 100)
            {
                __errors.Add("Length of property 'Status' cannot be greater than 100.");
            }
            if (CreatedBy != null && CreatedBy.Length > 100)
            {
                __errors.Add("Length of property 'CreatedBy' cannot be greater than 100.");
            }
            if (State != null && State.Length > 100)
            {
                __errors.Add("Length of property 'State' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'OrderForecast' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ImportId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Status?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CreatedBy?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CreatedOn?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (StartDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EndDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (State?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [OrderForecast] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual OrderForecast Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, OrderForecast copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (OrderForecast)copiedObjects[this];
            copy = copy ?? new OrderForecast();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.ImportId = this.ImportId;
            copy.Status = this.Status;
            copy.CreatedBy = this.CreatedBy;
            copy.CreatedOn = this.CreatedOn;
            copy.StartDate = this.StartDate;
            copy.EndDate = this.EndDate;
            copy.State = this.State;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.orderForecastDetails = new List<OrderForecastDetails>();
            if(deep && this.orderForecastDetails != null)
            {
                foreach (var __item in this.orderForecastDetails)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddOrderForecastDetails(__item);
                        else
                            copy.AddOrderForecastDetails(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddOrderForecastDetails((OrderForecastDetails)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.salesForecast != null)
            {
                if (!copiedObjects.Contains(this.salesForecast))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SalesForecast = this.SalesForecast;
                    else if (asNew)
                        copy.SalesForecast = this.SalesForecast.Copy(deep, copiedObjects, true);
                    else
                        copy.salesForecast = this.salesForecast.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SalesForecast = (SalesForecast)copiedObjects[this.SalesForecast];
                    else
                        copy.salesForecast = (SalesForecast)copiedObjects[this.SalesForecast];
                }
            }
            copy.supplierParameters = new List<SupplierParameter>();
            if(deep && this.supplierParameters != null)
            {
                foreach (var __item in this.supplierParameters)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSupplierParameters(__item);
                        else
                            copy.AddSupplierParameters(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSupplierParameters((SupplierParameter)copiedObjects[__item]);
                    }
                }
            }
            copy.itemParameters = new List<ItemParameter>();
            if(deep && this.itemParameters != null)
            {
                foreach (var __item in this.itemParameters)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddItemParameters(__item);
                        else
                            copy.AddItemParameters(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddItemParameters((ItemParameter)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as OrderForecast;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(OrderForecast x, OrderForecast y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(OrderForecast x, OrderForecast y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(OrderForecast compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
