// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The OrderForecastDetails class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class OrderForecastDetails : IDomainModelClass
    {
        #region OrderForecastDetails's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="ReplenishmentCycle")]
        protected int? replenishmentCycle;
        [DataMember(Name="AutomatedForecast")]
        protected int? automatedForecast;
        [DataMember(Name="Quantity")]
        protected decimal? quantity;
        [DataMember(Name="RoundQuantity")]
        protected int? roundQuantity;
        [DataMember(Name="OrderInventoryDays")]
        protected decimal? orderInventoryDays;
        [DataMember(Name="RecommendedOrderDate")]
        protected DateTime? recommendedOrderDate;
        [DataMember(Name="SalesForecastDate")]
        protected DateTime? salesForecastDate;
        [DataMember(Name="SupplierCanDeliver")]
        protected bool supplierCanDeliver;
        [DataMember(Name="SupplierMaxQuantity")]
        protected decimal? supplierMaxQuantity;
        [DataMember(Name="SupplierCoverageDays")]
        protected int? supplierCoverageDays;
        [DataMember(Name="ItemCoverageDays")]
        protected int? itemCoverageDays;
        [DataMember(Name="InitialStockLevel")]
        protected int? initialStockLevel;
        [DataMember(Name="SupplierAvailableQuantity")]
        protected int? supplierAvailableQuantity;
        [DataMember(Name="SupplierSharesStock")]
        protected bool supplierSharesStock;
        [DataMember(Name="CreatedOn")]
        protected DateTime? createdOn;
        [DataMember(Name="Status")]
        protected string status;
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region OrderForecastDetails's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The ReplenishmentCycle property
///
/// </summary>
///
        public virtual int? ReplenishmentCycle
        {
            get
            {
                return replenishmentCycle;
            }
            set
            {
                replenishmentCycle = value;
            }
        }
/// <summary>
/// The AutomatedForecast property
///
/// </summary>
///
        public virtual int? AutomatedForecast
        {
            get
            {
                return automatedForecast;
            }
            set
            {
                automatedForecast = value;
            }
        }
/// <summary>
/// The Quantity property
///
/// </summary>
///
        public virtual decimal? Quantity
        {
            get
            {
                return quantity;
            }
            set
            {
                quantity = value;
            }
        }
/// <summary>
/// The RoundQuantity property
///
/// </summary>
///
        public virtual int? RoundQuantity
        {
            get
            {
                var __valToGet = Get_RoundQuantity();
                return __valToGet;
            }
            set
            {
                roundQuantity = value;
            }
        }
/// <summary>
/// The OrderInventoryDays property
///
/// </summary>
///
        public virtual decimal? OrderInventoryDays
        {
            get
            {
                var __valToGet = Get_OrderInventoryDays();
                return __valToGet;
            }
            set
            {
                orderInventoryDays = value;
            }
        }
/// <summary>
/// The RecommendedOrderDate property
///
/// </summary>
///
        public virtual DateTime? RecommendedOrderDate
        {
            get
            {
                return recommendedOrderDate;
            }
            set
            {
                recommendedOrderDate = value;
            }
        }
/// <summary>
/// The SalesForecastDate property
///
/// </summary>
///
        public virtual DateTime? SalesForecastDate
        {
            get
            {
                return salesForecastDate;
            }
            set
            {
                salesForecastDate = value;
            }
        }
/// <summary>
/// The SupplierCanDeliver property
///
/// </summary>
///
        public virtual bool SupplierCanDeliver
        {
            get
            {
                return supplierCanDeliver;
            }
            set
            {
                supplierCanDeliver = value;
            }
        }
/// <summary>
/// The SupplierMaxQuantity property
///
/// </summary>
///
        public virtual decimal? SupplierMaxQuantity
        {
            get
            {
                return supplierMaxQuantity;
            }
            set
            {
                supplierMaxQuantity = value;
            }
        }
/// <summary>
/// The SupplierCoverageDays property
///
/// </summary>
///
        public virtual int? SupplierCoverageDays
        {
            get
            {
                return supplierCoverageDays;
            }
            set
            {
                supplierCoverageDays = value;
            }
        }
/// <summary>
/// The ItemCoverageDays property
///
/// </summary>
///
        public virtual int? ItemCoverageDays
        {
            get
            {
                return itemCoverageDays;
            }
            set
            {
                itemCoverageDays = value;
            }
        }
/// <summary>
/// The InitialStockLevel property
///
/// </summary>
///
        public virtual int? InitialStockLevel
        {
            get
            {
                return initialStockLevel;
            }
            set
            {
                initialStockLevel = value;
            }
        }
/// <summary>
/// The SupplierAvailableQuantity property
///
/// </summary>
///
        public virtual int? SupplierAvailableQuantity
        {
            get
            {
                return supplierAvailableQuantity;
            }
            set
            {
                supplierAvailableQuantity = value;
            }
        }
/// <summary>
/// The SupplierSharesStock property
///
/// </summary>
///
        public virtual bool SupplierSharesStock
        {
            get
            {
                return supplierSharesStock;
            }
            set
            {
                supplierSharesStock = value;
            }
        }
/// <summary>
/// The CreatedOn property
///
/// </summary>
///
        public virtual DateTime? CreatedOn
        {
            get
            {
                return createdOn;
            }
            set
            {
                createdOn = value;
            }
        }
/// <summary>
/// The Status property
///
/// </summary>
///
        public virtual string Status
        {
            get
            {
                return status;
            }
            set
            {
                status = value;
            }
        }
        #endregion
        #region OrderForecastDetails's Participant Properties
        [DataMember(Name="Warehouse")]
        protected Warehouse warehouse;
        public virtual Warehouse Warehouse
        {
            get
            {
                return warehouse;
            }
            set
            {
                if(Equals(warehouse, value)) return;
                var __oldValue = warehouse;
                if (value != null)
                {
                    warehouse = value;
                }
                else
                {
                    if (warehouse != null)
                    {
                        warehouse = null;
                    }
                }
            }
        }
        [DataMember(Name="Item")]
        protected Item item;
        public virtual Item Item
        {
            get
            {
                return item;
            }
            set
            {
                if(Equals(item, value)) return;
                var __oldValue = item;
                if (value != null)
                {
                    item = value;
                }
                else
                {
                    if (item != null)
                    {
                        item = null;
                    }
                }
            }
        }
        [DataMember(Name="OrderForecast")]
        protected OrderForecast orderForecast;
        public virtual OrderForecast OrderForecast
        {
            get
            {
                return orderForecast;
            }
            set
            {
                if(Equals(orderForecast, value)) return;
                var __oldValue = orderForecast;
                orderForecast?.InternalRemoveOrderForecastDetails(this);
                orderForecast = value;
                if (value != null)
                {
                    orderForecast.InternalAddOrderForecastDetails(this);
                }
            }
        }
        [DataMember(Name="Notification")]
        protected Notification notification;
        public virtual Notification Notification
        {
            get
            {
                return notification;
            }
            set
            {
                if(Equals(notification, value)) return;
                var __oldValue = notification;
                if (value != null)
                {
                    if(notification != null && !Equals(notification, value))
                        notification.OrderForecastDetails = null;
                    notification = value;
                    if(notification.OrderForecastDetails != this)
                        notification.OrderForecastDetails = this;
                }
                else
                {
                    if (notification != null)
                    {
                        var __obj = notification;
                        notification = null;
                        __obj.OrderForecastDetails = null;
                    }
                }
            }
        }
        [DataMember(Name="Comments")]
        protected IList<Comment> comments = new List<Comment>();
        public virtual List<Comment> Comments
        {
            get
            {
                if (comments is Comment[])
                {
                    comments = comments.ToList();
                }
                if (comments == null)
                {
                    comments = new List<Comment>();
                }
                return comments.ToList();
            }
            set
            {
                if (comments is Comment[])
                {
                    comments = comments.ToList();
                }
                if (comments != null)
                {
                    var __itemsToDelete = new List<Comment>(comments);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveComments(__item);
                    }
                }
                if(value == null)
                {
                    comments = new List<Comment>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddComments(__item);
                }
            }
        }
        public virtual void AddComments(IList<Comment> __items)
        {
            foreach (var __item in __items)
            {
                AddComments(__item);
            }
        }

        public virtual void InternalAddComments(Comment __item)
        {
            if (__item == null || disableInternalAdditions) return;
            comments?.Add(__item);
        }

        public virtual void InternalRemoveComments(Comment __item)
        {
            if (__item == null) return;
            comments?.Remove(__item);
        }

        public virtual void AddComments(Comment __item)
        {
            if (__item == null) return;
            InternalAddComments(__item);
        }

        public virtual void AddAtIndexComments(int index, Comment __item)
        {
            if (__item == null) return;
            comments?.Insert(index, __item);
        }

        public virtual void RemoveComments(Comment __item)
        {
            if (__item != null)
            {
                InternalRemoveComments(__item);
            }
        }
        public virtual void SetCommentsAt(Comment __item, int __index)
        {
            if (__item == null)
            {
                comments[__index] = null;
            }
            else
            {
                comments[__index] = __item;
            }
        }

        public virtual void ClearComments()
        {
            if (comments!=null)
            {
                var __itemsToRemove = comments.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveComments(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the OrderForecastDetails class
/// </summary>
/// <returns>New OrderForecastDetails object</returns>
/// <remarks></remarks>
        public OrderForecastDetails() {}
        #endregion
        #region Accessors Implementation
        private int? Get_RoundQuantity()
        {
            int? minQuantity = ((this?.item?.MinimumQuantity?.Quantity?.ToString() ?? "") == null || (this?.item?.MinimumQuantity?.Quantity?.ToString() ?? "") == "") ? 0 : (this?.item?.MinimumQuantity?.Quantity ?? 0);
            if (minQuantity == 0)
            {
                return 0;
            }
            return (int)((((int)((((this?.quantity ?? 0) / minQuantity.GetValueOrDefault(0)) + 1))) * minQuantity.GetValueOrDefault(0)));
        }

        private decimal? Get_OrderInventoryDays()
        {
            return 0;
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Status != null && Status.Length > 100)
            {
                __errors.Add("Length of property 'Status' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'OrderForecastDetails' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ReplenishmentCycle?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AutomatedForecast?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Quantity?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RoundQuantity?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderInventoryDays?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RecommendedOrderDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SalesForecastDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SupplierCanDeliver.GetHashCode() );
            hashCode = hashCode * -1521134295 + (SupplierMaxQuantity?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SupplierCoverageDays?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ItemCoverageDays?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (InitialStockLevel?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SupplierAvailableQuantity?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SupplierSharesStock.GetHashCode() );
            hashCode = hashCode * -1521134295 + (CreatedOn?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Status?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [OrderForecastDetails] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual OrderForecastDetails Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, OrderForecastDetails copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (OrderForecastDetails)copiedObjects[this];
            copy = copy ?? new OrderForecastDetails();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.ReplenishmentCycle = this.ReplenishmentCycle;
            copy.AutomatedForecast = this.AutomatedForecast;
            copy.Quantity = this.Quantity;
            copy.RoundQuantity = this.RoundQuantity;
            copy.OrderInventoryDays = this.OrderInventoryDays;
            copy.RecommendedOrderDate = this.RecommendedOrderDate;
            copy.SalesForecastDate = this.SalesForecastDate;
            copy.SupplierCanDeliver = this.SupplierCanDeliver;
            copy.SupplierMaxQuantity = this.SupplierMaxQuantity;
            copy.SupplierCoverageDays = this.SupplierCoverageDays;
            copy.ItemCoverageDays = this.ItemCoverageDays;
            copy.InitialStockLevel = this.InitialStockLevel;
            copy.SupplierAvailableQuantity = this.SupplierAvailableQuantity;
            copy.SupplierSharesStock = this.SupplierSharesStock;
            copy.CreatedOn = this.CreatedOn;
            copy.Status = this.Status;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.warehouse != null)
            {
                if (!copiedObjects.Contains(this.warehouse))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Warehouse = this.Warehouse;
                    else if (asNew)
                        copy.Warehouse = this.Warehouse.Copy(deep, copiedObjects, true);
                    else
                        copy.warehouse = this.warehouse.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Warehouse = (Warehouse)copiedObjects[this.Warehouse];
                    else
                        copy.warehouse = (Warehouse)copiedObjects[this.Warehouse];
                }
            }
            if(deep && this.item != null)
            {
                if (!copiedObjects.Contains(this.item))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Item = this.Item;
                    else if (asNew)
                        copy.Item = this.Item.Copy(deep, copiedObjects, true);
                    else
                        copy.item = this.item.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Item = (Item)copiedObjects[this.Item];
                    else
                        copy.item = (Item)copiedObjects[this.Item];
                }
            }
            if(deep && this.orderForecast != null)
            {
                if (!copiedObjects.Contains(this.orderForecast))
                {
                    if (asNew && reuseNestedObjects)
                        copy.OrderForecast = this.OrderForecast;
                    else if (asNew)
                        copy.OrderForecast = this.OrderForecast.Copy(deep, copiedObjects, true);
                    else
                        copy.orderForecast = this.orderForecast.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.OrderForecast = (OrderForecast)copiedObjects[this.OrderForecast];
                    else
                        copy.orderForecast = (OrderForecast)copiedObjects[this.OrderForecast];
                }
            }
            if(deep && this.notification != null)
            {
                if (!copiedObjects.Contains(this.notification))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Notification = this.Notification;
                    else if (asNew)
                        copy.Notification = this.Notification.Copy(deep, copiedObjects, true);
                    else
                        copy.notification = this.notification.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Notification = (Notification)copiedObjects[this.Notification];
                    else
                        copy.notification = (Notification)copiedObjects[this.Notification];
                }
            }
            copy.comments = new List<Comment>();
            if(deep && this.comments != null)
            {
                foreach (var __item in this.comments)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddComments(__item);
                        else
                            copy.AddComments(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddComments((Comment)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as OrderForecastDetails;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(OrderForecastDetails x, OrderForecastDetails y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(OrderForecastDetails x, OrderForecastDetails y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(OrderForecastDetails compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
