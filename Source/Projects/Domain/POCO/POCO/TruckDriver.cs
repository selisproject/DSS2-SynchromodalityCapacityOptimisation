// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    /// <summary>
    /// The TruckDriver class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    [KnownType(typeof(ApplicationUser))]

    public class TruckDriver : ApplicationUser, IDomainModelClass
    {
        #region TruckDriver's Fields
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region TruckDriver's Participant Properties
        [DataMember(Name="ProofOfDelivery")]
        protected IList<ProofOfDelivery> proofOfDelivery = new List<ProofOfDelivery>();
        public virtual List<ProofOfDelivery> ProofOfDelivery
        {
            get
            {
                if (proofOfDelivery is ProofOfDelivery[])
                {
                    proofOfDelivery = proofOfDelivery.ToList();
                }
                if (proofOfDelivery == null)
                {
                    proofOfDelivery = new List<ProofOfDelivery>();
                }
                return proofOfDelivery.ToList();
            }
            set
            {
                if (proofOfDelivery is ProofOfDelivery[])
                {
                    proofOfDelivery = proofOfDelivery.ToList();
                }
                if (proofOfDelivery != null)
                {
                    var __itemsToDelete = new List<ProofOfDelivery>(proofOfDelivery);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveProofOfDelivery(__item);
                    }
                }
                if(value == null)
                {
                    proofOfDelivery = new List<ProofOfDelivery>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddProofOfDelivery(__item);
                }
            }
        }
        public virtual void AddProofOfDelivery(IList<ProofOfDelivery> __items)
        {
            foreach (var __item in __items)
            {
                AddProofOfDelivery(__item);
            }
        }

        public virtual void InternalAddProofOfDelivery(ProofOfDelivery __item)
        {
            if (__item == null || disableInternalAdditions) return;
            proofOfDelivery?.Add(__item);
        }

        public virtual void InternalRemoveProofOfDelivery(ProofOfDelivery __item)
        {
            if (__item == null) return;
            proofOfDelivery?.Remove(__item);
        }

        public virtual void AddProofOfDelivery(ProofOfDelivery __item)
        {
            if (__item == null) return;
            if (__item.TruckDriver != this)
                __item.TruckDriver = this;
        }

        public virtual void AddAtIndexProofOfDelivery(int index, ProofOfDelivery __item)
        {
            if (__item == null) return;
            proofOfDelivery?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.TruckDriver != this)
                    __item.TruckDriver = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveProofOfDelivery(ProofOfDelivery __item)
        {
            if (__item != null)
            {
                __item.TruckDriver = null;
            }
        }
        public virtual void SetProofOfDeliveryAt(ProofOfDelivery __item, int __index)
        {
            if (__item == null)
            {
                proofOfDelivery[__index].TruckDriver = null;
            }
            else
            {
                proofOfDelivery[__index] = __item;
                if (__item.TruckDriver != this)
                    __item.TruckDriver = this;
            }
        }

        public virtual void ClearProofOfDelivery()
        {
            if (proofOfDelivery!=null)
            {
                var __itemsToRemove = proofOfDelivery.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveProofOfDelivery(__item);
                }
            }
        }
        [DataMember(Name="Truck")]
        protected Truck truck;
        public virtual Truck Truck
        {
            get
            {
                return truck;
            }
            set
            {
                if(Equals(truck, value)) return;
                var __oldValue = truck;
                if (value != null)
                {
                    if(truck != null && !Equals(truck, value))
                        truck.TruckDriver = null;
                    truck = value;
                    if(truck.TruckDriver != this)
                        truck.TruckDriver = this;
                }
                else
                {
                    if (truck != null)
                    {
                        var __obj = truck;
                        truck = null;
                        __obj.TruckDriver = null;
                    }
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the TruckDriver class
/// </summary>
/// <returns>New TruckDriver object</returns>
/// <remarks></remarks>
        public TruckDriver(): base() {}
        #endregion
        #region Methods

        public override List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            __errors = base._Validate(throwException);
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'TruckDriver' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (UserName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PasswordHash?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecurityStamp?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EmailConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (LockoutEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (PhoneNumberConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (TwoFactorEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (AccessFailedCount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Email?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PhoneNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LockoutEndDate?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [TruckDriver] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual TruckDriver Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, TruckDriver copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (TruckDriver)copiedObjects[this];
            copy = copy ?? new TruckDriver();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
            }
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.proofOfDelivery = new List<ProofOfDelivery>();
            if(deep && this.proofOfDelivery != null)
            {
                foreach (var __item in this.proofOfDelivery)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddProofOfDelivery(__item);
                        else
                            copy.AddProofOfDelivery(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddProofOfDelivery((ProofOfDelivery)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.truck != null)
            {
                if (!copiedObjects.Contains(this.truck))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Truck = this.Truck;
                    else if (asNew)
                        copy.Truck = this.Truck.Copy(deep, copiedObjects, true);
                    else
                        copy.truck = this.truck.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Truck = (Truck)copiedObjects[this.Truck];
                    else
                        copy.truck = (Truck)copiedObjects[this.Truck];
                }
            }
            base.Copy(deep, copiedObjects, asNew, reuseNestedObjects, copy);
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as TruckDriver;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(TruckDriver x, TruckDriver y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(TruckDriver x, TruckDriver y)
        {
            return !(x == y);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion


    }
}
