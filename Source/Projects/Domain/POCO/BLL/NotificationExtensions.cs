
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The Notification extensions
	/// </summary>
	public static class NotificationExtensions
	{
        public static void CreateNotifications(DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast orderForecast){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Notification", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CreateNotifications")) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Notification",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Creating Alerts for Order Forecast: " + (orderForecast?.Id ?? 0));
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> forecastOrderDetails = orderForecast?.OrderForecastDetails;
foreach (var order in forecastOrderDetails ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>()) {
if ((order?.Notification != null)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Notification",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "---- Deleting " + (order?.Notification?.Id ?? 0) + "----");
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().DeleteNotification(order?.Notification);
}
DSS2_SynchromodalityCapacityOptimisation.BO.Item currItem = order?.Item;
var _var0 = currItem?.SKU;var _var1 = order?.RecommendedOrderDate?.Date;DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity supplierCapacity = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>((a) => a.Item.SKU == _var0 && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var1)?.FirstOrDefault();
if ((supplierCapacity == null || supplierCapacity?.Stock == 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Notification",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Don't have supplier capacity for item : " + (currItem?.SKU ?? ""));
continue;}
int? totalStock = (supplierCapacity?.Stock ?? 0);
int? orderQuantity = (int)((order?.Quantity ?? 0));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Notification",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "totalStock " + (totalStock?.ToString() ?? "") + " : orderQuantity" + (orderQuantity?.ToString() ?? ""));
if ((totalStock < orderQuantity)) {
DSS2_SynchromodalityCapacityOptimisation.BO.Notification notification = new DSS2_SynchromodalityCapacityOptimisation.BO.Notification();
notification.Message = "Low Stock";notification.Item = currItem;notification.Warehouse = order?.Warehouse;notification.TotalSupplierStock = totalStock;notification.SalesForecastDate = (order?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);notification.OrderForecastQuantity = orderQuantity;notification.Diff = orderQuantity.GetValueOrDefault(0) - totalStock.GetValueOrDefault(0);notification.OrderForecastDetails = order;notification.CreatedBy = "System";new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.Notification>(notification);
zAppDev.DotNet.Framework.Utilities.EMailMessage em = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
em.To = new List<string> { "c.platsatoura@clmsuk.com" }.ToList();em.Subject = "New Alert";em.IsBodyHtml = true;em.Body = "A new alert is created due to low stock " + "for the Item: " + (notification?.Item?.SKU ?? "");zAppDev.DotNet.Framework.Utilities.Email.SendMail(em, true);
}
string recommendationThresholdPercentString = zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting.GetValue("RecommendationThresholdPercent");
if (((recommendationThresholdPercentString == null || recommendationThresholdPercentString.Trim() == ""))) {
continue;}
int? recommendationThresholdPercent = int.Parse(recommendationThresholdPercentString);
if ((100 * (totalStock.GetValueOrDefault(0) - orderQuantity.GetValueOrDefault(0)) / totalStock.GetValueOrDefault(0) >= recommendationThresholdPercent)) {
DSS2_SynchromodalityCapacityOptimisation.BO.Notification notification = new DSS2_SynchromodalityCapacityOptimisation.BO.Notification();
notification.Message = "Excess of Stock";notification.Item = currItem;notification.Warehouse = order?.Warehouse;notification.TotalSupplierStock = totalStock;notification.SalesForecastDate = (order?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);notification.OrderForecastQuantity = orderQuantity;notification.Diff = totalStock.GetValueOrDefault(0) - orderQuantity.GetValueOrDefault(0);notification.OrderForecastDetails = order;notification.CreatedBy = "System";new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.Notification>(notification);
}
}
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Notification> GetNotifications(string sku, int? supplierId, int? businessUnitId, int? warehouseId, int? categoryId, int? subCategoryId, int? baseUnitId, DateTime? fromDate, DateTime? toDate){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Notification", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetNotifications")) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Notification",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "WH: " + warehouseId.GetValueOrDefault(0));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Notification",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Getting Notifications...");
var _var2 = fromDate?.Date;var _var3 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var4 = toDate?.Date;var _var5 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);return new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.Notification>((a) => ((sku == null || sku.Trim() == "") || a.Item.SKU == sku) && (warehouseId == 0 || a.Warehouse.Id == warehouseId) && (supplierId == 0 || a.Item.Supplier.Id == supplierId) && (businessUnitId == 0 || a.Item.BusinessUnit.Id == businessUnitId) && (categoryId == 0 || a.Item.Category.Id == categoryId) && (subCategoryId == 0 || a.Item.SubCategory.Id == subCategoryId) && (baseUnitId == 0 || a.Item.BaseUnit.Id == baseUnitId) && (_var2 == null || a.SalesForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var3) && (_var4 == null || a.SalesForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var5));
}
}


public static void CreateNotificationsForAll(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Notification", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CreateNotificationsForAll")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast> orderForecasts = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast>();
foreach (var forecast in orderForecasts ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.NotificationExtensions.CreateNotifications(forecast);
}
}
}



        
	}
}
