// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Linq;
using System.Collections.Generic;
using log4net;
using System.Collections.ObjectModel;
using System.Data;

namespace DSS2_SynchromodalityCapacityOptimisation.BO.ElasticsearchDataTransformation
{
    public class Transformer
    {

        #region Transformation 'Hit_To_RequestLog'





        // Left To Right

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit, DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog> Hit_To_RequestLog_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit, DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog Hit_To_RequestLog(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit interfacesElasticsearchHitInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchHitInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog);
            // If the same Transformation has already ran, get the stored Output and return
            if(Hit_To_RequestLog_Transformations.ContainsKey(interfacesElasticsearchHitInput))
            {
                return Hit_To_RequestLog_Transformations[interfacesElasticsearchHitInput];
            }
            // Instantiate target root
            var domainRequestLogOutput = new DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog();
            Hit_To_RequestLog_Transformations.Add(interfacesElasticsearchHitInput, domainRequestLogOutput);
            // Hit.RequestUri to RequestLog.RequestUri
            domainRequestLogOutput.RequestUri = interfacesElasticsearchHitInput?.RequestUri;
            // Hit.Username to RequestLog.Username
            domainRequestLogOutput.Username = interfacesElasticsearchHitInput?.Username;
            // Hit.Operation to RequestLog.Operation
            domainRequestLogOutput.Operation = interfacesElasticsearchHitInput?.Operation;
            // Hit.Message to RequestLog.Message
            domainRequestLogOutput.Message = interfacesElasticsearchHitInput?.Message;
            // Hit.RequestId to RequestLog.RequestId
            domainRequestLogOutput.RequestId = interfacesElasticsearchHitInput?.RequestId;
            // Hit.RequestMethod to RequestLog.RequestMethod
            domainRequestLogOutput.RequestMethod = interfacesElasticsearchHitInput?.RequestMethod;
            // Hit.ElapsedMsecs to RequestLog.ElapsedMsecs
            domainRequestLogOutput.ElapsedMsecs =  interfacesElasticsearchHitInput?.ElapsedMsecs == null ? null : zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableDouble(interfacesElasticsearchHitInput?.ElapsedMsecs.ToString());
            // Hit.IP to RequestLog.IP
            domainRequestLogOutput.IP = interfacesElasticsearchHitInput?.IP;
            // Hit.Service to RequestLog.Service
            domainRequestLogOutput.Service = interfacesElasticsearchHitInput?.Service;
            // Hit.RequestPath to RequestLog.RequestPath
            domainRequestLogOutput.RequestPath = interfacesElasticsearchHitInput?.RequestPath;
            // Hit.StatusCode to RequestLog.StatusCode
            domainRequestLogOutput.StatusCode = interfacesElasticsearchHitInput?.StatusCode.ToString();
            // Hit.Timestamp to RequestLog.Timestamp
            domainRequestLogOutput.Timestamp = interfacesElasticsearchHitInput?.Timestamp.ToString();
            // Hit.ClientId to RequestLog.ClientId
            domainRequestLogOutput.ClientId = interfacesElasticsearchHitInput?.ClientId;
            // Hit.ClientName to RequestLog.ClientName
            domainRequestLogOutput.ClientName = interfacesElasticsearchHitInput?.ClientName;
            // Hit.Product to RequestLog.ProductName
            domainRequestLogOutput.ProductName = interfacesElasticsearchHitInput?.Product;
            return domainRequestLogOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit, DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog> Hit_To_RequestLog_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit, DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog Hit_To_RequestLog(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit interfacesElasticsearchHitInput, DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog domainRequestLogInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchHitInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog);
            if(domainRequestLogInstance == null)
                return Hit_To_RequestLog (interfacesElasticsearchHitInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Hit_To_RequestLog_MappingTransformations.ContainsKey(interfacesElasticsearchHitInput))
            {
                return Hit_To_RequestLog_MappingTransformations[interfacesElasticsearchHitInput];
            }
            // Instantiate target root
            var domainRequestLogOutput = domainRequestLogInstance;
            Hit_To_RequestLog_MappingTransformations.Add(interfacesElasticsearchHitInput, domainRequestLogOutput);
            // Hit.RequestUri to RequestLog.RequestUri
            domainRequestLogOutput.RequestUri = interfacesElasticsearchHitInput?.RequestUri;
            // Hit.Username to RequestLog.Username
            domainRequestLogOutput.Username = interfacesElasticsearchHitInput?.Username;
            // Hit.Operation to RequestLog.Operation
            domainRequestLogOutput.Operation = interfacesElasticsearchHitInput?.Operation;
            // Hit.Message to RequestLog.Message
            domainRequestLogOutput.Message = interfacesElasticsearchHitInput?.Message;
            // Hit.RequestId to RequestLog.RequestId
            domainRequestLogOutput.RequestId = interfacesElasticsearchHitInput?.RequestId;
            // Hit.RequestMethod to RequestLog.RequestMethod
            domainRequestLogOutput.RequestMethod = interfacesElasticsearchHitInput?.RequestMethod;
            // Hit.ElapsedMsecs to RequestLog.ElapsedMsecs
            domainRequestLogOutput.ElapsedMsecs =  interfacesElasticsearchHitInput?.ElapsedMsecs == null ? null : zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableDouble(interfacesElasticsearchHitInput?.ElapsedMsecs.ToString());
            // Hit.IP to RequestLog.IP
            domainRequestLogOutput.IP = interfacesElasticsearchHitInput?.IP;
            // Hit.Service to RequestLog.Service
            domainRequestLogOutput.Service = interfacesElasticsearchHitInput?.Service;
            // Hit.RequestPath to RequestLog.RequestPath
            domainRequestLogOutput.RequestPath = interfacesElasticsearchHitInput?.RequestPath;
            // Hit.StatusCode to RequestLog.StatusCode
            domainRequestLogOutput.StatusCode = interfacesElasticsearchHitInput?.StatusCode.ToString();
            // Hit.Timestamp to RequestLog.Timestamp
            domainRequestLogOutput.Timestamp = interfacesElasticsearchHitInput?.Timestamp.ToString();
            // Hit.ClientId to RequestLog.ClientId
            domainRequestLogOutput.ClientId = interfacesElasticsearchHitInput?.ClientId;
            // Hit.ClientName to RequestLog.ClientName
            domainRequestLogOutput.ClientName = interfacesElasticsearchHitInput?.ClientName;
            // Hit.Product to RequestLog.ProductName
            domainRequestLogOutput.ProductName = interfacesElasticsearchHitInput?.Product;
            return domainRequestLogOutput;
        }

        // Right To Left

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit> Hit_To_RequestLogReversed_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit Hit_To_RequestLogReversed(DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog domainRequestLogInput)
        {
            //Leave, if there is nothing to transform
            if(domainRequestLogInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit);
            // If the same Transformation has already ran, get the stored Output and return
            if(Hit_To_RequestLogReversed_Transformations.ContainsKey(domainRequestLogInput))
            {
                return Hit_To_RequestLogReversed_Transformations[domainRequestLogInput];
            }
            // Instantiate target root
            var interfacesElasticsearchHitOutput = new DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit();
            Hit_To_RequestLogReversed_Transformations.Add(domainRequestLogInput, interfacesElasticsearchHitOutput);
            // RequestLog.RequestUri to Hit.RequestUri
            interfacesElasticsearchHitOutput.RequestUri = domainRequestLogInput?.RequestUri;
            // RequestLog.Username to Hit.Username
            interfacesElasticsearchHitOutput.Username = domainRequestLogInput?.Username;
            // RequestLog.Operation to Hit.Operation
            interfacesElasticsearchHitOutput.Operation = domainRequestLogInput?.Operation;
            // RequestLog.Message to Hit.Message
            interfacesElasticsearchHitOutput.Message = domainRequestLogInput?.Message;
            // RequestLog.RequestId to Hit.RequestId
            interfacesElasticsearchHitOutput.RequestId = domainRequestLogInput?.RequestId;
            // RequestLog.RequestMethod to Hit.RequestMethod
            interfacesElasticsearchHitOutput.RequestMethod = domainRequestLogInput?.RequestMethod;
            // RequestLog.ElapsedMsecs to Hit.ElapsedMsecs
            interfacesElasticsearchHitOutput.ElapsedMsecs =  domainRequestLogInput?.ElapsedMsecs == null ? null : zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableFloat(domainRequestLogInput?.ElapsedMsecs.ToString());
            // RequestLog.IP to Hit.IP
            interfacesElasticsearchHitOutput.IP = domainRequestLogInput?.IP;
            // RequestLog.Service to Hit.Service
            interfacesElasticsearchHitOutput.Service = domainRequestLogInput?.Service;
            // RequestLog.RequestPath to Hit.RequestPath
            interfacesElasticsearchHitOutput.RequestPath = domainRequestLogInput?.RequestPath;
            // RequestLog.StatusCode to Hit.StatusCode
            interfacesElasticsearchHitOutput.StatusCode = zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableInt(domainRequestLogInput?.StatusCode.ToString());
            // RequestLog.Timestamp to Hit.Timestamp
            interfacesElasticsearchHitOutput.Timestamp = zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableDateTime(domainRequestLogInput?.Timestamp.ToString());
            // RequestLog.ClientId to Hit.ClientId
            interfacesElasticsearchHitOutput.ClientId = domainRequestLogInput?.ClientId;
            // RequestLog.ClientName to Hit.ClientName
            interfacesElasticsearchHitOutput.ClientName = domainRequestLogInput?.ClientName;
            // RequestLog.ProductName to Hit.Product
            interfacesElasticsearchHitOutput.Product = domainRequestLogInput?.ProductName;
            return interfacesElasticsearchHitOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit> Hit_To_RequestLogReversed_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit Hit_To_RequestLogReversed(DSS2_SynchromodalityCapacityOptimisation.BO.RequestLog domainRequestLogInput, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit interfacesElasticsearchHitInstance)
        {
            //Leave, if there is nothing to transform
            if(domainRequestLogInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Hit);
            if(interfacesElasticsearchHitInstance == null)
                return Hit_To_RequestLogReversed (domainRequestLogInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Hit_To_RequestLogReversed_MappingTransformations.ContainsKey(domainRequestLogInput))
            {
                return Hit_To_RequestLogReversed_MappingTransformations[domainRequestLogInput];
            }
            // Instantiate target root
            var interfacesElasticsearchHitOutput = interfacesElasticsearchHitInstance;
            Hit_To_RequestLogReversed_MappingTransformations.Add(domainRequestLogInput, interfacesElasticsearchHitOutput);
            // RequestLog.RequestUri to Hit.RequestUri
            interfacesElasticsearchHitOutput.RequestUri = domainRequestLogInput?.RequestUri;
            // RequestLog.Username to Hit.Username
            interfacesElasticsearchHitOutput.Username = domainRequestLogInput?.Username;
            // RequestLog.Operation to Hit.Operation
            interfacesElasticsearchHitOutput.Operation = domainRequestLogInput?.Operation;
            // RequestLog.Message to Hit.Message
            interfacesElasticsearchHitOutput.Message = domainRequestLogInput?.Message;
            // RequestLog.RequestId to Hit.RequestId
            interfacesElasticsearchHitOutput.RequestId = domainRequestLogInput?.RequestId;
            // RequestLog.RequestMethod to Hit.RequestMethod
            interfacesElasticsearchHitOutput.RequestMethod = domainRequestLogInput?.RequestMethod;
            // RequestLog.ElapsedMsecs to Hit.ElapsedMsecs
            interfacesElasticsearchHitOutput.ElapsedMsecs =  domainRequestLogInput?.ElapsedMsecs == null ? null : zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableFloat(domainRequestLogInput?.ElapsedMsecs.ToString());
            // RequestLog.IP to Hit.IP
            interfacesElasticsearchHitOutput.IP = domainRequestLogInput?.IP;
            // RequestLog.Service to Hit.Service
            interfacesElasticsearchHitOutput.Service = domainRequestLogInput?.Service;
            // RequestLog.RequestPath to Hit.RequestPath
            interfacesElasticsearchHitOutput.RequestPath = domainRequestLogInput?.RequestPath;
            // RequestLog.StatusCode to Hit.StatusCode
            interfacesElasticsearchHitOutput.StatusCode = zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableInt(domainRequestLogInput?.StatusCode.ToString());
            // RequestLog.Timestamp to Hit.Timestamp
            interfacesElasticsearchHitOutput.Timestamp = zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableDateTime(domainRequestLogInput?.Timestamp.ToString());
            // RequestLog.ClientId to Hit.ClientId
            interfacesElasticsearchHitOutput.ClientId = domainRequestLogInput?.ClientId;
            // RequestLog.ClientName to Hit.ClientName
            interfacesElasticsearchHitOutput.ClientName = domainRequestLogInput?.ClientName;
            // RequestLog.ProductName to Hit.Product
            interfacesElasticsearchHitOutput.Product = domainRequestLogInput?.ProductName;
            return interfacesElasticsearchHitOutput;
        }

        #endregion

        #region Transformation 'ELKBucket_To_Bucket'





        // Left To Right

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket, DSS2_SynchromodalityCapacityOptimisation.BO.Buckets> ELKBucket_To_Bucket_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket, DSS2_SynchromodalityCapacityOptimisation.BO.Buckets>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.Buckets ELKBucket_To_Bucket(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket interfacesElasticsearchBucketInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.Buckets);
            // If the same Transformation has already ran, get the stored Output and return
            if(ELKBucket_To_Bucket_Transformations.ContainsKey(interfacesElasticsearchBucketInput))
            {
                return ELKBucket_To_Bucket_Transformations[interfacesElasticsearchBucketInput];
            }
            // Instantiate target root
            var domainBucketsOutput = new DSS2_SynchromodalityCapacityOptimisation.BO.Buckets();
            ELKBucket_To_Bucket_Transformations.Add(interfacesElasticsearchBucketInput, domainBucketsOutput);
            // Bucket.key to Buckets.key
            domainBucketsOutput.key = interfacesElasticsearchBucketInput?.key;
            // Bucket.doc_count to Buckets.doc_count
            domainBucketsOutput.doc_count = interfacesElasticsearchBucketInput?.doc_count;
            return domainBucketsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket, DSS2_SynchromodalityCapacityOptimisation.BO.Buckets> ELKBucket_To_Bucket_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket, DSS2_SynchromodalityCapacityOptimisation.BO.Buckets>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.Buckets ELKBucket_To_Bucket(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket interfacesElasticsearchBucketInput, DSS2_SynchromodalityCapacityOptimisation.BO.Buckets domainBucketsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.Buckets);
            if(domainBucketsInstance == null)
                return ELKBucket_To_Bucket (interfacesElasticsearchBucketInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ELKBucket_To_Bucket_MappingTransformations.ContainsKey(interfacesElasticsearchBucketInput))
            {
                return ELKBucket_To_Bucket_MappingTransformations[interfacesElasticsearchBucketInput];
            }
            // Instantiate target root
            var domainBucketsOutput = domainBucketsInstance;
            ELKBucket_To_Bucket_MappingTransformations.Add(interfacesElasticsearchBucketInput, domainBucketsOutput);
            // Bucket.key to Buckets.key
            domainBucketsOutput.key = interfacesElasticsearchBucketInput?.key;
            // Bucket.doc_count to Buckets.doc_count
            domainBucketsOutput.doc_count = interfacesElasticsearchBucketInput?.doc_count;
            return domainBucketsOutput;
        }

        // Right To Left

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.Buckets, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket> ELKBucket_To_BucketReversed_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.Buckets, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket ELKBucket_To_BucketReversed(DSS2_SynchromodalityCapacityOptimisation.BO.Buckets domainBucketsInput)
        {
            //Leave, if there is nothing to transform
            if(domainBucketsInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket);
            // If the same Transformation has already ran, get the stored Output and return
            if(ELKBucket_To_BucketReversed_Transformations.ContainsKey(domainBucketsInput))
            {
                return ELKBucket_To_BucketReversed_Transformations[domainBucketsInput];
            }
            // Instantiate target root
            var interfacesElasticsearchBucketOutput = new DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket();
            ELKBucket_To_BucketReversed_Transformations.Add(domainBucketsInput, interfacesElasticsearchBucketOutput);
            // Buckets.key to Bucket.key
            interfacesElasticsearchBucketOutput.key = domainBucketsInput?.key;
            // Buckets.doc_count to Bucket.doc_count
            interfacesElasticsearchBucketOutput.doc_count = domainBucketsInput?.doc_count;
            return interfacesElasticsearchBucketOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.Buckets, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket> ELKBucket_To_BucketReversed_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.Buckets, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket ELKBucket_To_BucketReversed(DSS2_SynchromodalityCapacityOptimisation.BO.Buckets domainBucketsInput, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket interfacesElasticsearchBucketInstance)
        {
            //Leave, if there is nothing to transform
            if(domainBucketsInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.Bucket);
            if(interfacesElasticsearchBucketInstance == null)
                return ELKBucket_To_BucketReversed (domainBucketsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ELKBucket_To_BucketReversed_MappingTransformations.ContainsKey(domainBucketsInput))
            {
                return ELKBucket_To_BucketReversed_MappingTransformations[domainBucketsInput];
            }
            // Instantiate target root
            var interfacesElasticsearchBucketOutput = interfacesElasticsearchBucketInstance;
            ELKBucket_To_BucketReversed_MappingTransformations.Add(domainBucketsInput, interfacesElasticsearchBucketOutput);
            // Buckets.key to Bucket.key
            interfacesElasticsearchBucketOutput.key = domainBucketsInput?.key;
            // Buckets.doc_count to Bucket.doc_count
            interfacesElasticsearchBucketOutput.doc_count = domainBucketsInput?.doc_count;
            return interfacesElasticsearchBucketOutput;
        }

        #endregion

        #region Transformation 'HistogramBucket_To_HIstogramBucket'





        // Left To Right

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket> HistogramBucket_To_HIstogramBucket_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket HistogramBucket_To_HIstogramBucket(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket interfacesElasticsearchHistogramBucketInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchHistogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucket_Transformations.ContainsKey(interfacesElasticsearchHistogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucket_Transformations[interfacesElasticsearchHistogramBucketInput];
            }
            // Instantiate target root
            var domainHIstogramBucketOutput = new DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket();
            HistogramBucket_To_HIstogramBucket_Transformations.Add(interfacesElasticsearchHistogramBucketInput, domainHIstogramBucketOutput);
            // HistogramBucket.Key to HIstogramBucket.key
            domainHIstogramBucketOutput.key = interfacesElasticsearchHistogramBucketInput?.Key;
            // HistogramBucket.KeyAsString to HIstogramBucket.keyAsString
            domainHIstogramBucketOutput.keyAsString = interfacesElasticsearchHistogramBucketInput?.KeyAsString;
            // HistogramBucket.DocCount to HIstogramBucket.doc_count
            domainHIstogramBucketOutput.doc_count = interfacesElasticsearchHistogramBucketInput?.DocCount;
            return domainHIstogramBucketOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket> HistogramBucket_To_HIstogramBucket_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket HistogramBucket_To_HIstogramBucket(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket interfacesElasticsearchHistogramBucketInput, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket domainHIstogramBucketInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchHistogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket);
            if(domainHIstogramBucketInstance == null)
                return HistogramBucket_To_HIstogramBucket (interfacesElasticsearchHistogramBucketInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucket_MappingTransformations.ContainsKey(interfacesElasticsearchHistogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucket_MappingTransformations[interfacesElasticsearchHistogramBucketInput];
            }
            // Instantiate target root
            var domainHIstogramBucketOutput = domainHIstogramBucketInstance;
            HistogramBucket_To_HIstogramBucket_MappingTransformations.Add(interfacesElasticsearchHistogramBucketInput, domainHIstogramBucketOutput);
            // HistogramBucket.Key to HIstogramBucket.key
            domainHIstogramBucketOutput.key = interfacesElasticsearchHistogramBucketInput?.Key;
            // HistogramBucket.KeyAsString to HIstogramBucket.keyAsString
            domainHIstogramBucketOutput.keyAsString = interfacesElasticsearchHistogramBucketInput?.KeyAsString;
            // HistogramBucket.DocCount to HIstogramBucket.doc_count
            domainHIstogramBucketOutput.doc_count = interfacesElasticsearchHistogramBucketInput?.DocCount;
            return domainHIstogramBucketOutput;
        }

        // Right To Left

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket> HistogramBucket_To_HIstogramBucketReversed_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket HistogramBucket_To_HIstogramBucketReversed(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket domainHIstogramBucketInput)
        {
            //Leave, if there is nothing to transform
            if(domainHIstogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucketReversed_Transformations.ContainsKey(domainHIstogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucketReversed_Transformations[domainHIstogramBucketInput];
            }
            // Instantiate target root
            var interfacesElasticsearchHistogramBucketOutput = new DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket();
            HistogramBucket_To_HIstogramBucketReversed_Transformations.Add(domainHIstogramBucketInput, interfacesElasticsearchHistogramBucketOutput);
            // HIstogramBucket.key to HistogramBucket.Key
            interfacesElasticsearchHistogramBucketOutput.Key = domainHIstogramBucketInput?.key;
            // HIstogramBucket.keyAsString to HistogramBucket.KeyAsString
            interfacesElasticsearchHistogramBucketOutput.KeyAsString = domainHIstogramBucketInput?.keyAsString;
            // HIstogramBucket.doc_count to HistogramBucket.DocCount
            interfacesElasticsearchHistogramBucketOutput.DocCount = domainHIstogramBucketInput?.doc_count;
            return interfacesElasticsearchHistogramBucketOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket> HistogramBucket_To_HIstogramBucketReversed_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket HistogramBucket_To_HIstogramBucketReversed(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket domainHIstogramBucketInput, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket interfacesElasticsearchHistogramBucketInstance)
        {
            //Leave, if there is nothing to transform
            if(domainHIstogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket);
            if(interfacesElasticsearchHistogramBucketInstance == null)
                return HistogramBucket_To_HIstogramBucketReversed (domainHIstogramBucketInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucketReversed_MappingTransformations.ContainsKey(domainHIstogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucketReversed_MappingTransformations[domainHIstogramBucketInput];
            }
            // Instantiate target root
            var interfacesElasticsearchHistogramBucketOutput = interfacesElasticsearchHistogramBucketInstance;
            HistogramBucket_To_HIstogramBucketReversed_MappingTransformations.Add(domainHIstogramBucketInput, interfacesElasticsearchHistogramBucketOutput);
            // HIstogramBucket.key to HistogramBucket.Key
            interfacesElasticsearchHistogramBucketOutput.Key = domainHIstogramBucketInput?.key;
            // HIstogramBucket.keyAsString to HistogramBucket.KeyAsString
            interfacesElasticsearchHistogramBucketOutput.KeyAsString = domainHIstogramBucketInput?.keyAsString;
            // HIstogramBucket.doc_count to HistogramBucket.DocCount
            interfacesElasticsearchHistogramBucketOutput.DocCount = domainHIstogramBucketInput?.doc_count;
            return interfacesElasticsearchHistogramBucketOutput;
        }

        #endregion

        #region Transformation 'HistogramBucket_To_HIstogramBucket_2'





        // Left To Right

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket> HistogramBucket_To_HIstogramBucket_2_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket HistogramBucket_To_HIstogramBucket_2(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket interfacesElasticsearchHistogramBucketInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchHistogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucket_2_Transformations.ContainsKey(interfacesElasticsearchHistogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucket_2_Transformations[interfacesElasticsearchHistogramBucketInput];
            }
            // Instantiate target root
            var domainHIstogramBucketOutput = new DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket();
            HistogramBucket_To_HIstogramBucket_2_Transformations.Add(interfacesElasticsearchHistogramBucketInput, domainHIstogramBucketOutput);
            // HistogramBucket.Key to HIstogramBucket.key
            domainHIstogramBucketOutput.key = interfacesElasticsearchHistogramBucketInput?.Key;
            // HistogramBucket.DocCount to HIstogramBucket.doc_count
            domainHIstogramBucketOutput.doc_count = interfacesElasticsearchHistogramBucketInput?.DocCount;
            // HistogramBucket.Key to HIstogramBucket.keyAsString
            domainHIstogramBucketOutput.keyAsString = interfacesElasticsearchHistogramBucketInput?.Key.ToString();
            return domainHIstogramBucketOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket> HistogramBucket_To_HIstogramBucket_2_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket HistogramBucket_To_HIstogramBucket_2(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket interfacesElasticsearchHistogramBucketInput, DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket domainHIstogramBucketInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesElasticsearchHistogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket);
            if(domainHIstogramBucketInstance == null)
                return HistogramBucket_To_HIstogramBucket_2 (interfacesElasticsearchHistogramBucketInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucket_2_MappingTransformations.ContainsKey(interfacesElasticsearchHistogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucket_2_MappingTransformations[interfacesElasticsearchHistogramBucketInput];
            }
            // Instantiate target root
            var domainHIstogramBucketOutput = domainHIstogramBucketInstance;
            HistogramBucket_To_HIstogramBucket_2_MappingTransformations.Add(interfacesElasticsearchHistogramBucketInput, domainHIstogramBucketOutput);
            // HistogramBucket.Key to HIstogramBucket.key
            domainHIstogramBucketOutput.key = interfacesElasticsearchHistogramBucketInput?.Key;
            // HistogramBucket.DocCount to HIstogramBucket.doc_count
            domainHIstogramBucketOutput.doc_count = interfacesElasticsearchHistogramBucketInput?.DocCount;
            // HistogramBucket.Key to HIstogramBucket.keyAsString
            domainHIstogramBucketOutput.keyAsString = interfacesElasticsearchHistogramBucketInput?.Key.ToString();
            return domainHIstogramBucketOutput;
        }

        // Right To Left

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket> HistogramBucket_To_HIstogramBucket_2Reversed_Transformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket HistogramBucket_To_HIstogramBucket_2Reversed(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket domainHIstogramBucketInput)
        {
            //Leave, if there is nothing to transform
            if(domainHIstogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucket_2Reversed_Transformations.ContainsKey(domainHIstogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucket_2Reversed_Transformations[domainHIstogramBucketInput];
            }
            // Instantiate target root
            var interfacesElasticsearchHistogramBucketOutput = new DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket();
            HistogramBucket_To_HIstogramBucket_2Reversed_Transformations.Add(domainHIstogramBucketInput, interfacesElasticsearchHistogramBucketOutput);
            // HIstogramBucket.key to HistogramBucket.Key
            interfacesElasticsearchHistogramBucketOutput.Key = domainHIstogramBucketInput?.key;
            // HIstogramBucket.doc_count to HistogramBucket.DocCount
            interfacesElasticsearchHistogramBucketOutput.DocCount = domainHIstogramBucketInput?.doc_count;
            // HIstogramBucket.keyAsString to HistogramBucket.Key
            interfacesElasticsearchHistogramBucketOutput.Key = zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableDecimal(domainHIstogramBucketInput?.keyAsString.ToString());
            return interfacesElasticsearchHistogramBucketOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket> HistogramBucket_To_HIstogramBucket_2Reversed_MappingTransformations = new Dictionary<DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket>();
        public DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket HistogramBucket_To_HIstogramBucket_2Reversed(DSS2_SynchromodalityCapacityOptimisation.BO.HIstogramBucket domainHIstogramBucketInput, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket interfacesElasticsearchHistogramBucketInstance)
        {
            //Leave, if there is nothing to transform
            if(domainHIstogramBucketInput == null) return default(DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Elasticsearch.HistogramBucket);
            if(interfacesElasticsearchHistogramBucketInstance == null)
                return HistogramBucket_To_HIstogramBucket_2Reversed (domainHIstogramBucketInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(HistogramBucket_To_HIstogramBucket_2Reversed_MappingTransformations.ContainsKey(domainHIstogramBucketInput))
            {
                return HistogramBucket_To_HIstogramBucket_2Reversed_MappingTransformations[domainHIstogramBucketInput];
            }
            // Instantiate target root
            var interfacesElasticsearchHistogramBucketOutput = interfacesElasticsearchHistogramBucketInstance;
            HistogramBucket_To_HIstogramBucket_2Reversed_MappingTransformations.Add(domainHIstogramBucketInput, interfacesElasticsearchHistogramBucketOutput);
            // HIstogramBucket.key to HistogramBucket.Key
            interfacesElasticsearchHistogramBucketOutput.Key = domainHIstogramBucketInput?.key;
            // HIstogramBucket.doc_count to HistogramBucket.DocCount
            interfacesElasticsearchHistogramBucketOutput.DocCount = domainHIstogramBucketInput?.doc_count;
            // HIstogramBucket.keyAsString to HistogramBucket.Key
            interfacesElasticsearchHistogramBucketOutput.Key = zAppDev.DotNet.Framework.Utilities.Common.ConvertToNullableDecimal(domainHIstogramBucketInput?.keyAsString.ToString());
            return interfacesElasticsearchHistogramBucketOutput;
        }

        #endregion

    }
}