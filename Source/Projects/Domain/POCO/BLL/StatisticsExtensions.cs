
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The Statistics extensions
	/// </summary>
	public static class StatisticsExtensions
	{
        public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> CalculateFullStatistics(DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast orderForecast, System.Collections.Generic.List<int?> warehouseIds, System.Collections.Generic.List<string> SKUs, System.Collections.Generic.List<int?> businessUnitIds, System.Collections.Generic.List<int?> categoryIds, System.Collections.Generic.List<int?> subCategoryIds, System.Collections.Generic.List<int?> baseUnitIds, System.Collections.Generic.List<int?> supplierIds, DateTime? fromDate, DateTime? toDate, DSS2_SynchromodalityCapacityOptimisation.BO.Supplier supplier, string flowType){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CalculateFullStatistics")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
if ((orderForecast == null)) {
return stats;
}
zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Refresh(orderForecast);
System.Collections.Generic.List<int?> emptyIDs = new System.Collections.Generic.List<int?>();
System.Collections.Generic.List<string> emptySKUs = new System.Collections.Generic.List<string>();
if ((warehouseIds == null)) {
warehouseIds = emptyIDs.ToList();}
if ((SKUs == null)) {
SKUs = emptySKUs.ToList();}
if ((businessUnitIds == null)) {
businessUnitIds = emptyIDs.ToList();}
if ((categoryIds == null)) {
categoryIds = emptyIDs.ToList();}
if ((subCategoryIds == null)) {
subCategoryIds = emptyIDs.ToList();}
if ((baseUnitIds == null)) {
baseUnitIds = emptyIDs.ToList();}
if ((supplierIds == null)) {
supplierIds = emptyIDs.ToList();}
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> filteredDetails = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder> allPastOrders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder> filteredPastOrders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder>();
if ((supplier == null)) {
var _var0 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var1 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);filteredDetails = orderForecast?.OrderForecastDetails?.Where((a) => (SKUs.Count() == 0 || SKUs.Contains(a.Item.SKU)) && (businessUnitIds.Count() == 0 || businessUnitIds.Contains((a.Item.BusinessUnit.Id).GetValueOrDefault(0))) && (categoryIds.Count() == 0 || categoryIds.Contains((a.Item.Category.Id).GetValueOrDefault(0))) && (subCategoryIds.Count() == 0 || (a.Item.SubCategory != null && subCategoryIds.Contains((a.Item.SubCategory.Id).GetValueOrDefault(0)))) && (baseUnitIds.Count() == 0 || (baseUnitIds.Contains((a.Item.SubCategory.Id).GetValueOrDefault(0)))) && (supplierIds.Count() == 0 || supplierIds.Contains((a.Item.Supplier.Id).GetValueOrDefault(0))) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0))) && (fromDate == null || a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var0) && (toDate == null || a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var1) && ((flowType == null || flowType.Trim() == "") || flowType == a.Warehouse.FlowType)).ToList().ToList();var _var2 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var3 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);filteredPastOrders = allPastOrders?.Where((a) => (SKUs.Count() == 0 || SKUs.Contains(a.Item.SKU)) && (businessUnitIds.Count() == 0 || businessUnitIds.Contains((a.Item.BusinessUnit.Id).GetValueOrDefault(0))) && (categoryIds.Count() == 0 || categoryIds.Contains((a.Item.Category.Id).GetValueOrDefault(0))) && (subCategoryIds.Count() == 0 || (a.Item.SubCategory != null && subCategoryIds.Contains((a.Item.SubCategory.Id).GetValueOrDefault(0)))) && (baseUnitIds.Count() == 0 || baseUnitIds.Contains((a.Item.SubCategory.Id).GetValueOrDefault(0))) && (supplierIds.Count() == 0 || supplierIds.Contains((a.Item.Supplier.Id).GetValueOrDefault(0))) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0))) && (fromDate == null || a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var2) && (toDate == null || a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var3) && ((flowType == null || flowType.Trim() == "") || flowType == a.Warehouse.FlowType)).ToList().ToList();}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier is: " + (supplier?.Name ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "---- OrderForecastDetails: " + (orderForecast?.OrderForecastDetails?.Count() ?? 0));
var _var4 = supplier?.Id;var _var5 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var6 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);filteredDetails = orderForecast?.OrderForecastDetails?.Where((a) => (SKUs.Count() == 0 || SKUs.Contains(a.Item.SKU)) && (a.Item.Supplier.Id == _var4) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0))) && (fromDate == null || a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var5) && (toDate == null || a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var6) && ((flowType == null || flowType.Trim() == "") || flowType == a.Warehouse.FlowType)).ToList().ToList();var _var7 = supplier?.Id;var _var8 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var9 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);filteredPastOrders = allPastOrders?.Where((a) => (SKUs.Count() == 0 || SKUs.Contains(a.Item.SKU)) && (a.Item.Supplier.Id == _var7) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0))) && (fromDate == null || a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var8) && (toDate == null || a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var9) && ((flowType == null || flowType.Trim() == "") || flowType == a.Warehouse.FlowType)).ToList().ToList();}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "----- filteredDetails: " + (filteredDetails?.Count() ?? 0));
System.Collections.Generic.List<string> uniqueItemSKUs = filteredDetails?.Select((a) => a.Item.SKU).ToList().Distinct().ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> filteredSalesDetails = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>();
var _var10 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var11 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);filteredSalesDetails = orderForecast?.SalesForecast?.SalesForecastDetails?.Where((a) => (uniqueItemSKUs.Count() == 0 || uniqueItemSKUs.Contains(a.Item.SKU)) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0))) && (fromDate == null || a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var10) && (toDate == null || a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var11)).ToList().ToList();if ((uniqueItemSKUs.Count() == 0 && SKUs.Count() != 0)) {
var _var12 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var13 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);filteredSalesDetails = orderForecast?.SalesForecast?.SalesForecastDetails?.Where((a) => (SKUs.Contains(a.Item.SKU)) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0))) && (fromDate == null || a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var12) && (toDate == null || a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var13)).ToList().ToList();}
System.Collections.Generic.List<DateTime?> uniqueDates = filteredDetails?.Select((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date).Select(_n => _n as DateTime?).ToList().Distinct().ToList().OrderBy((a) => a).ToList();
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "** uniqueDates: " + uniqueDates.Count());
if ((uniqueDates == null || uniqueDates.Count() == 0 || uniqueDates.Count() < 20)) {
System.Collections.Generic.List<DateTime?> salesUniqueDays = filteredSalesDetails?.Select((a) => a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date).Select(_n => _n as DateTime?).ToList().Distinct().ToList().OrderBy((a) => a).ToList();
if ((salesUniqueDays == null)) {
return stats;
}
if ((salesUniqueDays != null || salesUniqueDays.Count() != 0)) {
DateTime? salesStartDate = salesUniqueDays.FirstOrDefault();
DateTime? salesEndDate = salesUniqueDays.LastOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity> allSupplierCapacitiesForCriteriaSales = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>((a) => uniqueItemSKUs.Contains(a.Item.SKU) && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= salesStartDate && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= salesEndDate);
System.Collections.Generic.List<int?> uniqueWarehouseIdsSales = filteredDetails?.Select((a) => a.Warehouse.Id).ToList().Distinct().ToList();
int? runningStockSales = 0;
foreach (var date in salesUniqueDays ?? Enumerable.Empty<DateTime?>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
stat.OrderDate = date;stat.OrderDateFormatted = (date?.ToString("dd/MM") ?? "");stat.StockOnHandDate = date;stat.StockOnHandDateFormatted = (date?.ToString("dd/MM") ?? "");System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> forecastDetailsForDaySales = filteredDetails?.Where((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> salesForecastDetailsForDaySales = filteredSalesDetails?.Where((a) => a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder> pastOrdersForDaySales = filteredPastOrders?.Where((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
if (supplierIds.Contains(4) && supplierIds.Count() == 1) {
salesForecastDetailsForDaySales = salesForecastDetailsForDaySales?.Where((a) => a.Item.Supplier.Id == 4).ToList().ToList();}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "** salesForecastDetailsForDaySales: " + (salesForecastDetailsForDaySales?.Count() ?? 0));
foreach (var s in salesForecastDetailsForDaySales ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>()) {
}
int? quantity = (int)((forecastDetailsForDaySales?.Sum((a) => a.Quantity) ?? 0));
stat.TotalUnits = (int)(quantity);System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsForTheDay = forecastDetailsForDaySales?.Select((a) => a.Item).ToList().Distinct().ToList();
int? daysInflow = (forecastDetailsForDaySales?.Sum((a) => (int)(a.Quantity)) ?? 0);
int? daysOutflow = (salesForecastDetailsForDaySales?.Sum((a) => a.Units) ?? 0);
int? supplierStock = 0;
int? supCounter = 0;
foreach (var i in itemsForTheDay ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity> capacitiesForTheDay = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>();
if ((supplier != null)) {
capacitiesForTheDay = allSupplierCapacitiesForCriteriaSales?.Where((a) => a.Item == i && a.Supplier == supplier && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList().ToList();}
else {
capacitiesForTheDay = allSupplierCapacitiesForCriteriaSales?.Where((a) => a.Item == i && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList().ToList();}
supplierStock = supplierStock.GetValueOrDefault(0) + (capacitiesForTheDay?.Sum((a) => a.Stock) ?? 0);stat.Item = i;if (i?.Supplier?.Code == supplier?.Code) {
supCounter = supCounter.GetValueOrDefault(0) + 1;}
}
if (supplier != null) {
stat.Supplier = supplier;}
stat.SupplierStock = supplierStock;stat.OrderQuantity = daysInflow;stat.SalesQuantity = (salesForecastDetailsForDaySales?.Sum((a) => a.Units) ?? 0);stat.RealOrderQuantity = (pastOrdersForDaySales?.Sum((a) => a.QuantityOrdered) ?? 0);stat.StockOnHand = runningStockSales;runningStockSales = runningStockSales.GetValueOrDefault(0) + daysInflow.GetValueOrDefault(0) - daysOutflow.GetValueOrDefault(0);stats?.Add(stat);
salesForecastDetailsForDaySales?.Clear();
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****************************** 1 STATS: " + (stats?.Count() ?? 0));
return stats;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****************************** 2 STATS: " + (stats?.Count() ?? 0));
return stats;
}
DateTime? startDate = uniqueDates.FirstOrDefault();
DateTime? endDate = uniqueDates.LastOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity> allSupplierCapacitiesForCriteria = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>((a) => uniqueItemSKUs.Contains(a.Item.SKU) && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= startDate && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= endDate);
System.Collections.Generic.List<int?> uniqueWarehouseIds = filteredDetails?.Select((a) => a.Warehouse.Id).ToList().Distinct().ToList();
int? runningStock = 0;
foreach (var sku in uniqueItemSKUs ?? Enumerable.Empty<string>()) {
foreach (var wid in uniqueWarehouseIds ?? Enumerable.Empty<int?>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails firstForecastDetail = filteredDetails?.Where((a) => a.Item.SKU == sku && a.Warehouse.Id == wid).FirstOrDefault();
if ((firstForecastDetail != null)) {
runningStock = runningStock.GetValueOrDefault(0) + (firstForecastDetail?.InitialStockLevel ?? 0);}
}
}
foreach (var date in uniqueDates ?? Enumerable.Empty<DateTime?>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
stat.OrderDate = date;stat.OrderDateFormatted = (date?.ToString("dd/MM") ?? "");stat.StockOnHandDate = date;stat.StockOnHandDateFormatted = (date?.ToString("dd/MM") ?? "");System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> forecastDetailsForDay = filteredDetails?.Where((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> salesForecastDetailsForDay = filteredSalesDetails?.Where((a) => a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PastOrder> pastOrdersForDay = filteredPastOrders?.Where((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
if (supplierIds.Contains(4) && supplierIds.Count() == 1) {
salesForecastDetailsForDay = salesForecastDetailsForDay?.Where((a) => a.Item.Supplier.Id == 4).ToList().ToList();}
int? quantity = (int)((forecastDetailsForDay?.Sum((a) => a.Quantity) ?? 0));
stat.TotalUnits = (int)(quantity);System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsForTheDay = forecastDetailsForDay?.Select((a) => a.Item).ToList().Distinct().ToList();
int? daysInflow = (forecastDetailsForDay?.Sum((a) => (int)(a.Quantity)) ?? 0);
int? daysOutflow = (salesForecastDetailsForDay?.Sum((a) => a.Units) ?? 0);
int? supplierStock = 0;
int? supCounter = 0;
foreach (var i in itemsForTheDay ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity> capacitiesForTheDay = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>();
if ((supplier != null)) {
capacitiesForTheDay = allSupplierCapacitiesForCriteria?.Where((a) => a.Item == i && a.Supplier == supplier && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList().ToList();}
else {
capacitiesForTheDay = allSupplierCapacitiesForCriteria?.Where((a) => a.Item == i && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList().ToList();}
supplierStock = supplierStock.GetValueOrDefault(0) + (capacitiesForTheDay?.Sum((a) => a.DailyProduction) ?? 0);stat.Item = i;if (i?.Supplier?.Code == supplier?.Code) {
supCounter = supCounter.GetValueOrDefault(0) + 1;}
}
if (supplier != null) {
stat.Supplier = supplier;}
stat.SupplierStock = supplierStock;stat.OrderQuantity = daysInflow;stat.SalesQuantity = daysOutflow;stat.RealOrderQuantity = (pastOrdersForDay?.Sum((a) => a.QuantityOrdered) ?? 0);stat.StockOnHand = runningStock;runningStock = runningStock.GetValueOrDefault(0) + daysInflow.GetValueOrDefault(0) - daysOutflow.GetValueOrDefault(0);stats?.Add(stat);
salesForecastDetailsForDay?.Clear();
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****************************** STATS: " + (stats?.Count() ?? 0));
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> FindTotalUnitsForSKU(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "FindTotalUnitsForSKU")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
int? total = new int?();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse> wharehouses = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>()?.Select((s) => s.Warehouse).ToList().Distinct().ToList();
for (var i = 0; i < (wharehouses?.Count() ?? 0); i = i + 1) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse wh = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(wharehouses, i);
stat.TotalUnits = (new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>()?.Where((s) => s.Warehouse == wh).Sum((s) => s.Units) ?? 0);stat.Description = (wh?.Description ?? "");stat.Warehouse = wh;stats?.Add(stat);
}
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> TotalForEachSKU(int? warehouse){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "TotalForEachSKU")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
int? total = new int?();
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "warehouse: " + warehouse.GetValueOrDefault(0));
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>()?.Where((a) => a.Warehouse.Id == warehouse).Select((b) => b.Item).ToList().Distinct().ToList();
for (var i = 0; i < (items?.Count() ?? 0); i = i + 1) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
DSS2_SynchromodalityCapacityOptimisation.BO.Item aa = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(items, i);
stat.TotalUnits = (new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>()?.Where((s) => s.Item == aa && s.Warehouse.Id == warehouse).Sum((s) => s.Units) ?? 0);stat.Description = (aa?.SKU ?? "");stats?.Add(stat);
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "STATS: " + (stats?.Count() ?? 0));
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> GetForecastedStockLevel(string sku, DateTime? fromDate, DateTime? toDate, int? locId, DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit businessUnit, DSS2_SynchromodalityCapacityOptimisation.BO.Category category, DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory subCategory, DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit baseUnit){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetForecastedStockLevel")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
DSS2_SynchromodalityCapacityOptimisation.BO.Item foundItem = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
if ((sku == null || sku == "")) {
items = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.Item>((a) => (businessUnit == null ? true : a.BusinessUnit.Id == businessUnit.Id) && (category == null ? true : a.Category.Id == category.Id) && (subCategory == null ? true : a.SubCategory.Id == subCategory.Id) && (baseUnit == null ? true : a.BaseUnit.Id == baseUnit.Id)).ToList();}
else {
try {
foundItem =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(sku);}
catch (System.Exception x) {
}
if (foundItem != null) {
items?.Add(foundItem);
}
}
foreach (var i in items ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand> stOH = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>();
if ((locId == 444)) {
var _var14 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var15 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stOH = i?.StocksOnHand?.Where((a) => a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date > _var14 && a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date < _var15).ToList().ToList();}
else {
var _var16 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var17 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stOH = i?.StocksOnHand?.Where((a) => a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date > _var16 && a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date < _var17 && a.Warehouse.Id == locId).ToList().ToList();}
foreach (var s in stOH ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>()) {
bool newRow = false;
var _var18 = s?.StockOnHandDate?.Date;if (((stats?.Where((b) => b.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var18).Count() ?? 0) > 0)) {
continue;}
var _var19 = s?.StockOnHandDate?.Date;DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = stats?.FirstOrDefault((b) => b.SalesForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var19);
if ((stat == null)) {
newRow = true;stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();}
stat.TotalUnits = (stat?.TotalUnits ?? 0) + (s?.Units ?? 0);var _var20 = s?.StockOnHandDate?.Date;DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails ord = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.SalesForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var20)?.FirstOrDefault();
stat.SalesForecastDate = (s?.StockOnHandDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stat.SalesForecastDateFormatted = (s?.StockOnHandDate?.ToString("MMMM dd, yyyy") ?? "");if ((newRow)) {
stats?.Add(stat);
}
}
}
if ((stats?.Count() ?? 0) > 0) {
stats = stats?.OrderBy((a) => a.SalesForecastDate).ToList().ToList();}
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> CurrentStockLevel(string sku, DateTime? fromDate, DateTime? toDate, int? locId, DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit businessUnit, DSS2_SynchromodalityCapacityOptimisation.BO.Category category, DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory subCategory, DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit baseUnit){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CurrentStockLevel")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
DSS2_SynchromodalityCapacityOptimisation.BO.Item foundItem = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
if ((sku == null || sku == "")) {
items = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.Item>((a) => (businessUnit == null ? true : a.BusinessUnit.Id == businessUnit.Id) && (category == null ? true : a.Category.Id == category.Id) && (subCategory == null ? true : a.SubCategory.Id == subCategory.Id) && (baseUnit == null ? true : a.BaseUnit.Id == baseUnit.Id)).ToList();}
else {
try {
foundItem =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(sku);}
catch (System.Exception x) {
}
if (foundItem != null) {
items?.Add(foundItem);
}
}
foreach (var i in items ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand> stOH = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>();
if ((locId == 444)) {
var _var21 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var22 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stOH = i?.StocksOnHand?.Where((a) => a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var21 && a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var22).ToList().ToList();}
else {
var _var23 = (fromDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);var _var24 = (toDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stOH = i?.StocksOnHand?.Where((a) => a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= _var23 && a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= _var24 && a.Warehouse.Id == locId).ToList().ToList();}
foreach (var s in stOH ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>()) {
bool newRow = false;
var _var25 = s?.StockOnHandDate?.Date;if (((stats?.Where((b) => b.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var25).Count() ?? 0) > 0)) {
continue;}
var _var26 = s?.StockOnHandDate?.Date;DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = stats?.FirstOrDefault((b) => b.SalesForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var26);
if ((stat == null)) {
newRow = true;stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();}
stat.TotalUnits = (stat?.TotalUnits ?? 0) + (s?.Units ?? 0);stat.SalesForecastDate = (s?.StockOnHandDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stat.SalesForecastDateFormatted = (s?.StockOnHandDate?.ToString("dd/MM/yyyy") ?? "");if ((newRow)) {
stats?.Add(stat);
}
}
}
if ((stats?.Count() ?? 0) > 0) {
stats = stats?.OrderBy((a) => a.SalesForecastDate).ToList().ToList();}
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> LeadTimeWeekDay(string sku, int? locId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "LeadTimeWeekDay")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
string weekDay = "";
int? dayNo = new int?();
if ((sku == null || sku == "") || locId == null) {
return stats;
}
DSS2_SynchromodalityCapacityOptimisation.BO.Item item =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(sku);
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> OrderForecastVsSupCapacityNew(DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast orderForecast, System.Collections.Generic.List<int?> warehouseIds, System.Collections.Generic.List<string> SKUs, System.Collections.Generic.List<int?> businessUnitIds, System.Collections.Generic.List<int?> categoryIds, System.Collections.Generic.List<int?> subCategoryIds, System.Collections.Generic.List<int?> baseUnitIds, System.Collections.Generic.List<int?> supplierIds){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "OrderForecastVsSupCapacityNew")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> filteredDetails = orderForecast?.OrderForecastDetails?.Where((a) => (SKUs.Count() == 0 || SKUs.Contains(a.Item.SKU)) && (businessUnitIds.Count() == 0 || businessUnitIds.Contains((a.Item.BusinessUnit.Id).GetValueOrDefault(0))) && (categoryIds.Count() == 0 || categoryIds.Contains((a.Item.Category.Id).GetValueOrDefault(0))) && (subCategoryIds.Count() == 0 || subCategoryIds.Contains((a.Item.SubCategory.Id).GetValueOrDefault(0))) && (baseUnitIds.Count() == 0 || baseUnitIds.Contains((a.Item.SubCategory.Id).GetValueOrDefault(0))) && (supplierIds.Count() == 0 || supplierIds.Contains((a.Item.Supplier.Id).GetValueOrDefault(0))) && (warehouseIds.Count() == 0 || warehouseIds.Contains((a.Warehouse.Id).GetValueOrDefault(0)))).ToList();
System.Collections.Generic.List<DateTime?> uniqueDates = filteredDetails?.Select((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date).Select(_n => _n as DateTime?).ToList().Distinct().ToList().OrderBy((a) => a).ToList();
System.Collections.Generic.List<string> uniqueItemSKUs = filteredDetails?.Select((a) => a.Item.SKU).ToList().Distinct().ToList();
DateTime? startDate = uniqueDates.FirstOrDefault();
DateTime? endDate = uniqueDates.LastOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity> allSupplierCapacitiesForCriteria = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>((a) => uniqueItemSKUs.Contains(a.Item.SKU) && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date >= startDate && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date <= endDate);
foreach (var date in uniqueDates ?? Enumerable.Empty<DateTime?>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
stat.OrderDate = date;stat.OrderDateFormatted = (date?.ToString("dd/MM/yyyy") ?? "");System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> forecastDetailsForDay = filteredDetails?.Where((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
int? quantity = (int)((forecastDetailsForDay?.Sum((a) => a.Quantity) ?? 0));
stat.TotalUnits = (int)(quantity);System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsForTheDay = forecastDetailsForDay?.Select((a) => a.Item).ToList().Distinct().ToList();
int? stock = 0;
foreach (var i in itemsForTheDay ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity> capacitiesForTheDay = allSupplierCapacitiesForCriteria?.Where((a) => a.Item == i && a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == date).ToList();
stock = stock.GetValueOrDefault(0) + (capacitiesForTheDay?.Sum((a) => a.Stock) ?? 0);}
stat.Supplier = null;stat.SupplierStock = stock;stats?.Add(stat);
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " stats length " + (stats?.Count() ?? 0));
return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> OrderForecastVsSupCapacity(int? warehouseId, string SKU, DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit businessUnit, DSS2_SynchromodalityCapacityOptimisation.BO.Category category, DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory subCategory, DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit baseUnit, DSS2_SynchromodalityCapacityOptimisation.BO.Supplier supplier){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "OrderForecastVsSupCapacity")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
DSS2_SynchromodalityCapacityOptimisation.BO.Item foundItem = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
if (warehouseId == null || warehouseId == 0) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "warehouseId == null!!!!");
return stats;
}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "warehouseId!!**** ==  " + warehouseId.GetValueOrDefault(0));
}
if ((SKU == null || SKU == "")) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "SKU == null");
items = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.Item>((a) => (businessUnit == null ? true : a.BusinessUnit.Id == businessUnit.Id) && (category == null ? true : a.Category.Id == category.Id) && (subCategory == null ? true : a.SubCategory.Id == subCategory.Id) && (baseUnit == null ? true : a.BaseUnit.Id == baseUnit.Id)).ToList();zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Length of items: " + (items?.Count().ToString() ?? ""));
foreach (var it in items ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " item: " + (it?.SKU ?? ""));
}
}
else {
try {
zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Clear();
foundItem =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(SKU);zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "NEMO FoundItem: " + (foundItem?.Supplier == null));
}
catch (System.Exception x) {
}
if (foundItem != null) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "FoundItem: " + (foundItem?.SKU ?? ""));
items?.Add(foundItem);
}
}
if ((items?.Count() ?? 0) > 1) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Items length: " + (items?.Count() ?? 0));
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> commonOrderProposalDates = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => items.Contains(a.Item));
commonOrderProposalDates = commonOrderProposalDates?.OrderBy((a) => a.RecommendedOrderDate).ToList().ToList();int? sumOp = 0;
System.Collections.Generic.List<DateTime?> dates = new System.Collections.Generic.List<DateTime?>();
foreach (var oPropp in commonOrderProposalDates ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>()) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Dates length: " + dates.Count());
if (((dates.Contains((oPropp?.RecommendedOrderDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) == false)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "New date: " + (oPropp?.RecommendedOrderDate?.ToString() ?? ""));
dates.Add((oPropp?.RecommendedOrderDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value));
}
}
foreach (var d in dates ?? Enumerable.Empty<DateTime?>()) {
commonOrderProposalDates = commonOrderProposalDates?.Where((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == d).ToList().ToList();sumOp = (int)((commonOrderProposalDates?.Sum((a) => a.Quantity) ?? 0));zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "SUM: " + sumOp.GetValueOrDefault(0) + " for date: " + (d?.ToString() ?? ""));
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
stat.OrderDate = d;stat.OrderDateFormatted = (d?.ToString("dd/MM/yyyy") ?? "");stat.TotalUnits = sumOp;stats?.Add(stat);
sumOp = 0;commonOrderProposalDates = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => items.Contains(a.Item)).ToList();}
}
else {
if (foundItem?.Supplier?.Code == "12480") {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> orders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>();
foreach (var cap in foundItem?.SupplierCapacities?.Where((a) => a.Supplier.Code == "12480").ToList() ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>()) {
if ((warehouseId != 444)) {
var _var27 = cap?.DateOfStockUpdate;var _var28 = cap?.Item?.SKU;orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((c) => c.RecommendedOrderDate == _var27 && c.Item.SKU == _var28 && c.Warehouse.Id == warehouseId).ToList();}
else {
var _var29 = cap?.DateOfStockUpdate;var _var30 = cap?.Item?.SKU;orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((d) => d.RecommendedOrderDate == _var29 && d.Item.SKU == _var30).ToList();}
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
stat.Supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Code == "12480")?.FirstOrDefault();stat.SupplierStock = (int)((cap?.Stock ?? 0));stat.OrderDate = (cap?.DateOfStockUpdate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stat.OrderDateFormatted = (cap?.DateOfStockUpdate?.ToString("dd/MM/yyyy") ?? "");stats?.Add(stat);
if ((orders?.Count() == 0)) {
continue;}
int? quantity = (int)((orders?.Sum((a) => a.Quantity) ?? 0));
stat.TotalUnits = (int)(quantity);}
}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "***");
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> orders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>();
if ((warehouseId != 444)) {
orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.Item.SKU == foundItem.SKU && a.Warehouse.Id == warehouseId).ToList();}
else {
orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.Item.SKU == foundItem.SKU).ToList();}
foreach (var orderProposal in orders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
var _var31 = foundItem?.Supplier?.Code;stat.Supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Code == _var31)?.FirstOrDefault();stat.SupplierStock = 0;stat.OrderDate = (orderProposal?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stat.OrderDateFormatted = (orderProposal?.RecommendedOrderDate?.ToString("dd/MM/yyyy") ?? "");stats?.Add(stat);
if ((orders?.Count() == 0)) {
continue;}
int? quantity = (int)((orderProposal?.Quantity ?? 0));
stat.TotalUnits = (int)(quantity);}
}
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " stats length " + (stats?.Count() ?? 0));
stats = stats?.OrderBy((a) => a.StockOnHandDate).ToList().ToList();return stats;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> StockSKU(int? warehouseId, string SKU, DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit businessUnit, DSS2_SynchromodalityCapacityOptimisation.BO.Category category, DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory subCategory, DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit baseUnit){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Statistics", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "StockSKU")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> stats = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
DSS2_SynchromodalityCapacityOptimisation.BO.Item foundItem = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
if (warehouseId == null || warehouseId == 0) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "warehouseId == null");
return stats;
}
if ((SKU == null || SKU == "")) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "SKU == null");
items = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.Item>((a) => (businessUnit == null ? true : a.BusinessUnit.Id == businessUnit.Id) && (category == null ? true : a.Category.Id == category.Id) && (subCategory == null ? true : a.SubCategory.Id == subCategory.Id) && (baseUnit == null ? true : a.BaseUnit.Id == baseUnit.Id)).ToList();}
else {
try {
foundItem =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(SKU);}
catch (System.Exception x) {
}
if (foundItem != null) {
items?.Add(foundItem);
}
}
foreach (var item in items ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
if (item?.Supplier?.Code == "12480") {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> orders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>();
foreach (var cap in item?.SupplierCapacities?.Where((a) => a.Supplier.Code == "12480").ToList() ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierCapacity>()) {
if ((warehouseId != 4)) {
var _var32 = cap?.DateOfStockUpdate;var _var33 = cap?.Item?.SKU;orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.SalesForecastDate == _var32 && a.Item.SKU == _var33 && a.Warehouse.Id == warehouseId).ToList();}
else {
var _var34 = cap?.DateOfStockUpdate;var _var35 = cap?.Item?.SKU;orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.SalesForecastDate == _var34 && a.Item.SKU == _var35).ToList();}
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
stat.Supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Code == "12480")?.FirstOrDefault();stat.SupplierStock = (int)((cap?.Stock ?? 0));stat.StockOnHandDate = (cap?.DateOfStockUpdate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stat.StockOnHandDateFormatted = (cap?.DateOfStockUpdate?.ToString("MMMM dd, yyyy") ?? "");stats?.Add(stat);
if ((orders?.Count() == 0)) {
continue;}
int? quantity = (int)((orders?.Sum((a) => a.Quantity) ?? 0));
stat.QuantitySalesForecast = (int)(quantity);}
}
else {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> orders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>();
if ((warehouseId != 4)) {
orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.Item.SKU == item.SKU && a.Warehouse.Id == warehouseId).ToList();}
else {
orders = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.Item.SKU == item.SKU).ToList();}
foreach (var orderProposal in orders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Statistics stat = new DSS2_SynchromodalityCapacityOptimisation.BO.Statistics();
var _var36 = item?.Supplier?.Code;stat.Supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Code == _var36)?.FirstOrDefault();stat.SupplierStock = 0;stat.StockOnHandDate = (orderProposal?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);stat.StockOnHandDateFormatted = (orderProposal?.RecommendedOrderDate?.ToString("MMMM dd, yyyy") ?? "");stats?.Add(stat);
if ((orders?.Count() == 0)) {
continue;}
int? quantity = (int)((orderProposal?.Quantity ?? 0));
stat.QuantitySalesForecast = (int)(quantity);}
}
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Statistics",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " stats length " + (stats?.Count() ?? 0));
stats = stats?.OrderBy((a) => a.StockOnHandDate).ToList().ToList();return stats;
}
}



        
	}
}
