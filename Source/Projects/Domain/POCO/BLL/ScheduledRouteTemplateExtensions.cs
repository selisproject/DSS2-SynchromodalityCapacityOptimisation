
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The ScheduledRouteTemplate extensions
	/// </summary>
	public static class ScheduledRouteTemplateExtensions
	{
        public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> GetTemplatesRA(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("ScheduledRouteTemplate", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetTemplatesRA")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> templates = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>();
DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser user = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser>((x) => x.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
if ((user != null)) {
var _var0 = user?.RegionalAgent?.Id;templates = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>((x) => x.Owner.Id == _var0).ToList();}
return templates;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> GetAvailableRATemplates(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("ScheduledRouteTemplate", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetAvailableRATemplates")) {
DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser currentUser = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser>((x) => x.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> templates = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>((x) => x.IsPrivate == false && x.Owner != null);
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> temp = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>((x) => x.IsPrivate == true && x.Owner != null);
foreach (var templ in temp ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>()) {
if (((templ?.IsPrivate ?? false) && (templ?.VisibleTo?.Contains(currentUser?.LSP) ?? false))) {
templates?.Add(templ);
}
}
return templates;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> GetTemplatesFromLSP(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("ScheduledRouteTemplate", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetTemplatesFromLSP")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> templates = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>();
DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser user = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser>((x) => x.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
if ((user != null)) {
var _var1 = user?.LSP?.Id;templates = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>((x) => x.OwnerLSP.Id == _var1).ToList();}
return templates;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> GetAvailableLSPTemplates(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("ScheduledRouteTemplate", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetAvailableLSPTemplates")) {
DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser currentUser = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser>((x) => x.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> templates = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>((x) => x.IsPrivate == false && x.OwnerLSP != null);
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> temp = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>((x) => x.IsPrivate == true && x.Owner != null);
foreach (var templ in temp ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>()) {
if (((templ?.IsPrivate ?? false) && (templ?.VisibleToRAs?.Contains(currentUser?.RegionalAgent) ?? false))) {
templates?.Add(templ);
}
}
return templates;
}
}



        
	}
}
