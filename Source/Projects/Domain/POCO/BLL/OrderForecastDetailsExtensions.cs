
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The OrderForecastDetails extensions
	/// </summary>
	public static class OrderForecastDetailsExtensions
	{
        public static void CalculateReplenishmentCycle(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CalculateReplenishmentCycle")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> salesForecast = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>();
if (salesForecast?.Count() == 0) {
return;
}
foreach (var sale in salesForecast ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Item item = sale?.Item;
DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse warehouse = sale?.Warehouse;
DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand stock = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>((a) => a.Item.SKU == item.SKU && a.Warehouse.Id == warehouse.Id)?.FirstOrDefault();
if ((stock == null)) {
continue;}
DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails orderProposal = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails();
orderProposal.Item = item;orderProposal.Warehouse = warehouse;orderProposal.SalesForecastDate = (sale?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule> schedules = item?.DeliverySchedules?.Where((a) => a.Warehouse == warehouse && a.Item == item).ToList();
int? days = new int?();
if (schedules?.Count() == 0) {
days = 0;}
else {
days = (int)(((schedules?.Sum((a) => a.Weekday) ?? 0) / (schedules?.Count() ?? 0)));}
orderProposal.ReplenishmentCycle = days;orderProposal.AutomatedForecast = (int)(((sale?.AvgDailyDemandForecast ?? 0) * days.GetValueOrDefault(0)));new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(orderProposal);
}
}
}


public static decimal? Get_OrderInventoryDays(this BO.OrderForecastDetails @this){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "Get_OrderInventoryDays")) {
return 0;
}
}


public static int? Get_RoundQuantity(this BO.OrderForecastDetails @this){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "Get_RoundQuantity")) {
int? minQuantity = ((@this?.Item?.MinimumQuantity?.Quantity?.ToString() ?? "") == null || (@this?.Item?.MinimumQuantity?.Quantity?.ToString() ?? "") == "") ? 0 : (@this?.Item?.MinimumQuantity?.Quantity ?? 0);
if (minQuantity == 0) {
return 0;
}
return (int)((((int)((((@this?.Quantity ?? 0) / minQuantity.GetValueOrDefault(0)) + 1))) * minQuantity.GetValueOrDefault(0)));
}
}


public static void GetQuantity(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetQuantity")) {
foreach (var proposal in new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>() ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.Item item = proposal?.Item;
var _var0 = proposal?.Warehouse;System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Agreement> agrrrr = item?.Agreements?.Where((a) => a.Items.Contains(item) && a.Warehouses.Contains(_var0)).ToList();
if ((agrrrr?.Count() == 0)) {
proposal.Quantity = 0;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(proposal);
continue;}
decimal? targetInventoryDays = (decimal)((agrrrr?.FirstOrDefault()?.TargetInventoryDays ?? 0));
decimal? inventoryDays = (proposal?.OrderInventoryDays ?? 0);
var _var1 = proposal?.SalesForecastDate;DSS2_SynchromodalityCapacityOptimisation.BO.Sales sale = item?.ItemsForecast?.Where((a) => zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>(a) != null && a.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var1).FirstOrDefault();
if ((sale == null)) {
continue;}
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails salesForecast = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>(sale);
if (inventoryDays < targetInventoryDays) {
proposal.Quantity = (2 * targetInventoryDays.GetValueOrDefault(0) - inventoryDays.GetValueOrDefault(0)) * (salesForecast?.AvgDailyDemandForecast ?? 0);}
else {
proposal.Quantity = inventoryDays.GetValueOrDefault(0) - targetInventoryDays.GetValueOrDefault(0) + (targetInventoryDays.GetValueOrDefault(0) * (salesForecast?.AvgDailyDemandForecast ?? 0));}
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(proposal);
}
}
}


public static void CalculateRecommendedOrderDate(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CalculateRecommendedOrderDate")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> salesForecast = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>();
if (salesForecast?.Count() == 0) {
return;
}
int? counter = 1;
int? length = (salesForecast?.Count() ?? 0);
foreach (var sale in salesForecast ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>()) {
counter = counter.GetValueOrDefault(0) + 1;DSS2_SynchromodalityCapacityOptimisation.BO.Item item = sale?.Item;
DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse warehouse = sale?.Warehouse;
var _var2 = sale?.ForecastDate;DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails orderProposal = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>((a) => a.Warehouse.Id == warehouse.Id && a.Item.SKU == item.SKU && a.SalesForecastDate == _var2)?.FirstOrDefault();
if (orderProposal == null) {
orderProposal = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails();orderProposal.Item = item;orderProposal.Warehouse = warehouse;orderProposal.SalesForecastDate = (sale?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand stock = item?.StocksOnHand?.Where((a) => a.Warehouse == warehouse && a.Item == item).FirstOrDefault();
if ((stock == null)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "sales forecast WITHOUT STOCK : " + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
continue;}
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Agreement> agrrrr = item?.Agreements?.Where((a) => a.Items.Contains(item) && a.Warehouses.Contains(warehouse)).ToList();
if ((agrrrr?.Count() == 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "sales forecast WITHOUT AGREEMENT : " + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
continue;}
double? targetInventoryDays = 0 - zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>((agrrrr?.FirstOrDefault()?.TargetInventoryDays ?? 0));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Current Inv Days: " + (stock?.CurrentInventoryDays?.ToString() ?? "") + "  ---" + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "targetInventoryDays " + (targetInventoryDays?.ToString() ?? "") + "  ---" + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
DateTime? StockDaysLeft = (stock?.StockOnHandDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
StockDaysLeft = (StockDaysLeft?.AddDays((targetInventoryDays).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule> deliverySchedules = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule>((a) => a.Item.SKU == item.SKU && a.Warehouse.Id == warehouse.Id);
if ((deliverySchedules?.Count() == 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "sales forecast WITHOUT delivery schedule : " + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
continue;}
System.Collections.Generic.List<int?> weekdays = deliverySchedules?.Select((a) => a.Weekday).ToList().OrderBy((a) => a).ToList();
int? weekDayToCompare = (((int?)(StockDaysLeft?.DayOfWeek)) ?? 0);
double? diff = new double?();
System.Collections.Generic.List<int?> weekDaysSmallerThanComparedDay = weekdays.Where((a) => a < weekDayToCompare).ToList();
int? HolyDay = new int?();
if ((weekDaysSmallerThanComparedDay.Count() == 0)) {
HolyDay = weekdays.Where((a) => a > weekDayToCompare).ToList().OrderBy((a) => a).ToList().FirstOrDefault();weekDayToCompare = weekDayToCompare.GetValueOrDefault(0) + 7;}
else {
HolyDay = weekdays.Where((a) => a < weekDayToCompare).ToList().OrderByDescending((a) => a).ToList().FirstOrDefault();}
diff = weekDayToCompare.GetValueOrDefault(0) - HolyDay.GetValueOrDefault(0);diff = 0 - zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>(diff);double? leadtime = 0 - zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>((deliverySchedules?.FirstOrDefault()?.LeadTime ?? 0));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "diff " + (diff?.ToString() ?? "") + "  ---" + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "leadtime " + (leadtime?.ToString() ?? "") + "  ---" + (item?.SKU ?? "") + " : " + (warehouse?.Code ?? ""));
StockDaysLeft = (StockDaysLeft?.AddDays((diff).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);StockDaysLeft = (StockDaysLeft?.AddDays((leadtime).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);if (((StockDaysLeft?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) < (stock?.StockOnHandDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
StockDaysLeft = (stock?.StockOnHandDate?.AddDays(2) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
if (((StockDaysLeft?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) > (sale?.ForecastDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
StockDaysLeft = (sale?.ForecastDate?.AddDays(- 2) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
orderProposal.RecommendedOrderDate = StockDaysLeft;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(orderProposal);
}
}
}


public static bool CalculateOrderProposal(bool enableAnalyticDebug, int? orderForecastId, string user){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CalculateOrderProposal")) {
System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();
watch.Start();
bool JAL_DEBUG = false;
enableAnalyticDebug = false;DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast orderForecast =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast>(orderForecastId);
orderForecast?.ClearOrderForecastDetails();
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast>(orderForecast);
DateTime? startDate4OrderProposalCalculation = (orderForecast?.StartDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
DateTime? endDate4OrderProposalCalculation = (orderForecast?.EndDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
bool allowSameStockDateWithStartDate4OrderProposalCalculation = true;
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Enter in CalculateOrderProposal(): " + " startDate: " + (startDate4OrderProposalCalculation?.Date.ToString() ?? "") + " endDate: " + (endDate4OrderProposalCalculation?.Date.ToString() ?? "") + " allowSameStockDateWithStartDate4OrderProposalCalculation " + allowSameStockDateWithStartDate4OrderProposalCalculation);
}
if ((JAL_DEBUG)) {
enableAnalyticDebug = true;allowSameStockDateWithStartDate4OrderProposalCalculation = true;startDate4OrderProposalCalculation = DateTime.UtcNow;startDate4OrderProposalCalculation = (startDate4OrderProposalCalculation?.Date.AddDays(- 1) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);endDate4OrderProposalCalculation = DateTime.UtcNow;}
if (((endDate4OrderProposalCalculation?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) <= (startDate4OrderProposalCalculation?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error in CalculateOrderProposal(): " + " endDate4OrderProposalCalculation.Date: " + (endDate4OrderProposalCalculation?.Date.ToString() ?? "") + " <= startDate4OrderProposalCalculation.Date: " + (startDate4OrderProposalCalculation?.Date.ToString() ?? ""));
return false;
}
System.Collections.Generic.Dictionary<string,DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter> itemsDictionary = new System.Collections.Generic.Dictionary<string,DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter>();
foreach (var itemParam in orderForecast?.ItemParameters ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter>()) {
itemsDictionary.Add((itemParam?.Item?.SKU ?? ""), itemParam);
}
System.Collections.Generic.Dictionary<string,DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse> allWarehouses = new System.Collections.Generic.Dictionary<string,DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>();
foreach (var w in new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>() ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>()) {
allWarehouses.Add((w?.Code ?? ""), w);
}
System.Collections.Generic.List<string> itemsSKUFromForecast = orderForecast?.ItemParameters?.Select((a) => a.Item.SKU).ToList().OrderBy((a) => a).ToList();
System.Collections.Generic.List<string> warehousesCodeFromForecast = allWarehouses.Keys.ToList().OrderBy((a) => a).ToList();
System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>> salesForecastPerSKUAndWareHouseDictionary = new System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> orderParametersPerSKUAndWH = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>();
int? numberOfAnalyticSalesForecast = 0;
foreach (var itemSKUFromForecast in itemsSKUFromForecast ?? Enumerable.Empty<string>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem> invItemsForItem = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem>((a) => a.Item.SKU == itemSKUFromForecast);
foreach (var warehouseCodeFromForecast in warehousesCodeFromForecast ?? Enumerable.Empty<string>()) {
var _var3 = orderForecast?.SalesForecast?.Id;System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> saleForecastEntriesPerSKUAndWareHouse = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>((a) => a.SalesForecast.Id == _var3 && a.Item.SKU == itemSKUFromForecast && a.Warehouse.Code == warehouseCodeFromForecast)?.OrderBy((a) => a.ForecastDate).ToList();
if ((JAL_DEBUG)) {
if ((itemSKUFromForecast != "5584791" || warehouseCodeFromForecast != "107")) {
continue;}
}
if ((saleForecastEntriesPerSKUAndWareHouse != null && (saleForecastEntriesPerSKUAndWareHouse?.Any() ?? false))) {
string innerDesc = "CalculateOrderProposal() Item SKU: " + itemSKUFromForecast + ", Warehouse: " + warehouseCodeFromForecast;
string key = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.GetDictionaryKey(itemSKUFromForecast, warehouseCodeFromForecast);
if ((((salesForecastPerSKUAndWareHouseDictionary.ContainsKey(key)) == false))) {
salesForecastPerSKUAndWareHouseDictionary.Add(key, saleForecastEntriesPerSKUAndWareHouse);
}
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails firstSaleForecast = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(saleForecastEntriesPerSKUAndWareHouse, 0);
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails lastSaleForecast = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(saleForecastEntriesPerSKUAndWareHouse, (saleForecastEntriesPerSKUAndWareHouse?.Count() ?? 0) - 1);
DateTime? startDateTimeOfOrderForecast = startDate4OrderProposalCalculation;
DateTime? endDateTimeOfOrderForecast = endDate4OrderProposalCalculation;
if ((JAL_DEBUG)) {
startDateTimeOfOrderForecast = (firstSaleForecast?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);startDate4OrderProposalCalculation = (firstSaleForecast?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);endDateTimeOfOrderForecast = (lastSaleForecast?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);endDate4OrderProposalCalculation = (lastSaleForecast?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
if (((startDate4OrderProposalCalculation?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) < (startDateTimeOfOrderForecast?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error: " + (startDate4OrderProposalCalculation?.Date.ToString() ?? "") + " startDate4OrderProposalCalculation.Date: " + " < startDateTimeOfOrderForecast.Date: " + (startDateTimeOfOrderForecast?.Date.ToString() ?? "") + " " + innerDesc);
continue;}
if (((endDate4OrderProposalCalculation?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) > (endDateTimeOfOrderForecast?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error: " + " endDate4OrderProposalCalculation.Date: " + (endDate4OrderProposalCalculation?.Date.ToString() ?? "") + " > endDateTimeOfOrderForecast.Date: " + (endDateTimeOfOrderForecast?.Date.ToString() ?? "") + " " + innerDesc);
continue;}
int? startingStockUnits = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.GetStartingStock(enableAnalyticDebug, startDateTimeOfOrderForecast, firstSaleForecast, allowSameStockDateWithStartDate4OrderProposalCalculation);
if ((JAL_DEBUG)) {
startingStockUnits = 1500;}
DSS2_SynchromodalityCapacityOptimisation.BO.ConstValues constValues = new DSS2_SynchromodalityCapacityOptimisation.BO.ConstValues();
if ((startingStockUnits <= (constValues?.StockLowLimit ?? 0))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Can't forecast Orders, because can't find " + " startingStockUnits ... Dont Worry be Happy " + innerDesc);
continue;}
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, innerDesc + " ADDED TO orderParametersPerSKUAndWH for further process");
}
DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder orderParametersEntry = new DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder();
numberOfAnalyticSalesForecast = numberOfAnalyticSalesForecast.GetValueOrDefault(0) + (saleForecastEntriesPerSKUAndWareHouse?.Count() ?? 0);orderParametersEntry.Initialized = false;orderParametersEntry.ItemSKU = itemSKUFromForecast;orderParametersEntry.ItemWarehouseCode = warehouseCodeFromForecast;orderParametersEntry.CurrentStockUnits = startingStockUnits;orderParametersEntry.InitialStockLevel = startingStockUnits;orderParametersEntry.startDateTime = startDateTimeOfOrderForecast;DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter itemParam = itemsDictionary[(orderParametersEntry?.ItemSKU ?? "")];
orderParametersEntry.CoverageDays = (itemParam?.CoverageDays ?? 0);var _var4 = itemParam?.Item?.Supplier;DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter supplierAgreement = orderForecast?.SupplierParameters?.FirstOrDefault((a) => a.Agreement.Supplier == _var4);
orderParametersEntry.SupplierCoverageDays = supplierAgreement == null ? 0 : (supplierAgreement?.CoverageDays ?? 0);if (((orderParametersEntry?.SupplierCoverageDays ?? 0) <= 0)) {
orderParametersEntry.SupplierCoverageDays = 1;}
orderParametersPerSKUAndWH?.Add(orderParametersEntry);
}
}
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Initialized orderParametersPerSKUAndWH in " + watch.Elapsed);
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderForecastCalculationProgressUpdate(user, "Found proper SKUs, periods and starting Stocks.", 25);
int? i = 0;
int? loops = 0;
int? numOfOrders = (orderParametersPerSKUAndWH?.Count() ?? 0);
while (((orderParametersPerSKUAndWH?.Count() ?? 0) > 0)) {
loops = loops.GetValueOrDefault(0) + 1;if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "orderParametersPerSKUAndWH.Length: " + (orderParametersPerSKUAndWH?.Count() ?? 0) + ", loops: " + loops.GetValueOrDefault(0) + ", exit value: " + numberOfAnalyticSalesForecast.GetValueOrDefault(0) * numberOfAnalyticSalesForecast.GetValueOrDefault(0));
}
if ((loops > numberOfAnalyticSalesForecast.GetValueOrDefault(0) * numberOfAnalyticSalesForecast.GetValueOrDefault(0))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "CalculateOrderProposal() Something went very wrong... Dont Worry be Happy ");
break;}
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> salesProposedOrders2Delete = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>();
foreach (var orderParametersEntry in orderParametersPerSKUAndWH ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
string innerDesc = "CalculateOrderProposal() Item SKU: " + (orderParametersEntry?.ItemSKU ?? "") + ", Warehouse: " + (orderParametersEntry?.ItemWarehouseCode ?? "");
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Now Process: " + innerDesc);
}
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> saleForecastEntriesPerSKUAndWareHouse = null;
string key = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.GetDictionaryKey((orderParametersEntry?.ItemSKU ?? ""), (orderParametersEntry?.ItemWarehouseCode ?? ""));
if ((salesForecastPerSKUAndWareHouseDictionary.ContainsKey(key))) {
saleForecastEntriesPerSKUAndWareHouse = salesForecastPerSKUAndWareHouseDictionary[key].ToList();}
if ((saleForecastEntriesPerSKUAndWareHouse == null || (((saleForecastEntriesPerSKUAndWareHouse?.Any() ?? false)) == false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error saleForecastEntriesPerSKUAndWareHouse is null or empty: " + innerDesc);
salesProposedOrders2Delete?.Add(orderParametersEntry);
continue;}
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails firstSaleForecast = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(saleForecastEntriesPerSKUAndWareHouse, 0);
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails lastSaleForecast = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(saleForecastEntriesPerSKUAndWareHouse, (saleForecastEntriesPerSKUAndWareHouse?.Count() ?? 0) - 1);
int? startStock = (orderParametersEntry?.CurrentStockUnits ?? 0);
DateTime? startDateTime = (orderParametersEntry?.startDateTime ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
DateTime? endDateTime = endDate4OrderProposalCalculation;
DSS2_SynchromodalityCapacityOptimisation.BO.Item firstItem = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
if ((((itemsDictionary.ContainsKey((firstSaleForecast?.Item?.SKU ?? ""))) == false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error" + "can't find in dictionary item SKU: " + (firstSaleForecast?.Item?.SKU ?? "") + " " + innerDesc);
salesProposedOrders2Delete?.Add(orderParametersEntry);
continue;}
firstItem = itemsDictionary[(firstSaleForecast?.Item?.SKU ?? "")]?.Item;if ((JAL_DEBUG)) {
firstItem.CoverageDays = 3;}
DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder orderParametersEntryWithOrderQuantities = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.CalcItemsWarehouseSalesForecast(enableAnalyticDebug, saleForecastEntriesPerSKUAndWareHouse, orderParametersEntry, (firstSaleForecast?.Warehouse?.Code ?? ""), startStock, startDateTime, endDateTime);
if (((orderParametersEntryWithOrderQuantities?.Finished ?? false))) {
salesProposedOrders2Delete?.Add(orderParametersEntry);
continue;}
orderParametersEntry.CurrentStockUnits = (orderParametersEntryWithOrderQuantities?.CurrentStockUnits ?? 0);orderParametersEntry.Date = (orderParametersEntryWithOrderQuantities?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);orderParametersEntry.Units = (orderParametersEntryWithOrderQuantities?.Units ?? 0);}
foreach (var orderParametersEntry in salesProposedOrders2Delete ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
orderParametersPerSKUAndWH?.Remove(orderParametersEntry);
}
if (((((orderParametersPerSKUAndWH?.Any() ?? false)) == false))) {
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderForecastCalculationProgressUpdate(user, numOfOrders.GetValueOrDefault(0) + " orders processed.", 100);
break;}
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderForecastCalculationProgressUpdate(user, (orderParametersPerSKUAndWH?.Count() ?? 0) + " orders must be created.", (100 * (1 - (numOfOrders.GetValueOrDefault(0) - (orderParametersPerSKUAndWH?.Count() ?? 0)) / numOfOrders.GetValueOrDefault(0))));
DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.MakeOrders(orderParametersPerSKUAndWH, itemsDictionary, allWarehouses, orderForecast);
salesProposedOrders2Delete?.Clear();
foreach (var orderParametersEntry in orderParametersPerSKUAndWH ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Order Units: " + (orderParametersEntry?.Units ?? 0) + ", orderParametersEntry.Date: " + (orderParametersEntry?.Date?.ToString() ?? "") + ", current Stock: " + (orderParametersEntry?.CurrentStockUnits ?? 0) + ", orderParametersEntry.RealOrderArrivalDate: " + (orderParametersEntry?.RealOrderArrivalDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) + ", RealOrderUnits: " + (orderParametersEntry?.RealOrderUnits ?? 0));
}
if (((orderParametersEntry?.ErrorOccured ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "ProposedOrder has Error: " + (orderParametersEntry?.ErrorDesc ?? ""));
salesProposedOrders2Delete?.Add(orderParametersEntry);
continue;}
if (((orderParametersEntry?.RealOrderArrivalDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) < (startDate4OrderProposalCalculation?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
orderParametersEntry.startDateTime = startDate4OrderProposalCalculation;}
else {
if ((orderParametersEntry?.RealOrderArrivalDate?.Date == orderParametersEntry?.Date)) {
orderParametersEntry.startDateTime = (orderParametersEntry?.RealOrderArrivalDate?.AddDays(1) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
else if (((orderParametersEntry?.RealOrderArrivalDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) < (orderParametersEntry?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
string key = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.GetDictionaryKey((orderParametersEntry?.ItemSKU ?? ""), (orderParametersEntry?.ItemWarehouseCode ?? ""));
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> tempSaleForecastPerSKUAndWareHouse = null;
if ((salesForecastPerSKUAndWareHouseDictionary.ContainsKey(key))) {
tempSaleForecastPerSKUAndWareHouse = salesForecastPerSKUAndWareHouseDictionary[key].ToList();}
if ((tempSaleForecastPerSKUAndWareHouse == null || (((tempSaleForecastPerSKUAndWareHouse?.Any() ?? false)) == false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error tempSaleForecastPerSKUAndWareHouse is null or empty " + " when orderParametersEntry.RealOrderArrivalDate.Date: " + (orderParametersEntry?.RealOrderArrivalDate?.Date.ToString() ?? "") + " < orderParametersEntry.Date: " + (orderParametersEntry?.Date?.ToString() ?? ""));
salesProposedOrders2Delete?.Add(orderParametersEntry);
continue;}
foreach (var tempSaleForecast in tempSaleForecastPerSKUAndWareHouse ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>()) {
if (((tempSaleForecast?.ForecastDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) > (orderParametersEntry?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
break;}
if (((tempSaleForecast?.ForecastDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) > (orderParametersEntry?.RealOrderArrivalDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value))) {
orderParametersEntry.CurrentStockUnits = (orderParametersEntry?.CurrentStockUnits ?? 0) + (tempSaleForecast?.Units ?? 0);}
}
orderParametersEntry.startDateTime = (orderParametersEntry?.RealOrderArrivalDate?.AddDays(1) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error: " + " orderParametersEntry.RealOrderArrivalDate.Date: " + (orderParametersEntry?.RealOrderArrivalDate?.Date.ToString() ?? "") + " > orderParametersEntry.Date: " + (orderParametersEntry?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value));
salesProposedOrders2Delete?.Add(orderParametersEntry);
continue;}
}
orderParametersEntry.CurrentStockUnits = (orderParametersEntry?.CurrentStockUnits ?? 0) + (orderParametersEntry?.RealOrderUnits ?? 0);}
foreach (var orderParametersEntry in salesProposedOrders2Delete ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
orderParametersPerSKUAndWH?.Remove(orderParametersEntry);
}
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderForecastCalculationProgressUpdate(user, (orderParametersPerSKUAndWH?.Count() ?? 0) + " orders remaining.", (int)((100 * (1 - ((decimal)((numOfOrders.GetValueOrDefault(0) - (orderParametersPerSKUAndWH?.Count() ?? 0)))) / ((decimal)(numOfOrders))))));
}
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast>(orderForecast);
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "orderParametersPerSKUAndWH Process Finished");
}
watch.Stop();
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "CalculateOrderProposal finished in " + watch.Elapsed);
return true;
}
}


public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> ApplyCoverageDay(System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> salesForecast, DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast modifiedForecast){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "ApplyCoverageDay")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items = salesForecast?.Select((a) => a.Item).ToList().Distinct().ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsInModifiedForecase = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
if ((modifiedForecast != null)) {
itemsInModifiedForecase = modifiedForecast?.OrderForecastDetails?.Select((a) => a.Item).ToList().Distinct().ToList().ToList();}
foreach (var item in items ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
var _var5 = item?.SKU;DSS2_SynchromodalityCapacityOptimisation.BO.Item modifiedItem = itemsInModifiedForecase?.FirstOrDefault((a) => a.SKU == _var5);
if ((modifiedItem != null)) {
item.CoverageDays = (modifiedItem?.CoverageDays ?? 0);}
else {
var _var6 = item?.Supplier?.Id;item.CoverageDays = (new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Agreement>((a) => a.Supplier.Id == _var6)?.FirstOrDefault()?.TargetInventoryDays ?? 0);}
if (((item?.CoverageDays ?? 0) <= 0)) {
item.CoverageDays = 1;}
}
return items;
}
}


public static DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder CalcItemsWarehouseSalesForecast(bool enableAnalyticDebug, System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails> itemWarehouseSalesForecast, DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder proposedOrder, string warehouseCode, int? startStock, DateTime? startDateTime, DateTime? endDateTime){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CalcItemsWarehouseSalesForecast")) {
DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder returnProposedOrder = new DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder();
returnProposedOrder.Finished = true;int? coverageDays = (proposedOrder?.CoverageDays ?? 0) > 0 ? (proposedOrder?.CoverageDays ?? 0) : (proposedOrder?.SupplierCoverageDays ?? 0);
string innerDesc = "CalcItemsWarehouseSalesForecast() item SKU: " + (proposedOrder?.ItemSKU ?? "") + ", warehouse: " + warehouseCode + ", startStock: " + startStock.GetValueOrDefault(0) + ", CoverageDays: " + (proposedOrder?.CoverageDays ?? 0) + ", Supplier CoverageDays from Agreement: " + (proposedOrder?.SupplierCoverageDays ?? 0) + ", Selected CoverageDays to use: " + coverageDays.GetValueOrDefault(0) + ", startDateTime: " + (startDateTime?.ToString() ?? "") + ", endDateTime: " + (endDateTime?.ToString() ?? "");
string errorDesc = "";
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Enter: " + innerDesc);
}
if ((itemWarehouseSalesForecast == null || itemWarehouseSalesForecast?.Count() == 0)) {
returnProposedOrder.Finished = true;returnProposedOrder.ErrorOccured = true;errorDesc = innerDesc + " itemWarehouseSalesForeast is null or empty ";returnProposedOrder.ErrorDesc = errorDesc;zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error: " + errorDesc);
return returnProposedOrder;
}
int? startSkipValue = (itemWarehouseSalesForecast?.FindIndex((a) => a.ForecastDate == startDateTime) ?? 0);
int? skipValue = startSkipValue;
if ((skipValue < 0 || skipValue > (itemWarehouseSalesForecast?.Count() ?? 0))) {
returnProposedOrder.Finished = true;returnProposedOrder.ErrorOccured = true;errorDesc = innerDesc + " itemWarehouseSalesForeast index out of range ";returnProposedOrder.ErrorDesc = errorDesc;zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error: " + errorDesc);
return returnProposedOrder;
}
if ((endDateTime <= startDateTime)) {
returnProposedOrder.Finished = true;returnProposedOrder.ErrorOccured = true;errorDesc = innerDesc + " " + (endDateTime?.Date.ToString() ?? "") + " <= " + (startDateTime?.Date.ToString() ?? "");returnProposedOrder.ErrorDesc = errorDesc;zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, errorDesc);
return returnProposedOrder;
}
int? currentItemStock = startStock;
DateTime? checkStartDateTime = startDateTime;
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "itemWarehouseSalesForecast.Length " + (itemWarehouseSalesForecast?.Count() ?? 0) + ", skipValue: " + skipValue.GetValueOrDefault(0));
}
int? loops = 0;
while ((skipValue < (itemWarehouseSalesForecast?.Count() ?? 0))) {
loops = loops.GetValueOrDefault(0) + 1;if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "skipValue: " + skipValue.GetValueOrDefault(0) + ", loops: " + loops.GetValueOrDefault(0));
}
if ((loops > (itemWarehouseSalesForecast?.Count() ?? 0) * (itemWarehouseSalesForecast?.Count() ?? 0))) {
returnProposedOrder.Finished = true;returnProposedOrder.ErrorOccured = true;errorDesc = innerDesc + " Too many loops Something went very wrong... ";returnProposedOrder.ErrorDesc = errorDesc;zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, errorDesc);
return returnProposedOrder;
}
int? sum = 0;
for (var i = skipValue; i < (itemWarehouseSalesForecast?.Count() ?? 0); i = i + 1) {
int? index = i;
if ((i == skipValue)) {
checkStartDateTime = (zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(itemWarehouseSalesForecast, skipValue.GetValueOrDefault(0))?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " checkStartDateTime: " + (checkStartDateTime?.ToString() ?? ""));
}
if ((checkStartDateTime >= endDateTime)) {
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Process finished: checkStartDateTime: " + (checkStartDateTime?.Date.ToString() ?? "") + " >= endDateTime.Date: " + (endDateTime?.Date.ToString() ?? "") + " " + innerDesc);
}
returnProposedOrder.Finished = true;returnProposedOrder.ErrorOccured = false;return returnProposedOrder;
}
}
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails itemSaleForecast = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(itemWarehouseSalesForecast, index.GetValueOrDefault(0));
sum = sum.GetValueOrDefault(0) + (itemSaleForecast?.Units ?? 0);if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "currentItemStock: " + currentItemStock.GetValueOrDefault(0) + " itemSaleForecast.Units: " + (itemSaleForecast?.Units ?? 0) + " itemSaleForecast.Date: " + (itemSaleForecast?.ForecastDate?.Date.ToString() ?? "") + " sum: " + sum.GetValueOrDefault(0));
}
var _var7 = itemSaleForecast?.Item?.SKU;System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem> saleIteminvItems = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Get<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem>((a) => a.Item.SKU == _var7);
var _var8 = itemSaleForecast?.Warehouse?.Id;DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem safetyStock = saleIteminvItems?.Where((a) => a.Warehouse.Id == _var8).FirstOrDefault();
int? safetyStockLevel = new int?();
if ((safetyStock == null)) {
safetyStockLevel = 0;}
else {
safetyStockLevel = (safetyStock?.SafetyStock ?? 0);}
if ((sum <= currentItemStock.GetValueOrDefault(0) - safetyStockLevel.GetValueOrDefault(0))) {
int? diffDays = (int)(((itemSaleForecast?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)- (checkStartDateTime).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value)).TotalDays);
if ((diffDays >= coverageDays)) {
skipValue = skipValue.GetValueOrDefault(0) + 1;if ((skipValue < (itemWarehouseSalesForecast?.Count() ?? 0))) {
int? skipValueStock = (zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(itemWarehouseSalesForecast, skipValue.GetValueOrDefault(0) - 1)?.Units ?? 0);
currentItemStock = currentItemStock.GetValueOrDefault(0) - skipValueStock.GetValueOrDefault(0);if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " sum: " + sum.GetValueOrDefault(0) + " <= currentItemStock: " + (currentItemStock?.ToString() ?? "") + " for SKU: " + (proposedOrder?.ItemSKU ?? "") + " subtract stock: " + skipValueStock.GetValueOrDefault(0) + " ForecastDate" + (itemSaleForecast?.ForecastDate?.Date.ToString() ?? ""));
}
break;}
else {
return returnProposedOrder;
}
}
else {
if ((i >= (itemWarehouseSalesForecast?.Count() ?? 0) - 1)) {
return returnProposedOrder;
}
}
continue;}
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Forecasted sales: " + sum.GetValueOrDefault(0) + " > currentItemStock: " + (currentItemStock?.ToString() ?? "") + " - safetyStockLevel: " + (safetyStockLevel?.ToString() ?? "") + " ForecastDate" + (itemSaleForecast?.ForecastDate?.Date.ToString() ?? "") + " NEED TO MAKE ORDER");
}
returnProposedOrder.Finished = false;returnProposedOrder.Units = sum.GetValueOrDefault(0) - currentItemStock.GetValueOrDefault(0) + safetyStockLevel.GetValueOrDefault(0);returnProposedOrder.Date = checkStartDateTime;returnProposedOrder.CurrentStockUnits = startStock;for (var j = startSkipValue; j <= skipValue; j = j + 1) {
int? jidx = j;
DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails tempItemSaleForecast = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(itemWarehouseSalesForecast, jidx.GetValueOrDefault(0));
returnProposedOrder.CurrentStockUnits = (returnProposedOrder?.CurrentStockUnits ?? 0) - (tempItemSaleForecast?.Units ?? 0);}
return returnProposedOrder;
}
}
return returnProposedOrder;
}
}


public static int? GetStartingStock(bool enableAnalyticDebug, DateTime? startDateTimeOfOrderForecast, DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails sale, bool allowSameStockDateWithStartDate4OrderProposalCalculation){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetStartingStock")) {
DSS2_SynchromodalityCapacityOptimisation.BO.ConstValues constValues = new DSS2_SynchromodalityCapacityOptimisation.BO.ConstValues();
int? stockErrorReturnValue = (constValues?.StockLowLimit ?? 0);
string desc = "GetStartingStock() SKU: " + (sale?.Item?.SKU ?? "") + ", Warehouse " + (sale?.Warehouse?.Code ?? "") + ", StartDate: " + (startDateTimeOfOrderForecast?.Date.ToString() ?? "") + ",  stock: ";
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Enter " + desc);
}
var _var9 = sale?.Item?.SKU;var _var10 = sale?.Warehouse?.Id;var _var11 = (startDateTimeOfOrderForecast?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand stock = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>((a) => a.Item.SKU == _var9 && a.Warehouse.Id == _var10 && a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date < _var11)?.OrderByDescending((b) => b.StockOnHandDate).FirstOrDefault();
if ((stock == null)) {
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Can't find stock for the previous date from startDateTimeOfOrderForecast " + desc);
}
if ((((allowSameStockDateWithStartDate4OrderProposalCalculation) == false))) {
return stockErrorReturnValue;
}
var _var12 = sale?.Item?.SKU;var _var13 = sale?.Warehouse?.Id;var _var14 = startDateTimeOfOrderForecast?.Date;stock = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>((a) => a.Item.SKU == _var12 && a.Warehouse.Id == _var13 && a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var14)?.FirstOrDefault();if (stock == null) {
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Can't find stock for same date with startDateTimeOfOrderForecast " + desc);
}
return stockErrorReturnValue;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "*** Be careful..!!! you are working with a stock 4 the same day with the starting day of the forecast " + desc);
}
else {
if ((stock?.StockOnHandDate?.Date != startDateTimeOfOrderForecast?.Date.AddDays(- 1))) {
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Can't find stock for previous date from startDateTimeOfOrderForecast " + desc);
}
if ((((allowSameStockDateWithStartDate4OrderProposalCalculation) == false))) {
return stockErrorReturnValue;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "#### Length: " + new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetCount<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>((a) => a.StockOnHandDate == startDateTimeOfOrderForecast).GetValueOrDefault(0));
var _var15 = sale?.Item?.SKU;var _var16 = sale?.Warehouse?.Id;stock = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>((a) => a.Item.SKU == _var15 && a.Warehouse.Id == _var16 && a.StockOnHandDate == startDateTimeOfOrderForecast)?.FirstOrDefault();zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "-----> " + (startDateTimeOfOrderForecast?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " sale " + (sale?.Id ?? 0) + " WH " + (sale?.Warehouse?.Id ?? 0) + " item " + (sale?.Item?.SKU ?? "") + " stock " + stock);
if (stock == null) {
if ((enableAnalyticDebug)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Can't find stock for same day with start Forecast date " + desc);
}
return stockErrorReturnValue;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "*** Be careful..!!! you are working with a stock 4 the same day with tha starting day of the forecast " + desc);
}
}
if ((stock == null)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Logical error " + desc);
return stockErrorReturnValue;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "RETURN: " + desc + (stock?.Units?.ToString() ?? ""));
return (stock?.Units ?? 0);
}
}


public static string GetDictionaryKey(string itemSKU, string warehouseCode){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "GetDictionaryKey")) {
return "item_" + itemSKU + "_warehouse_" + warehouseCode;
}
}


public static void MakeOrders(System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> proposedOrders, System.Collections.Generic.Dictionary<string,DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter> itemParamsDictionary, System.Collections.Generic.Dictionary<string,DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse> allWarehouses, DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast orderForecast){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "MakeOrders")) {
DSS2_SynchromodalityCapacityOptimisation.BO.Item itemPorder = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
DSS2_SynchromodalityCapacityOptimisation.BO.Agreement supAgreement = new DSS2_SynchromodalityCapacityOptimisation.BO.Agreement();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsFullTruck = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsWithoutFullTruck = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
int? palletCountForFullTruck = 0;
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> itemsInProposedOrders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> withoutFullTruckProposedOrders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> withFullTruckProposedOrders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>();
DSS2_SynchromodalityCapacityOptimisation.BO.Item item = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
decimal? SumOfPallets = 0.0m;
decimal? SumOfUnits = 0.0m;
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "proposed orders length: " + (proposedOrders?.Count() ?? 0));
foreach (var pOrder in proposedOrders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
itemPorder = itemParamsDictionary[(pOrder?.ItemSKU ?? "")]?.Item;pOrder.NumberOfPallets = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.UnitsToPallets(itemPorder, (pOrder?.Units ?? 0));var _var17 = itemPorder?.Supplier;DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter suppParam = orderForecast?.SupplierParameters?.FirstOrDefault((a) => a.Agreement != null && a.Agreement.Supplier == _var17);
withoutFullTruckProposedOrders?.Add(pOrder);
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Order proposals without full truck: " + (withoutFullTruckProposedOrders?.Count() ?? 0) + " , with full truck: " + (withFullTruckProposedOrders?.Count() ?? 0));
foreach (var proposedOrder in withoutFullTruckProposedOrders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
itemPorder = itemParamsDictionary[(proposedOrder?.ItemSKU ?? "")]?.Item;itemsInProposedOrders?.Add(itemPorder);
var _var18 = itemPorder?.Supplier;DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter suppParam = orderForecast?.SupplierParameters?.FirstOrDefault((a) => a.Agreement != null && a.Agreement.Supplier == _var18);
DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse warehouse = allWarehouses[(proposedOrder?.ItemWarehouseCode ?? "")];
DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails orderFdetail = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails();
orderFdetail.Item = itemPorder;orderFdetail.Warehouse = warehouse;if ((itemPorder?.MinimumQuantity != null && ((proposedOrder?.Units ?? 0) < (itemPorder?.MinimumQuantity?.Quantity ?? 0)))) {
orderFdetail.Quantity = (itemPorder?.MinimumQuantity?.Quantity ?? 0);}
else {
orderFdetail.Quantity = (proposedOrder?.Units ?? 0);}
orderFdetail.InitialStockLevel = (proposedOrder?.InitialStockLevel ?? 0);orderFdetail.RecommendedOrderDate = (proposedOrder?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);orderFdetail.SupplierCoverageDays = (proposedOrder?.SupplierCoverageDays ?? 0);orderFdetail.ItemCoverageDays = (proposedOrder?.CoverageDays ?? 0);orderFdetail.CreatedOn = DateTime.UtcNow;if (((orderFdetail?.ItemCoverageDays ?? 0) <= 0)) {
orderFdetail.ItemCoverageDays = (orderFdetail?.SupplierCoverageDays ?? 0);}
proposedOrder.RealOrderArrivalDate = (proposedOrder?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);proposedOrder.RealOrderUnits = (proposedOrder?.Units ?? 0);orderForecast?.AddOrderForecastDetails(orderFdetail);
}
System.Collections.Generic.List<DateTime?> uniqueDates = withFullTruckProposedOrders?.Select((a) => a.Date.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date).Select(_n => _n as DateTime?).ToList().Distinct().ToList().OrderBy((a) => a).ToList();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> dailyFullTruckProposedOrders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> dailyItems = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
DSS2_SynchromodalityCapacityOptimisation.BO.Item itemP = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder> finalWithFullTruckProposedOrders = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem> dailyInventoryItems = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem>();
foreach (var day in uniqueDates ?? Enumerable.Empty<DateTime?>()) {
var _var19 = day?.Date;dailyFullTruckProposedOrders = withFullTruckProposedOrders?.Where((a) => a.Date.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var19).ToList().ToList();foreach (var p in dailyFullTruckProposedOrders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
itemP = itemParamsDictionary[(p?.ItemSKU ?? "")]?.Item;dailyItems?.Add(itemP);
SumOfPallets = (dailyFullTruckProposedOrders?.Sum((a) => a.NumberOfPallets) ?? 0);if ((SumOfPallets < 8)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Number of pallets < 8 --> No order is placed for the day: " + (day?.ToString() ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Keeping " + (dailyFullTruckProposedOrders?.Count() ?? 0) + " proposed orders, for the next day.");
continue;}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, " ELSE - sum of pallets: " + SumOfPallets.GetValueOrDefault(0));
if ((SumOfPallets <= 33)) {
decimal? diff = 33 - SumOfPallets.GetValueOrDefault(0);
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Diff is: " + diff.GetValueOrDefault(0));
int? length = (dailyFullTruckProposedOrders?.Count() == 0) ? 1 : (dailyFullTruckProposedOrders?.Count() ?? 0);
decimal? NumberOfPalletsToAddToEachProposedOrder = diff.GetValueOrDefault(0) / length.GetValueOrDefault(0);
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "NumberOfPalletsToAddToEachProposedOrder is: " + NumberOfPalletsToAddToEachProposedOrder.GetValueOrDefault(0));
dailyItems = dailyItems?.OrderBy((a) => a.CoverageDays).ToList().ToList();foreach (var i in dailyItems ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>()) {
var _var20 = i?.SKU;DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem invItem = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.InventoryItem>((a) => a.Item.SKU == _var20)?.FirstOrDefault();
if ((invItem != null)) {
dailyInventoryItems?.Add(invItem);
}
}
foreach (var newProposedOrder in dailyFullTruckProposedOrders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
newProposedOrder.NumberOfPallets = (newProposedOrder?.NumberOfPallets ?? 0) + NumberOfPalletsToAddToEachProposedOrder.GetValueOrDefault(0);SumOfPallets = SumOfPallets.GetValueOrDefault(0) + NumberOfPalletsToAddToEachProposedOrder.GetValueOrDefault(0);finalWithFullTruckProposedOrders?.Add(newProposedOrder);
}
foreach (var fProposedOrder in finalWithFullTruckProposedOrders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
itemPorder = itemParamsDictionary[(fProposedOrder?.ItemSKU ?? "")]?.Item;DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse warehouse = allWarehouses[(fProposedOrder?.ItemWarehouseCode ?? "")];
DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails fullTruckOrderFDetail = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails();
fullTruckOrderFDetail.Item = itemPorder;fullTruckOrderFDetail.Warehouse = warehouse;fullTruckOrderFDetail.Quantity = DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.PalletsToUnits(itemPorder, (fProposedOrder?.NumberOfPallets ?? 0));zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "fullTruckOrderFDetail.Quantity is: " + (fullTruckOrderFDetail?.Quantity ?? 0));
fullTruckOrderFDetail.InitialStockLevel = (fProposedOrder?.InitialStockLevel ?? 0);fullTruckOrderFDetail.RecommendedOrderDate = (fProposedOrder?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);fullTruckOrderFDetail.SupplierCoverageDays = (fProposedOrder?.SupplierCoverageDays ?? 0);fullTruckOrderFDetail.ItemCoverageDays = (fProposedOrder?.CoverageDays ?? 0);fullTruckOrderFDetail.CreatedOn = DateTime.UtcNow;if (((fullTruckOrderFDetail?.ItemCoverageDays ?? 0) <= 0)) {
fullTruckOrderFDetail.ItemCoverageDays = (fullTruckOrderFDetail?.SupplierCoverageDays ?? 0);}
fProposedOrder.RealOrderArrivalDate = (fProposedOrder?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);fProposedOrder.RealOrderUnits = (fProposedOrder?.Units ?? 0);orderForecast?.AddOrderForecastDetails(fullTruckOrderFDetail);
}
SumOfPallets = 0;dailyFullTruckProposedOrders?.Clear();
break;}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Sum of pallets is greater than TUC1.");
foreach (var pOrd in dailyFullTruckProposedOrders ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.ProposedOrder>()) {
}
SumOfPallets = SumOfPallets.GetValueOrDefault(0) - 33;dailyFullTruckProposedOrders?.Clear();
break;}
}
}
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "$$$$ FINISHED");
}
}


public static decimal? UnitsToPallets(DSS2_SynchromodalityCapacityOptimisation.BO.Item item, int? units){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "UnitsToPallets")) {
decimal? palletSize = (item?.PalletSize ?? 0);
decimal? numberOfPallets = 0.0m;
if (palletSize > 0) {
numberOfPallets = units.GetValueOrDefault(0) / palletSize.GetValueOrDefault(0);}
return numberOfPallets;
}
}


public static int? PalletsToUnits(DSS2_SynchromodalityCapacityOptimisation.BO.Item item, decimal? pallets){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "PalletsToUnits")) {
int? palletSize = (item?.PalletSize ?? 0);
int? numberOfUnits = (int)((pallets.GetValueOrDefault(0) * palletSize.GetValueOrDefault(0)));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Units: " + numberOfUnits.GetValueOrDefault(0) + " for item: " + (item?.SKU ?? "") + " pallets are: " + pallets.GetValueOrDefault(0) + " pallet size is: " + palletSize.GetValueOrDefault(0));
return numberOfUnits;
}
}


public static DateTime? CheckNextDeliveryDay(DateTime? checkStartDateTime, string itemSKU){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CheckNextDeliveryDay")) {
bool debugging = false;
DSS2_SynchromodalityCapacityOptimisation.BO.Item item =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(itemSKU);
var _var21 = item?.Supplier?.Id;DSS2_SynchromodalityCapacityOptimisation.BO.Supplier supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Id == _var21)?.FirstOrDefault();
DateTime? test = checkStartDateTime;
if ((item == null)) {
return test;
}
if ((supplier?.Id == 4)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "First Order Day is: " + (((int?)(checkStartDateTime?.DayOfWeek)) ?? 0) + " for item: " + itemSKU);
}
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule> supplierDeliverySchedules = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule>((b) => b.Supplier.Id == supplier.Id)?.OrderBy((a) => a.Weekday).ToList();
System.Collections.Generic.List<int?> days = supplierDeliverySchedules?.Select((a) => a.DBWeekday).ToList().Distinct().ToList();
zAppDev.DotNet.Framework.Utilities.Week week = new zAppDev.DotNet.Framework.Utilities.Week();
double? diff = new double?();
int? dayToCheck = (((int?)(checkStartDateTime?.AddDays(1).DayOfWeek)) ?? 0);
if ((days.Contains((dayToCheck).GetValueOrDefault(0)))) {
return test;
}
else {
if ((supplier?.Id == 4)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "&&Day to check: " + dayToCheck.GetValueOrDefault(0));
days = days.Where((a) => a < dayToCheck).ToList().ToList();zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "First Day: " + days.FirstOrDefault() + " of: " + days.Count());
}
int? previousDeliveryDay = days.Where((a) => a < dayToCheck).ToList().OrderBy((a) => a).ToList().LastOrDefault();
int? nextDeliveryDay = new int?();
diff = dayToCheck.GetValueOrDefault(0) - previousDeliveryDay.GetValueOrDefault(0);if ((days.Count() == 0)) {
nextDeliveryDay = days.Where((a) => a > dayToCheck).ToList().OrderBy((a) => a).ToList().FirstOrDefault();diff = nextDeliveryDay.GetValueOrDefault(0) - dayToCheck.GetValueOrDefault(0);}
diff = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>((0 - diff.GetValueOrDefault(0)));if ((supplier?.Id == 4)) {
}
checkStartDateTime = (checkStartDateTime?.AddDays((diff).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****** aa " + checkStartDateTime.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " *** was " + test.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value));
return test;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****** d " + checkStartDateTime.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " *** was " + test.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value));
return test;
}
}


public static void FixOFDates(DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast ordForecast){using (new zAppDev.DotNet.Framework.Profiling.Profiler("OrderForecastDetails", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "FixOFDates")) {
if ((ordForecast == null)) {
return;
}
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> ordFDetails = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>();
var _var22 = ordForecast?.Id;System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> ofDetails = ordFDetails?.Where((a) => a.OrderForecast.Id == _var22).ToList();
bool debugging = false;
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier> suppliers = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>();
DateTime? checkStartDateTime = new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Utc);
DateTime? test = checkStartDateTime;
if ((debugging)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "First Order Day is: " + (((int?)(checkStartDateTime?.DayOfWeek)) ?? 0) + " for item: ");
}
foreach (var supplier in suppliers ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>()) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule> supplierDeliverySchedules = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.DeliverySchedule>((b) => b.Supplier.Id == supplier.Id)?.OrderBy((a) => a.Weekday).ToList();
System.Collections.Generic.List<int?> days = supplierDeliverySchedules?.Select((a) => a.DBWeekday).ToList().Distinct().ToList();
if ((days.Count() == 7)) {
continue;}
double? diff = new double?();
int? dayToCheck = (((int?)(checkStartDateTime?.AddDays(1).DayOfWeek)) ?? 0);
if ((days.Contains((dayToCheck).GetValueOrDefault(0)))) {
continue;}
else {
if ((supplier?.Id == 4)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "&& Day to check: " + dayToCheck.GetValueOrDefault(0));
days = days.Where((a) => a < dayToCheck).ToList().ToList();zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "First Day: " + days.FirstOrDefault() + " of: " + days.Count());
}
int? previousDeliveryDay = days.Where((a) => a < dayToCheck).ToList().OrderBy((a) => a).ToList().LastOrDefault();
int? nextDeliveryDay = new int?();
diff = dayToCheck.GetValueOrDefault(0) - previousDeliveryDay.GetValueOrDefault(0);if ((days.Count() == 0)) {
nextDeliveryDay = days.Where((a) => a > dayToCheck).ToList().OrderBy((a) => a).ToList().FirstOrDefault();diff = nextDeliveryDay.GetValueOrDefault(0) - dayToCheck.GetValueOrDefault(0);}
diff = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>((0 - diff.GetValueOrDefault(0)));if ((debugging)) {
}
checkStartDateTime = (checkStartDateTime?.AddDays((diff).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****** CheckStartDateTime " + checkStartDateTime.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " *** was " + test.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value));
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForecastDetails",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****** CheckStartDateTime 2  " + checkStartDateTime.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " *** was " + test.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value));
}
foreach (var orderFdetail in ofDetails ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails newZeroOfDetail = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails();
if (((orderFdetail?.Item?.Supplier?.Id == 3 || orderFdetail?.Item?.Supplier?.Id == 5) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 0)) {
newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);newZeroOfDetail.Quantity = 0;newZeroOfDetail.Item = orderFdetail?.Item;newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 2) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
if (((orderFdetail?.Item?.Supplier?.Id == 2) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 0)) {
newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);newZeroOfDetail.Quantity = 0;newZeroOfDetail.Item = orderFdetail?.Item;newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 2) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
if (((orderFdetail?.Item?.Supplier?.Id == 4) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 5)) {
newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);newZeroOfDetail.Quantity = 0;newZeroOfDetail.Item = orderFdetail?.Item;newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 1) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
if (((orderFdetail?.Item?.Supplier?.Id == 4) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 0)) {
newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);newZeroOfDetail.Quantity = 0;newZeroOfDetail.Item = orderFdetail?.Item;newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 3) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);}
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(orderFdetail);
}
}
}



        
	}
}
