// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using zAppDev.DotNet.Framework.Services;
using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Xml.Serialization;
using System.Collections.Generic;

namespace DSS2_SynchromodalityCapacityOptimisation.BLL.ExternalRestServices
{
    public class MapotempoRestService
    {
        public static string BaseUrl
        {
            get
            {
                var baseUrl = System.Configuration.ConfigurationManager.AppSettings["externalapis:Mapotempo:baseurl"];
                if (string.IsNullOrWhiteSpace(baseUrl))
                {
                    baseUrl = "https://geocode.mapotempo.com/0.1/";
                }
                if (!string.IsNullOrWhiteSpace(baseUrl) && !baseUrl.EndsWith("/"))
                {
                    baseUrl += "/";
                }
                return baseUrl;
            }
        }

        public static DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Mapotempo.MapotempoRoot geocode(string country, string street, string postcode, string city, string housenumber, string api_key)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "geocode" + "?country=" + country + "&street=" + street + "&postcode=" + postcode + "&city=" + city + "&housenumber=" + housenumber + "&api_key=" + api_key;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                {
                    { "Accept", "application/json"
                    }
                },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "Mapotempo",
                Operation = "geocode"
            };
            Func<ServiceConsumptionContainer, DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Mapotempo.MapotempoRoot> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Mapotempo.MapotempoRoot>(_options, _httpResponse);
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Mapotempo.MapotempoRoot>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.Mapotempo.MapotempoRoot>(_invocation);
            return _consumer.Invoke(_options);
        }

    }
}