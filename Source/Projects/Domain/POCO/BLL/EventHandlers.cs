
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
    public static class EventHandlers
    {
        public static void HandleOrderForecastCalculationProgressUpdate(string Username, string ProgressMessage, int? Progress)
        {
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "FOO_CLASS",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, string.Format("User {0}, calculation progress: {1}, %: {2}", Username, ProgressMessage, (Progress).GetValueOrDefault(0)));
        }


        public static void HandleOrderCalculationStarted(int? orderForecastId, string user)
        {
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "FOO_CLASS",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "onOrderCalculationStarted was fired.");
            try
            {
                new System.Threading.Thread(() =>
                {
                    zAppDev.DotNet.Framework.Data.MiniSessionManager.ExecuteInUoW(manager =>
                    {
                        Action<int> _function = (a) =>
                        {
                            bool withErrors = false;
                            string errorDesc = "";
                            System.Exception exc = new System.Exception();
                            try
                            {
                                DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetailsExtensions.CalculateOrderProposal(true, orderForecastId, user);
                            }
                            catch (System.Exception x)
                            {
                                withErrors = true;
                                errorDesc = x.Message;
                                exc = x;
                            }
                            DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderCalculationEnded(user, withErrors, errorDesc, exc);
                        };
                        _function(-1);
                    });
                }).Start();
            }
            catch (Exception x)
            {
                log4net.LogManager.GetLogger("Async_Task").Warn("Error in Async Task", x);
            };
        }



    }
}
