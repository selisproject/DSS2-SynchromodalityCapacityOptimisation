
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The CustomVolume extensions
	/// </summary>
	public static class CustomVolumeExtensions
	{
        public static int? Compare(this BO.CustomVolume @this, DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume Volume){using (new zAppDev.DotNet.Framework.Profiling.Profiler("CustomVolume", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "Compare")) {
int? compare = 0;
for (var i = 0; i < (@this?.VolumeComposition?.Count() ?? 0); i = i + 1) {
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(@this?.VolumeComposition, i)?.Units != zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(Volume?.VolumeComposition, i)?.Units)) {
compare = compare.GetValueOrDefault(0) + 1;}
}
return compare;
}
}


public static DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume CustomCopy(this BO.CustomVolume @this){using (new zAppDev.DotNet.Framework.Profiling.Profiler("CustomVolume", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CustomCopy")) {
DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume returnVolume = new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume();
returnVolume.Label = (@this?.Label ?? "");returnVolume.Weight = (@this?.Weight ?? 0);foreach (var j in @this?.VolumeComposition ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition currentVolume = new DSS2_SynchromodalityCapacityOptimisation.BO.VolumeComposition();
currentVolume.Units = (j?.Units ?? 0);currentVolume.VolumeComponent = j?.VolumeComponent;returnVolume?.AddVolumeComposition(currentVolume);
}
return returnVolume;
}
}



        
	}
}
