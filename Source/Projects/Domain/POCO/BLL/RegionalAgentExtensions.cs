
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The RegionalAgent extensions
	/// </summary>
	public static class RegionalAgentExtensions
	{
        public static void InitAddressGeocoordinates(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("RegionalAgent", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "InitAddressGeocoordinates")) {
try {
foreach (var ra in new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAll<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>() ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.MapPoints mapPoint = new DSS2_SynchromodalityCapacityOptimisation.BO.MapPoints();
DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.GoogleGeocode.Root response = DSS2_SynchromodalityCapacityOptimisation.BLL.ExternalRestServices.GoogleGeocodeRestService.GeoLocation((ra?.AgencyAddress ?? ""));
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.GoogleGeocode.Root> ser = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.GoogleGeocode.Root>();
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "RegionalAgent",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "google response " + ser.ToJson(response));
if ((response.results.Length == 0)) {
continue;}
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates addressCoordinates = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
addressCoordinates.Latitude = float.Parse(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(response.results, 0).geometry.location.lat, System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);addressCoordinates.Longitude = float.Parse(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(response.results, 0).geometry.location.lng, System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);ra.AddressCoordinates = addressCoordinates;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Update<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>(ra);
}
}
catch (System.Exception x) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "RegionalAgent",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, x);
}
}
}



        
	}
}
