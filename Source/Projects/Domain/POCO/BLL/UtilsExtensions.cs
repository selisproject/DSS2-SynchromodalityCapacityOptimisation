
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BO
{
	/// <summary>
	/// The Utils extensions
	/// </summary>
	public static class UtilsExtensions
	{
        public static System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage> InitPubMessage(System.Object obj){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "InitPubMessage")) {
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage> messages = new System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage>();
System.Type type = obj.GetType();
System.Collections.Generic.List<zAppDev.DotNet.Framework.Utilities.MambaRuntimeType> properties = zAppDev.DotNet.Framework.Utilities.MambaRuntimeType.FromPropertiesList(type.GetProperties());
foreach (var property in properties ?? Enumerable.Empty<zAppDev.DotNet.Framework.Utilities.MambaRuntimeType>()) {
System.Object value = property.GetValue(obj, new object[] {});
string name = property.Name;
string datatype = zAppDev.DotNet.Framework.Utilities.Common.GetTypeName(property.PropertyType, false);
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "property value " + value + " property Name " + name + " property type " + datatype);
if ((value == null)) {
value = "";}
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage message = new DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage();
if ((datatype == "Guid")) {
continue;}
string valueString = value.ToString();
if (((valueString?.ToLower().Contains("Sarmed".ToLower()) ?? false))) {
continue;}
if (((datatype?.Contains("Date") ?? false))) {
message.type = "DateTime";message.key = name;DateTime? time = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DateTime?>(value);
message.val = (time?.ToString("yyyy-MM-ddThh-mm-ss") ?? "");}
if ((datatype == "Int64")) {
message.type = "long";message.key = name;message.val = value.ToString();}
if ((datatype == "Int32")) {
message.type = "int";message.key = name;message.val = value.ToString();}
if ((datatype == "Single")) {
message.type = "double";message.key = name;message.val = value.ToString();}
if ((datatype == "String")) {
message.type = "string";message.key = name;message.val = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(value);}
messages?.Add(message);
}
return messages;
}
}


public static void DesirializePubMessage(System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage> message, string objectType){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "DesirializePubMessage")) {
if (((objectType == null || objectType == ""))) {
}
switch((objectType)) {
case "OrderWMS":
{
DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS order = DSS2_SynchromodalityCapacityOptimisation.BO.UtilsExtensions.InitOrderWMS(message);
break;}
}
}
}


public static DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS InitOrderWMS(System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage> message){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "InitOrderWMS")) {
DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS order = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS();
foreach (var attr in message ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage>()) {
switch(((attr?.key ?? ""))) {
case "OrdID":
{
order.OrdID = int.Parse((attr?.val ?? ""));break;}
case "OrdOrderID_Remote":
{
order.OrdOrderID_Remote = int.Parse((attr?.val ?? ""));break;}
case "OrdOrderExternalCode":
{
order.OrdOrderExternalCode = (attr?.val ?? "");break;}
case "OrdOrderDescr":
{
order.OrdOrderDescr = (attr?.val ?? "");break;}
case "OrdRegDateTime":
{
order.OrdRegDateTime = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate((attr?.val ?? ""), "yyyy-MM-ddThh-mm-ss", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);break;}
case "OrdDateTime":
{
order.OrdDateTime = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate((attr?.val ?? ""), "yyyy-MM-ddThh-mm-ss", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);break;}
case "OrdDeliveryDateTime":
{
order.OrdDeliveryDateTime = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate((attr?.val ?? ""), "yyyy-MM-ddThh-mm-ss", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);break;}
case "OrdDepositorCode":
{
order.OrdDepositorCode = (attr?.val ?? "");break;}
case "OrdDepositorFullName":
{
order.OrdDepositorFullName = (attr?.val ?? "");break;}
case "OrdCustomerCode":
{
order.OrdCustomerCode = (attr?.val ?? "");break;}
case "OrdCustomerFullName":
{
order.OrdCustomerFullName = (attr?.val ?? "");break;}
case "OrdStatus":
{
order.OrdStatus = int.Parse((attr?.val ?? ""));break;}
case "OrdMemo":
{
order.OrdMemo = (attr?.val ?? "");break;}
case "OrdPurpose":
{
order.OrdPurpose = (attr?.val ?? "");break;}
case "OrdDeliveryval":
{
order.OrdDeliveryValue = float.Parse((attr?.val ?? ""), System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);break;}
case "OrdDeliveryNotes":
{
order.OrdDeliveryNotes = (attr?.val ?? "");break;}
case "OrdIsReturn":
{
order.OrdIsReturn = int.Parse((attr?.val ?? ""));break;}
case "OrdPrdTypeDescr":
{
order.OrdPrdTypeDescr = (attr?.val ?? "");break;}
case "OrdWrhRoutingCode":
{
order.OrdWrhRoutingCode = (attr?.val ?? "");break;}
case "OrdDlsId":
{
order.OrdDlsId = int.Parse((attr?.val ?? ""));break;}
case "OrdDlsDescr":
{
order.OrdDlsDescr = (attr?.val ?? "");break;}
case "OrdDlsCity":
{
order.OrdDlsCity = (attr?.val ?? "");break;}
case "OrdDlsArea":
{
order.OrdDlsArea = (attr?.val ?? "");break;}
case "OrdDlsAddress":
{
order.OrdDlsAddress = (attr?.val ?? "");break;}
case "OrdDlsZipCode":
{
order.OrdDlsZipCode = (attr?.val ?? "");break;}
case "OrdRoutingStatus":
{
order.OrdRoutingStatus = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdBar":
{
order.OrdLfdBar = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdCtn":
{
order.OrdLfdCtn = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdPalElsa":
{
order.OrdLfdPalElsa = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdPalEuro":
{
order.OrdLfdPalEuro = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdPalInd":
{
order.OrdLfdPalInd = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdParOU":
{
order.OrdLfdParOU = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdVar":
{
order.OrdLfdVar = int.Parse((attr?.val ?? ""));break;}
case "OrdLfdVol":
{
order.OrdLfdVol = float.Parse((attr?.val ?? ""), System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);break;}
case "OrdLfdWeight":
{
order.OrdLfdWeight = float.Parse((attr?.val ?? ""), System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);break;}
case "OrdVoucherId":
{
order.OrdVoucherId = int.Parse((attr?.val ?? ""));break;}
case "OrdVoucherDateTime":
{
order.OrdVoucherDateTime = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate((attr?.val ?? ""), "yyyy-MM-ddThh-mm-ss", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);break;}
case "OrdVoucherNumber":
{
order.OrdVoucherNumber = (attr?.val ?? "");break;}
case "OrdVoucherSeries":
{
order.OrdVoucherSeries = (attr?.val ?? "");break;}
case "OrdAgencyCode":
{
order.OrdAgencyCode = (attr?.val ?? "");break;}
case "OrdAgencyAddress":
{
order.OrdAgencyAddress = (attr?.val ?? "");break;}
case "OrdAgencyDescr":
{
order.OrdAgencyDescr = (attr?.val ?? "");break;}
case "OrdTelRouteId":
{
break;}
case "OrdVchRouteNr":
{
order.OrdVchRouteNr = int.Parse((attr?.val ?? ""));break;}
case "OrdVchPlateNr":
{
order.OrdVchPlateNr = (attr?.val ?? "");break;}
case "OrdVhrID":
{
break;}
case "OrdVhrDate":
{
order.OrdVhrDate = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate((attr?.val ?? ""), "yyyy-MM-ddThh-mm-ss", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);break;}
case "OrdLastUpdateDateTime":
{
order.OrdLastUpdateDateTime = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate((attr?.val ?? ""), "yyyy-MM-ddThh-mm-ss", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);break;}
case "OrdReadyForLoading":
{
order.OrdReadyForLoading = int.Parse((attr?.val ?? ""));break;}
case "Polyline":
{
order.Polyline = (attr?.val ?? "");break;}
case "OrdStatusString":
{
order.OrdStatusString = (attr?.val ?? "");break;}
}
}
return order;
}
}


public static void DeserializeMessage(string json){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "DeserializeMessage")) {
try {
zAppDev.DotNet.Framework.Utilities.Serializer<System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage>> ser = new zAppDev.DotNet.Framework.Utilities.Serializer<System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage>>();
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.OrderDTO> ord = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.OrderDTO>();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage> kvpairs = ser.FromJson(json);
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Starting message parsing... JSON contains " + (kvpairs?.Count() ?? 0) + " objects");
foreach (var mes in kvpairs ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage>()) {
if ((mes?.key == "sarmed_order" && int.Parse((mes?.val ?? "")) > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Order received!");
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage payload = kvpairs?.FirstOrDefault((x) => x.key == "payload");
string orderjson = zAppDev.DotNet.Framework.Utilities.Common.Base64Decode((payload?.val ?? ""));
DSS2_SynchromodalityCapacityOptimisation.BO.OrderDTO tempDTO = ord.FromJson(orderjson);
DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS temp = (new DSS2_SynchromodalityCapacityOptimisation.BO.OrderTransformationDataTransformation.Transformer()).OrderWMS_To_OrderDTOReversed(tempDTO);
var _var0 = temp?.OrdID;DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS tempord = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS>((x) => x.OrdID == _var0)?.FirstOrDefault();
if ((tempord != null)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Order found in database. Updating...");
tempord?.CopyFields(temp);
if ((tempord?.OrdRoutingStatus == 30)) {
tempord.ATA = DateTime.UtcNow;System.Collections.Generic.List<string> roles = new System.Collections.Generic.List<string>();
foreach (var role in zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.Roles ?? Enumerable.Empty<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>()) {
roles.Add((role?.Name ?? ""));
}
tempord.OrdStatus = 30;new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Update<DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS>(tempord);
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseSaveOrder((tempord?.OrdID ?? 0), roles.ToArray());
}
else {
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS>(tempord);
System.Collections.Generic.List<string> roles = new System.Collections.Generic.List<string>();
foreach (var role in zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.Roles ?? Enumerable.Empty<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>()) {
roles.Add((role?.Name ?? ""));
}
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseUpdateDatasets((tempord?.Id ?? 0), roles.ToArray());
}
}
else {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "New order received!");
if ((temp?.OrdRoutingStatus == 30)) {
temp.ATA = DateTime.UtcNow;}
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS>(temp);
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Order saved successfully.");
zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Flush();
if ((temp?.OrdRoutingStatus == 20)) {
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderStarted((temp?.OrdID ?? 0), (temp?.OrdVchPlateNr ?? ""));
}
else if ((temp?.OrdRoutingStatus == 30)) {
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOrderFinished((temp?.OrdID ?? 0));
}
else {
System.Collections.Generic.List<string> roles = new System.Collections.Generic.List<string>();
foreach (var role in zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.Roles ?? Enumerable.Empty<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>()) {
roles.Add((role?.Name ?? ""));
}
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOnOrderReceive((temp?.OrdID ?? 0), (temp?.Warehouse ?? ""), (temp?.OrdDlsCity ?? ""), (temp?.OrdAgencyDescr ?? ""), roles.ToArray());
}
}
else if ((mes?.key == "truck_location")) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Truck location received!");
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage payload = kvpairs?.FirstOrDefault((x) => x.key == "payload");
string gpsjson = zAppDev.DotNet.Framework.Utilities.Common.Base64Decode((payload?.val ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "gps data " + gpsjson);
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation> gps = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation>();
DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation temp = gps.FromJson(gpsjson);
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOnGPSReceive((temp?.truck_license_plate ?? ""), (temp?.latitude?.ToString() ?? ""), (temp?.longitude?.ToString() ?? ""));
}
else if ((mes?.key == "sarmed_truck_recommendation" && int.Parse((mes?.val ?? "")) > 0)) {
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage payload = kvpairs?.FirstOrDefault((x) => x.key == "payload");
string truckRec = zAppDev.DotNet.Framework.Utilities.Common.Base64Decode((payload?.val ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "TruckRec " + truckRec);
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.DisruptionAPI.TrucksRecommended> truckSer = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.DisruptionAPI.TrucksRecommended>();
DSS2_SynchromodalityCapacityOptimisation.ExternalStructs.DisruptionAPI.TrucksRecommended truck = truckSer.FromJson(truckRec);
System.Collections.Generic.List<string> roles = new System.Collections.Generic.List<string>();
foreach (var role in zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.Roles ?? Enumerable.Empty<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>()) {
roles.Add((role?.Name ?? ""));
}
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOnNTUARecommendationReceive(truck.order_id, zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(truck.trucks_recommended, 0), roles.ToArray());
}
else if ((mes?.key == "sarmed_truck_eta")) {
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage payload = kvpairs?.FirstOrDefault((x) => x.key == "payload");
string trucketa = zAppDev.DotNet.Framework.Utilities.Common.Base64Decode((payload?.val ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Truck eta mess " + trucketa);
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.truck_eta> truckSer = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.truck_eta>();
DSS2_SynchromodalityCapacityOptimisation.BO.truck_eta truck = truckSer.FromJson(trucketa);
var _var1 = truck?.order_id;DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS orderETA = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS>((ordETA) => ordETA.OrdID == _var1)?.FirstOrDefault();
DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOnETAReceived((truck?.truck_license_plate ?? ""), (truck?.eta ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value), (truck?.order_id ?? 0));
}
else if ((mes?.key == "sarmed_truck_emissions")) {
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage payload = kvpairs?.FirstOrDefault((x) => x.key == "payload");
string truckemiss = zAppDev.DotNet.Framework.Utilities.Common.Base64Decode((payload?.val ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "co2 " + truckemiss);
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.truck_emission> truckSer = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.truck_emission>();
DSS2_SynchromodalityCapacityOptimisation.BO.truck_emission truck = truckSer.FromJson(truckemiss);
var _var2 = truck?.truck_license_plate;DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS orderCOE = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS>((ordco) => ordco.OrdVchPlateNr == _var2 && ordco.OrdRoutingStatus == 20)?.FirstOrDefault();
float? co2em = float.Parse((truck?.co2_emission ?? ""), System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);
co2em = co2em.GetValueOrDefault(0) / 1000;truck.co2_emission = (co2em?.ToString() ?? "");DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOnCO2Received((truck?.truck_license_plate ?? ""), (truck?.co2_emission ?? ""));
}
else if ((mes?.key == "sarmed_truck_delivery_time")) {
DSS2_SynchromodalityCapacityOptimisation.BO.PubMessage payload = kvpairs?.FirstOrDefault((x) => x.key == "payload");
string truckAVGtime = zAppDev.DotNet.Framework.Utilities.Common.Base64Decode((payload?.val ?? ""));
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "avg time " + truckAVGtime);
zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.AVGTime> avgSer = new zAppDev.DotNet.Framework.Utilities.Serializer<DSS2_SynchromodalityCapacityOptimisation.BO.AVGTime>();
DSS2_SynchromodalityCapacityOptimisation.BO.AVGTime avg = avgSer.FromJson(truckAVGtime);
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.AVGTime>(avg);
}
}
}
catch (System.Exception x) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, x);
}
}
}


public static void InitTruckPositions(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "InitTruckPositions")) {
try {
DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent southGrRa = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>((ra) => ra.AgencyCode == "AG.265")?.FirstOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Truck> trucks = southGrRa?.Trucks;
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates creteGeo = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
creteGeo.Latitude = float.Parse("35.317223", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);creteGeo.Longitude = float.Parse("25.099130", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);if (((trucks?.Count() ?? 0) > 0)) {
zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(trucks, 0).CurrentLocation = creteGeo;}
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates athensGeo = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
athensGeo.Latitude = float.Parse("37.923545", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);athensGeo.Longitude = float.Parse("23.889674", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);if (((trucks?.Count() ?? 0) > 1)) {
zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(trucks, 1).CurrentLocation = athensGeo;}
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates athGeo = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
athGeo.Latitude = float.Parse("38.008472", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);athGeo.Longitude = float.Parse("23.715051", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);if (((trucks?.Count() ?? 0) > 2)) {
zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(trucks, 2).CurrentLocation = athGeo;}
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>(southGrRa);
DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent northRa = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>((rag) => rag.AgencyCode == "A.G.709")?.FirstOrDefault();
System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Truck> northtrucks = northRa?.Trucks;
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates lamiaGeo = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
lamiaGeo.Latitude = float.Parse("38.903778", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);lamiaGeo.Longitude = float.Parse("22.541465", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);if (((northtrucks?.Count() ?? 0) > 0)) {
zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(northtrucks, 0).CurrentLocation = lamiaGeo;}
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates IoanninaGeo = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
IoanninaGeo.Latitude = float.Parse("39.655994", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);IoanninaGeo.Longitude = float.Parse("20.826959", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);if (((northtrucks?.Count() ?? 0) > 1)) {
zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(northtrucks, 1).CurrentLocation = IoanninaGeo;}
DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates LarissaGeo = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates();
LarissaGeo.Latitude = float.Parse("39.590443", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);LarissaGeo.Longitude = float.Parse("22.488873", System.Globalization.NumberStyles.Number | System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture);if (((northtrucks?.Count() ?? 0) > 2)) {
zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(northtrucks, 2).CurrentLocation = LarissaGeo;}
new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>(northRa);
foreach (var truck in trucks ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Truck>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation gpsloc = new DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation();
gpsloc.truck_license_plate = (truck?.PlateNumber ?? "");gpsloc.latitude = (truck?.CurrentLocation?.Latitude ?? 0);gpsloc.longitude = (truck?.CurrentLocation?.Longitude ?? 0);gpsloc.timestamp = DSS2_SynchromodalityCapacityOptimisation.BO.UtilsExtensions.ConvertToTimestampFormat(DateTime.UtcNow);gpsloc?.Publish();
}
foreach (var truck in northtrucks ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Truck>()) {
DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation gpsloc = new DSS2_SynchromodalityCapacityOptimisation.BO.GPSLocation();
gpsloc.truck_license_plate = (truck?.PlateNumber ?? "");gpsloc.latitude = (truck?.CurrentLocation?.Latitude ?? 0);gpsloc.longitude = (truck?.CurrentLocation?.Longitude ?? 0);gpsloc.timestamp = DSS2_SynchromodalityCapacityOptimisation.BO.UtilsExtensions.ConvertToTimestampFormat(DateTime.UtcNow);gpsloc?.Publish();
}
}
catch (System.Exception x) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "init truck positions");
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "Utils",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, x);
}
}
}


public static string ConvertToTimestampFormat(DateTime? dt){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "ConvertToTimestampFormat")) {
string years = (dt?.Year.ToString() ?? "");
string months = (dt?.Month.ToString() ?? "");
string days = (dt?.Day.ToString() ?? "");
string hours = (dt?.Hour.ToString() ?? "");
string minutes = (dt?.Minute.ToString() ?? "");
string seconds = (dt?.Second.ToString() ?? "");
return years + "-" + months + "-" + days + "T" + hours + ":" + minutes + ":" + seconds + ".000Z";
}
}



        
	}
}
