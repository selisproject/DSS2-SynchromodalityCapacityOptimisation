// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using Iesi.Collections;
using log4net;
using NHibernate.Event;
using NHibernate.Util;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Data.DAL;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;

namespace DSS2_SynchromodalityCapacityOptimisation.DAL
{
    public class OnSaveOrUpdateListener : ISaveOrUpdateEventListener
    {
        public System.Threading.Tasks.Task OnSaveOrUpdateAsync(SaveOrUpdateEvent @event, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnSaveOrUpdate(@event), cancellationToken);
        }

        public void OnSaveOrUpdate(SaveOrUpdateEvent @event)
        {
            var eventEntity = @event?.Entity;
            if (eventEntity == null) return;
            System.Type entityType = eventEntity.GetType();
            if (entityType.AssemblyQualifiedName.IndexOf("ProxyAssembly", StringComparison.OrdinalIgnoreCase) > -1)
            {
                return;
            }
            if (eventEntity is zAppDev.DotNet.Framework.Data.Domain.IDomainModelClass)
            {
#if NETFRAMEWORK
                var miniSessionManager = MiniSessionManager.Instance;
#else
                var miniSessionManager = ServiceLocator.Current.GetInstance<IMiniSessionService>();
#endif
                var repositoryAction = miniSessionManager.LastAction;
                if (repositoryAction == RepositoryAction.SAVE || repositoryAction == RepositoryAction.UPDATE)
                {
                    ((zAppDev.DotNet.Framework.Data.Domain.IDomainModelClass)(eventEntity))._Validate();
                    if (StaleDataManager.IsStale((zAppDev.DotNet.Framework.Data.Domain.IDomainModelClass)(eventEntity), out string entityName, out object identifier))
                    {
                        throw new NHibernate.StaleObjectStateException(entityName, identifier);
                    }
                }
            }
            try
            {
                DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseOnInstanceSave(eventEntity);
            }
            catch (Exception e)
            {
                (LogManager.GetLogger(this.GetType())).Error("Error on SaveOrUpdate Event: " + eventEntity.GetType().FullName, e);
            }
        }
    }
}