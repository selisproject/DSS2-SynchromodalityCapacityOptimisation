// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNet.SignalR;
using System.Threading;
using System.Web;
using zAppDev.DotNet.Framework.Data;
using log4net;
using System.Collections.Concurrent;
using zAppDev.DotNet.Framework.Hubs;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS2_SynchromodalityCapacityOptimisation.Hubs
{
    public class EventsHub : Hub, IApplicationHub
    {
        public static ConcurrentDictionary<string, string> ConnectedUsers = new ConcurrentDictionary<string, string>();

        public List<string> GetAllConnectedUsers()
        {
            return ConnectedUsers.Values.ToList();
        }

        public static bool UserIsConnected(string username)
        {
            return string.IsNullOrWhiteSpace(username)
                   ? false
                   : ConnectedUsers.Any(v => v.Value == username);
        }

        public bool IsUserConnected(string username)
        {
            return UserIsConnected(username);
        }

        public EventsHub()
        {
        }

        /* Connection Events. They are used to keep the ConnectionID to User Dictionary Updated */
        public override Task OnConnected()
        {
            //log4net.LogManager.GetLogger("SIGNALR").Error("Connected: " + Context.ConnectionId);
            string name = Context.User.Identity.Name;
            if (!string.IsNullOrWhiteSpace(name))
            {
                Groups.Add(Context.ConnectionId, name);
                ConnectedUsers.TryAdd(Context.ConnectionId, name);
            }
            return base.OnConnected();
        }

        public override Task OnDisconnected(bool stopCalled)
        {
            string name = Context.User.Identity.Name;
            if (ConnectedUsers.ContainsKey(Context.ConnectionId))
            {
                ConnectedUsers.TryRemove(Context.ConnectionId, out string val);
            }
            return base.OnDisconnected(stopCalled);
        }

        public override Task OnReconnected()
        {
            return base.OnReconnected();
        }

        public string JoinGroup(string groupName)
        {
            Groups.Add(Context.ConnectionId, groupName);
            return string.Format("Group '{0}' successfully joined", groupName);
        }

        public void NTierUserConnected(string username, string connectionId)
        {
            ConnectedUsers.TryAdd(connectionId, username);
        }

        public void NTierUserDisconnected(string connectionId)
        {
            ConnectedUsers.TryRemove(connectionId, out string val);
        }

        private static void RunInNewThread(Action body)
        {
            body();
        }

        public static List<object> GetEventInputs(Guid guid)
        {
            //return System.Web.HttpContext.Current.Cache.Get(guid.ToString()) as List<object>;
            return CLMS.AppDev.Cache.CacheManager.Current.Get<List<object>>(guid.ToString());
        }

        public static void ForceUserPageReload(string username)
        {
            var hub = GlobalHost.ConnectionManager.GetHubContext<DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub>();
            hub.Clients.Group(username).ForcePageReload();
            hub.Clients.Group("WEB_SERVER").ForcePageReload(Guid.NewGuid(), DateTime.Now.Ticks, username);
        }

        public void ForceUserPageReloadEvent(string username)
        {
            ForceUserPageReload(username);
        }

        /* Events for Debug Messages Listeners */
        private static List<Func<string , string ,  bool>> DebugListeners = new List<Func<string , string ,  bool>>();

        public static void AddDebugListener(Func<string, string, bool> listener)
        {
            DebugListeners.Add(listener);
        }

        public static void RaiseDebugMessage(string type, string data)
        {
            if ((System.Web.HttpContext.Current == null) || (HttpContext.Current.User?.Identity?.Name != "Administrator"))
                return;
            log4net.LogManager.GetLogger("Events").Debug("Event 'DebugMessage' was triggered");
            RunInNewThread(() =>
            {
                foreach (var listener in DebugListeners)
                {
                    listener(type, data);
                }
            });
            var guid = Guid.NewGuid();
            var sessionID = System.Web.HttpContext.Current?.Session == null
                            ? guid.ToString()
                            : System.Web.HttpContext.Current.Session.SessionID;
            System.Web.HttpContext.Current?.Cache.Add(guid.ToString(),
                    new List<object> { type, data },
                    null,
                    System.Web.Caching.Cache.NoAbsoluteExpiration,
                    TimeSpan.FromSeconds(30),
                    System.Web.Caching.CacheItemPriority.Default,
            (_k, _v, _r) => { });
            Microsoft.AspNet.SignalR.IHubContext hub = Microsoft.AspNet.SignalR.GlobalHost.ConnectionManager.GetHubContext<DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub>();
            var timeStamp = DateTime.UtcNow;
            var name = HttpContext.Current?.User.Identity.Name;
            hub.Clients.Group(name).debug(sessionID, guid, timeStamp.Ticks, timeStamp.ToString(System.Globalization.CultureInfo.InstalledUICulture), type, data);
        }

        private static void ProcessListeners(IEnumerable<Action> listeners, bool parallel, bool throwErrors = false)
        {
            if (parallel)
            {
                Parallel.ForEach(listeners, listener =>
                {
                    try
                    {
                        MiniSessionManager.ExecuteInUoW(manager =>
                        {
                            listener();
                        });
                    }
                    catch (Exception x)
                    {
                        LogManager.GetLogger(typeof(EventsHub)).Warn("Error in Listener", x);
                        if (throwErrors) throw;
                    }
                });
            }
            else
            {
                foreach (var listener in listeners)
                {
                    try
                    {
                        listener();
                    }
                    catch (Exception x)
                    {
                        // continue to the next listener on error
                        LogManager.GetLogger(typeof(EventsHub)).Warn("Error in Listener", x);
                        if (throwErrors) throw;
                    }
                }
            }
        }

        /* Events */
        public void OrderForecastCalculationProgressUpdate(Guid eventGuid) { }
        private static readonly List<Func<string , string , int? ,  bool>> OrderForecastCalculationProgressUpdateListeners = new List<Func<string , string , int? ,  bool>>();
        public static void AddOrderForecastCalculationProgressUpdateListener(Func<string , string , int? ,  bool> listener)
        {
            OrderForecastCalculationProgressUpdateListeners.Add(listener);
        }
        public static void RaiseOrderForecastCalculationProgressUpdate(string Username, string ProgressMessage, int? Progress, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OrderForecastCalculationProgressUpdate' was triggered");
            if (OrderForecastCalculationProgressUpdateListeners.Count > 0)
            {
                ProcessListeners(OrderForecastCalculationProgressUpdateListeners.Select(listener => new Action(() =>
                {
                    listener(Username, ProgressMessage, Progress);
                })), true );
            }
        }
        public void RaiseOrderForecastCalculationProgressUpdateEvent (string Username, string ProgressMessage, int? Progress, string _groupName = null)
        {
            RaiseOrderForecastCalculationProgressUpdate(Username,ProgressMessage,Progress,_groupName);
        }
        public void OrderCalculationStarted(Guid eventGuid) { }
        private static readonly List<Func<int? , string ,  bool>> OrderCalculationStartedListeners = new List<Func<int? , string ,  bool>>();
        public static void AddOrderCalculationStartedListener(Func<int? , string ,  bool> listener)
        {
            OrderCalculationStartedListeners.Add(listener);
        }
        public static void RaiseOrderCalculationStarted(int? orderForecastId, string user, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OrderCalculationStarted' was triggered");
            if (OrderCalculationStartedListeners.Count > 0)
            {
                ProcessListeners(OrderCalculationStartedListeners.Select(listener => new Action(() =>
                {
                    listener(orderForecastId, user);
                })), true );
            }
        }
        public void RaiseOrderCalculationStartedEvent (int? orderForecastId, string user, string _groupName = null)
        {
            RaiseOrderCalculationStarted(orderForecastId,user,_groupName);
        }
        public void OrderCalculationEnded(Guid eventGuid) { }
        private static readonly List<Func<string , bool , string , System.Exception ,  bool>> OrderCalculationEndedListeners = new List<Func<string , bool , string , System.Exception ,  bool>>();
        public static void AddOrderCalculationEndedListener(Func<string , bool , string , System.Exception ,  bool> listener)
        {
            OrderCalculationEndedListeners.Add(listener);
        }
        public static void RaiseOrderCalculationEnded(string user, bool withErrors, string errorDesc, System.Exception exc, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OrderCalculationEnded' was triggered");
            if (OrderCalculationEndedListeners.Count > 0)
            {
                ProcessListeners(OrderCalculationEndedListeners.Select(listener => new Action(() =>
                {
                    listener(user, withErrors, errorDesc, exc);
                })), true );
            }
        }
        public void RaiseOrderCalculationEndedEvent (string user, bool withErrors, string errorDesc, System.Exception exc, string _groupName = null)
        {
            RaiseOrderCalculationEnded(user,withErrors,errorDesc,exc,_groupName);
        }
        public void AppNotificationCreated(Guid eventGuid) { }
        private static readonly List<Func< bool>> AppNotificationCreatedListeners = new List<Func< bool>>();
        public static void AddAppNotificationCreatedListener(Func< bool> listener)
        {
            AppNotificationCreatedListeners.Add(listener);
        }
        public static void RaiseAppNotificationCreated(string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'AppNotificationCreated' was triggered");
            if (AppNotificationCreatedListeners.Count > 0)
            {
                ProcessListeners(AppNotificationCreatedListeners.Select(listener => new Action(() =>
                {
                    listener();
                })), true );
            }
        }
        public void RaiseAppNotificationCreatedEvent (string _groupName = null)
        {
            RaiseAppNotificationCreated(_groupName);
        }
        public void OnOrderReceive(Guid eventGuid) { }
        private static readonly List<Func<int? , string , string , string , string[] ,  bool>> OnOrderReceiveListeners = new List<Func<int? , string , string , string , string[] ,  bool>>();
        public static void AddOnOrderReceiveListener(Func<int? , string , string , string , string[] ,  bool> listener)
        {
            OnOrderReceiveListeners.Add(listener);
        }
        public static void RaiseOnOrderReceive(int? orderId, string origin, string destination, string ra, string[] roles, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OnOrderReceive' was triggered");
            if (OnOrderReceiveListeners.Count > 0)
            {
                ProcessListeners(OnOrderReceiveListeners.Select(listener => new Action(() =>
                {
                    listener(orderId, origin, destination, ra, roles);
                })), true );
            }
        }
        public void RaiseOnOrderReceiveEvent (int? orderId, string origin, string destination, string ra, string[] roles, string _groupName = null)
        {
            RaiseOnOrderReceive(orderId,origin,destination,ra,roles,_groupName);
        }
        public void UpdateDatasets(Guid eventGuid) { }
        private static readonly List<Func<int? , string[] ,  bool>> UpdateDatasetsListeners = new List<Func<int? , string[] ,  bool>>();
        public static void AddUpdateDatasetsListener(Func<int? , string[] ,  bool> listener)
        {
            UpdateDatasetsListeners.Add(listener);
        }
        public static void RaiseUpdateDatasets(int? orderId, string[] roles, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'UpdateDatasets' was triggered");
            if (UpdateDatasetsListeners.Count > 0)
            {
                ProcessListeners(UpdateDatasetsListeners.Select(listener => new Action(() =>
                {
                    listener(orderId, roles);
                })), true );
            }
        }
        public void RaiseUpdateDatasetsEvent (int? orderId, string[] roles, string _groupName = null)
        {
            RaiseUpdateDatasets(orderId,roles,_groupName);
        }
        public void OnGPSReceive(Guid eventGuid) { }
        private static readonly List<Func<string , string , string ,  bool>> OnGPSReceiveListeners = new List<Func<string , string , string ,  bool>>();
        public static void AddOnGPSReceiveListener(Func<string , string , string ,  bool> listener)
        {
            OnGPSReceiveListeners.Add(listener);
        }
        public static void RaiseOnGPSReceive(string truckId, string lat, string lng, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OnGPSReceive' was triggered");
            if (OnGPSReceiveListeners.Count > 0)
            {
                ProcessListeners(OnGPSReceiveListeners.Select(listener => new Action(() =>
                {
                    listener(truckId, lat, lng);
                })), true );
            }
        }
        public void RaiseOnGPSReceiveEvent (string truckId, string lat, string lng, string _groupName = null)
        {
            RaiseOnGPSReceive(truckId,lat,lng,_groupName);
        }
        public void OnNTUARecommendationReceive(Guid eventGuid) { }
        private static readonly List<Func<string , string , string[] ,  bool>> OnNTUARecommendationReceiveListeners = new List<Func<string , string , string[] ,  bool>>();
        public static void AddOnNTUARecommendationReceiveListener(Func<string , string , string[] ,  bool> listener)
        {
            OnNTUARecommendationReceiveListeners.Add(listener);
        }
        public static void RaiseOnNTUARecommendationReceive(string order_id, string trucks_recommended, string[] roles, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OnNTUARecommendationReceive' was triggered");
            if (OnNTUARecommendationReceiveListeners.Count > 0)
            {
                ProcessListeners(OnNTUARecommendationReceiveListeners.Select(listener => new Action(() =>
                {
                    listener(order_id, trucks_recommended, roles);
                })), true );
            }
        }
        public void RaiseOnNTUARecommendationReceiveEvent (string order_id, string trucks_recommended, string[] roles, string _groupName = null)
        {
            RaiseOnNTUARecommendationReceive(order_id,trucks_recommended,roles,_groupName);
        }
        public void OnETAReceived(Guid eventGuid) { }
        private static readonly List<Func<string , DateTime? , int? ,  bool>> OnETAReceivedListeners = new List<Func<string , DateTime? , int? ,  bool>>();
        public static void AddOnETAReceivedListener(Func<string , DateTime? , int? ,  bool> listener)
        {
            OnETAReceivedListeners.Add(listener);
        }
        public static void RaiseOnETAReceived(string truck_license_plate, DateTime? eta, int? order_id, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OnETAReceived' was triggered");
            if (OnETAReceivedListeners.Count > 0)
            {
                ProcessListeners(OnETAReceivedListeners.Select(listener => new Action(() =>
                {
                    listener(truck_license_plate, eta, order_id);
                })), true );
            }
        }
        public void RaiseOnETAReceivedEvent (string truck_license_plate, DateTime? eta, int? order_id, string _groupName = null)
        {
            RaiseOnETAReceived(truck_license_plate,eta,order_id,_groupName);
        }
        public void OnCO2Received(Guid eventGuid) { }
        private static readonly List<Func<string , string ,  bool>> OnCO2ReceivedListeners = new List<Func<string , string ,  bool>>();
        public static void AddOnCO2ReceivedListener(Func<string , string ,  bool> listener)
        {
            OnCO2ReceivedListeners.Add(listener);
        }
        public static void RaiseOnCO2Received(string truck_license_plate, string co2, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OnCO2Received' was triggered");
            if (OnCO2ReceivedListeners.Count > 0)
            {
                ProcessListeners(OnCO2ReceivedListeners.Select(listener => new Action(() =>
                {
                    listener(truck_license_plate, co2);
                })), true );
            }
        }
        public void RaiseOnCO2ReceivedEvent (string truck_license_plate, string co2, string _groupName = null)
        {
            RaiseOnCO2Received(truck_license_plate,co2,_groupName);
        }
        public void OrderStarted(Guid eventGuid) { }
        private static readonly List<Func<int? , string ,  bool>> OrderStartedListeners = new List<Func<int? , string ,  bool>>();
        public static void AddOrderStartedListener(Func<int? , string ,  bool> listener)
        {
            OrderStartedListeners.Add(listener);
        }
        public static void RaiseOrderStarted(int? order_id, string plate_number, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OrderStarted' was triggered");
            if (OrderStartedListeners.Count > 0)
            {
                ProcessListeners(OrderStartedListeners.Select(listener => new Action(() =>
                {
                    listener(order_id, plate_number);
                })), true );
            }
        }
        public void RaiseOrderStartedEvent (int? order_id, string plate_number, string _groupName = null)
        {
            RaiseOrderStarted(order_id,plate_number,_groupName);
        }
        public void OrderFinished(Guid eventGuid) { }
        private static readonly List<Func<int? ,  bool>> OrderFinishedListeners = new List<Func<int? ,  bool>>();
        public static void AddOrderFinishedListener(Func<int? ,  bool> listener)
        {
            OrderFinishedListeners.Add(listener);
        }
        public static void RaiseOrderFinished(int? order_id, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'OrderFinished' was triggered");
            if (OrderFinishedListeners.Count > 0)
            {
                ProcessListeners(OrderFinishedListeners.Select(listener => new Action(() =>
                {
                    listener(order_id);
                })), true );
            }
        }
        public void RaiseOrderFinishedEvent (int? order_id, string _groupName = null)
        {
            RaiseOrderFinished(order_id,_groupName);
        }
        public void SaveOrder(Guid eventGuid) { }
        private static readonly List<Func<int? , string[] ,  bool>> SaveOrderListeners = new List<Func<int? , string[] ,  bool>>();
        public static void AddSaveOrderListener(Func<int? , string[] ,  bool> listener)
        {
            SaveOrderListeners.Add(listener);
        }
        public static void RaiseSaveOrder(int? order_id, string[] roles, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'SaveOrder' was triggered");
            if (SaveOrderListeners.Count > 0)
            {
                ProcessListeners(SaveOrderListeners.Select(listener => new Action(() =>
                {
                    listener(order_id, roles);
                })), true );
            }
        }
        public void RaiseSaveOrderEvent (int? order_id, string[] roles, string _groupName = null)
        {
            RaiseSaveOrder(order_id,roles,_groupName);
        }
        public void SignIn(Guid eventGuid) { }
        private static readonly List<Func<string , DateTime? ,  bool>> SignInListeners = new List<Func<string , DateTime? ,  bool>>();
        public static void AddSignInListener(Func<string , DateTime? ,  bool> listener)
        {
            SignInListeners.Add(listener);
        }
        public static void RaiseSignIn(string UserName, DateTime? Time, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'SignIn' was triggered");
            if (SignInListeners.Count > 0)
            {
                ProcessListeners(SignInListeners.Select(listener => new Action(() =>
                {
                    listener(UserName, Time);
                })), false );
            }
        }
        public void RaiseSignInEvent (string UserName, DateTime? Time, string _groupName = null)
        {
            RaiseSignIn(UserName,Time,_groupName);
        }
        public void SignOut(Guid eventGuid) { }
        private static readonly List<Func<string , DateTime? ,  bool>> SignOutListeners = new List<Func<string , DateTime? ,  bool>>();
        public static void AddSignOutListener(Func<string , DateTime? ,  bool> listener)
        {
            SignOutListeners.Add(listener);
        }
        public static void RaiseSignOut(string UserName, DateTime? Time, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'SignOut' was triggered");
            if (SignOutListeners.Count > 0)
            {
                ProcessListeners(SignOutListeners.Select(listener => new Action(() =>
                {
                    listener(UserName, Time);
                })), false );
            }
        }
        public void RaiseSignOutEvent (string UserName, DateTime? Time, string _groupName = null)
        {
            RaiseSignOut(UserName,Time,_groupName);
        }
        public void ApplicationStart(Guid eventGuid) { }
        private static readonly List<Func< bool>> ApplicationStartListeners = new List<Func< bool>>();
        public static void AddApplicationStartListener(Func< bool> listener)
        {
            ApplicationStartListeners.Add(listener);
        }
        public static void RaiseApplicationStart(string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'ApplicationStart' was triggered");
            if (ApplicationStartListeners.Count > 0)
            {
                ProcessListeners(ApplicationStartListeners.Select(listener => new Action(() =>
                {
                    listener();
                })), false );
            }
        }
        public void RaiseApplicationStartEvent (string _groupName = null)
        {
            RaiseApplicationStart(_groupName);
        }
        public void ApplicationEnd(Guid eventGuid) { }
        private static readonly List<Func< bool>> ApplicationEndListeners = new List<Func< bool>>();
        public static void AddApplicationEndListener(Func< bool> listener)
        {
            ApplicationEndListeners.Add(listener);
        }
        public static void RaiseApplicationEnd(string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'ApplicationEnd' was triggered");
            if (ApplicationEndListeners.Count > 0)
            {
                ProcessListeners(ApplicationEndListeners.Select(listener => new Action(() =>
                {
                    listener();
                })), false );
            }
        }
        public void RaiseApplicationEndEvent (string _groupName = null)
        {
            RaiseApplicationEnd(_groupName);
        }
        public void ApplicationError(Guid eventGuid) { }
        private static readonly List<Func<System.Exception ,  bool>> ApplicationErrorListeners = new List<Func<System.Exception ,  bool>>();
        public static void AddApplicationErrorListener(Func<System.Exception ,  bool> listener)
        {
            ApplicationErrorListeners.Add(listener);
        }
        public static void RaiseApplicationError(System.Exception exception, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'ApplicationError' was triggered");
            if (ApplicationErrorListeners.Count > 0)
            {
                ProcessListeners(ApplicationErrorListeners.Select(listener => new Action(() =>
                {
                    listener(exception);
                })), false );
            }
        }
        public void RaiseApplicationErrorEvent (System.Exception exception, string _groupName = null)
        {
            RaiseApplicationError(exception,_groupName);
        }
        public void SessionStart(Guid eventGuid) { }
        private static readonly List<Func< bool>> SessionStartListeners = new List<Func< bool>>();
        public static void AddSessionStartListener(Func< bool> listener)
        {
            SessionStartListeners.Add(listener);
        }
        public static void RaiseSessionStart(string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'SessionStart' was triggered");
            if (SessionStartListeners.Count > 0)
            {
                ProcessListeners(SessionStartListeners.Select(listener => new Action(() =>
                {
                    listener();
                })), false );
            }
        }
        public void RaiseSessionStartEvent (string _groupName = null)
        {
            RaiseSessionStart(_groupName);
        }
        public void OnInstanceSave(Guid eventGuid) { }
        private static readonly List<Func<System.Object ,  bool>> OnInstanceSaveListeners = new List<Func<System.Object ,  bool>>();
        public static void AddOnInstanceSaveListener(Func<System.Object ,  bool> listener)
        {
            OnInstanceSaveListeners.Add(listener);
        }
        public static void RaiseOnInstanceSave(System.Object Instance, string _groupName = null)
        {
            if (OnInstanceSaveListeners.Count > 0)
            {
                ProcessListeners(OnInstanceSaveListeners.Select(listener => new Action(() =>
                {
                    listener(Instance);
                })), false );
            }
        }
        public void RaiseOnInstanceSaveEvent (System.Object Instance, string _groupName = null)
        {
            RaiseOnInstanceSave(Instance,_groupName);
        }
        public void FileDownload(Guid eventGuid) { }
        private static readonly List<Func<string , string ,  bool>> FileDownloadListeners = new List<Func<string , string ,  bool>>();
        public static void AddFileDownloadListener(Func<string , string ,  bool> listener)
        {
            FileDownloadListeners.Add(listener);
        }
        public static void RaiseFileDownload(string path, string username, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'FileDownload' was triggered");
            if (FileDownloadListeners.Count > 0)
            {
                ProcessListeners(FileDownloadListeners.Select(listener => new Action(() =>
                {
                    listener(path, username);
                })), false );
            }
        }
        public void RaiseFileDownloadEvent (string path, string username, string _groupName = null)
        {
            RaiseFileDownload(path,username,_groupName);
        }
        public void ExternalUserCreating(Guid eventGuid) { }
        private static readonly List<Func<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser ,  bool>> ExternalUserCreatingListeners = new List<Func<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser ,  bool>>();
        public static void AddExternalUserCreatingListener(Func<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser ,  bool> listener)
        {
            ExternalUserCreatingListeners.Add(listener);
        }
        public static void RaiseExternalUserCreating(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser user, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'ExternalUserCreating' was triggered");
            if (ExternalUserCreatingListeners.Count > 0)
            {
                ProcessListeners(ExternalUserCreatingListeners.Select(listener => new Action(() =>
                {
                    listener(user);
                })), false , true);
            }
        }
        public void RaiseExternalUserCreatingEvent (zAppDev.DotNet.Framework.Identity.Model.ApplicationUser user, string _groupName = null)
        {
            RaiseExternalUserCreating(user,_groupName);
        }
        public void UserAuthenticating(Guid eventGuid) { }
        private static readonly List<Func<string ,  bool>> UserAuthenticatingListeners = new List<Func<string ,  bool>>();
        public static void AddUserAuthenticatingListener(Func<string ,  bool> listener)
        {
            UserAuthenticatingListeners.Add(listener);
        }
        public static void RaiseUserAuthenticating(string username, string _groupName = null)
        {
            log4net.LogManager.GetLogger(typeof(EventsHub)).Debug("Event 'UserAuthenticating' was triggered");
            if (UserAuthenticatingListeners.Count > 0)
            {
                ProcessListeners(UserAuthenticatingListeners.Select(listener => new Action(() =>
                {
                    listener(username);
                })), false , true);
            }
        }
        public void RaiseUserAuthenticatingEvent (string username, string _groupName = null)
        {
            RaiseUserAuthenticating(username,_groupName);
        }

    }
}