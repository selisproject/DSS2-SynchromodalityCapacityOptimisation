// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ApplicationLanguageTest and is intended
    ///to contain all ApplicationLanguageTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ApplicationLanguage Repository Tests")]
    [Category("ApplicationLanguage Repository Tests")]
    internal class ApplicationLanguageTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ApplicationLanguage`")]
        [Order(0)]
        public void ApplicationLanguage_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _applicationsystembo_datetimeformat_applicationlanguage = new zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat
            {
                LongDatePattern = "DateTimeFormat_LongDatePattern",
                LongTimePattern = "DateTimeFormat_LongTimePattern",
                MonthDayPattern = "DateTimeFormat_MonthDayPattern",
                RFC1123Pattern = "DateTimeFormat_RFC1123Pattern",
                ShortDatePattern = "DateTimeFormat_ShortDatePattern",
                ShortTimePattern = "DateTimeFormat_ShortTimePattern",
                YearMonthPattern = "DateTimeFormat_YearMonthPattern",
            };
            new PersistenceSpecification<zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage>(Session)
            .CheckProperty(p => p.Name, "ApplicationLanguage_Name")
            .CheckProperty(p => p.Code, "ApplicationLanguage_Code")
            .CheckProperty(p => p.Icon, (new System.Text.ASCIIEncoding()).GetBytes("TestValue_Icon"))
            .CheckReference(p => p.DateTimeFormat, _applicationsystembo_datetimeformat_applicationlanguage)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ApplicationLanguage`")]
        [Order(1)]
        public void ApplicationLanguage_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage>(
                              a => true
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Code != string.Empty && a.Code != null)
                              && a.Icon != null
                              && a.DateTimeFormat != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}