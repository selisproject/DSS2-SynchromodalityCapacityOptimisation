// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for StatisticsTest and is intended
    ///to contain all StatisticsTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Statistics Repository Tests")]
    [Category("Statistics Repository Tests")]
    internal class StatisticsTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Statistics`")]
        [Order(0)]
        public void Statistics_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _dashboard_warehouse_statistics = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _dashboard_item_statistics = new DSS2_SynchromodalityCapacityOptimisation.BO.Item
            {
                SKU = "d040e418-2049-44f9-9d86-6d2e047184a9Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 9978,
                SupplierPackSize = 2450,
                InnerPackSize = 8569,
                PalletType = "Item_PalletType",
                PalTI = 4654,
                PalHI = 4523,
                UOM = "Item_UOM",
            };
            var _dashboard_supplier_statistics = new DSS2_SynchromodalityCapacityOptimisation.BO.Supplier
            {
                Code = "Supplier_Code",
                Name = "Supplier_Name",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>(Session)
            .CheckProperty(p => p.TotalUnits, 5963)
            .CheckProperty(p => p.Description, "Statistics_Description")
            .CheckProperty(p => p.Result, 7121)
            .CheckProperty(p => p.LeadTime, 353)
            .CheckProperty(p => p.WeekDay, "Statistics_WeekDay")
            .CheckProperty(p => p.StockOnHandDate, now)
            .CheckProperty(p => p.StockOnHand, 6252)
            .CheckProperty(p => p.OrderQuantity, 703)
            .CheckProperty(p => p.SalesQuantity, 6802)
            .CheckProperty(p => p.QuantitySalesForecast, 7461)
            .CheckProperty(p => p.StockOnHandDateFormatted, "Statistics_StockOnHandDateFormatted")
            .CheckProperty(p => p.SupplierStock, 682)
            .CheckProperty(p => p.QuantitySum, 2935)
            .CheckProperty(p => p.SalesForecastDate, now)
            .CheckProperty(p => p.SalesForecastDateFormatted, "Statistics_SalesForecastDateFormatted")
            .CheckProperty(p => p.Threshold, 222222.22M)
            .CheckProperty(p => p.OrderDate, now)
            .CheckProperty(p => p.OrderDateFormatted, "Statistics_OrderDateFormatted")
            .CheckProperty(p => p.RealOrderQuantity, 2150)
            .CheckReference(p => p.Warehouse, _dashboard_warehouse_statistics)
            .CheckReference(p => p.Item, _dashboard_item_statistics)
            .CheckReference(p => p.Supplier, _dashboard_supplier_statistics)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Statistics`")]
        [Order(1)]
        public void Statistics_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Statistics>(
                              a => true
                              && (a.TotalUnits + 123 > 0)
                              && (a.Description != string.Empty && a.Description != null)
                              && (a.Result + 123 > 0)
                              && (a.LeadTime + 123 > 0)
                              && (a.WeekDay != string.Empty && a.WeekDay != null)
                              && a.StockOnHandDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.StockOnHand + 123 > 0)
                              && (a.OrderQuantity + 123 > 0)
                              && (a.SalesQuantity + 123 > 0)
                              && (a.QuantitySalesForecast + 123 > 0)
                              && (a.StockOnHandDateFormatted != string.Empty && a.StockOnHandDateFormatted != null)
                              && (a.SupplierStock + 123 > 0)
                              && (a.QuantitySum + 123 > 0)
                              && a.SalesForecastDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.SalesForecastDateFormatted != string.Empty && a.SalesForecastDateFormatted != null)
                              && (a.Threshold + 123 > 0)
                              && a.OrderDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.OrderDateFormatted != string.Empty && a.OrderDateFormatted != null)
                              && (a.RealOrderQuantity + 123 > 0)
                              && a.Warehouse != null
                              && a.Item != null
                              && a.Supplier != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}