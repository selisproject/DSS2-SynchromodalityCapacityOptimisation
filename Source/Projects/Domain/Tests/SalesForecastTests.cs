// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for SalesForecastTest and is intended
    ///to contain all SalesForecastTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("SalesForecast Repository Tests")]
    [Category("SalesForecast Repository Tests")]
    internal class SalesForecastTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `SalesForecast`")]
        [Order(0)]
        public void SalesForecast_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _orderproposal_orderforecasts_salesforecast = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast
            {
                ImportId = 7313,
                Status = "OrderForecast_Status",
                CreatedBy = "OrderForecast_CreatedBy",
                CreatedOn = now,
                StartDate = now,
                EndDate = now,
                State = "OrderForecast_State",
            };
            var _orderproposal_orderforecasts_salesforecast2 = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast
            {
                ImportId = 7803,
                Status = "OrderForecast_Status",
                CreatedBy = "OrderForecast_CreatedBy",
                CreatedOn = now,
                StartDate = now,
                EndDate = now,
                State = "OrderForecast_State",
            };
            var _sale_salesforecastdetails_salesforecast = new DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails
            {
                AvgDailyDemandForecast = 222222.22M,
                ComputedStock = 309,
                NewOrder = 9193,
                ForecastDate = now,
                Units = 1239,
            };
            var _sale_salesforecastdetails_salesforecast2 = new DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails
            {
                AvgDailyDemandForecast = 222222.22M,
                ComputedStock = 78,
                NewOrder = 7700,
                ForecastDate = now,
                Units = 1074,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast>(Session)
            .CheckProperty(p => p.ImportId, 4964)
            .CheckProperty(p => p.ImportDate, now)
            .CheckBag(p => p.OrderForecasts, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast>
            {
                _orderproposal_orderforecasts_salesforecast,
                _orderproposal_orderforecasts_salesforecast2
            }))
            .CheckBag(p => p.SalesForecastDetails, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecastDetails>
            {
                _sale_salesforecastdetails_salesforecast,
                _sale_salesforecastdetails_salesforecast2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `SalesForecast`")]
        [Order(1)]
        public void SalesForecast_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.SalesForecast>(
                              a => true
                              && (a.ImportId + 123 > 0)
                              && a.ImportDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.OrderForecasts.Any()
                              && a.SalesForecastDetails.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}