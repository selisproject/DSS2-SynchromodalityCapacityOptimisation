// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for TblZslNormalisationSuggestionTest and is intended
    ///to contain all TblZslNormalisationSuggestionTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("TblZslNormalisationSuggestion Repository Tests")]
    [Category("TblZslNormalisationSuggestion Repository Tests")]
    internal class TblZslNormalisationSuggestionTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `TblZslNormalisationSuggestion`")]
        [Order(0)]
        public void TblZslNormalisationSuggestion_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.TblZslNormalisationSuggestion>(Session)
            .CheckProperty(p => p.Customer_Name, "TblZslNormalisationSuggestion_Customer_Name")
            .CheckProperty(p => p.Sender_Name, "TblZslNormalisationSuggestion_Sender_Name")
            .CheckProperty(p => p.Sender_Address, "TblZslNormalisationSuggestion_Sender_Address")
            .CheckProperty(p => p.Existing_Sender_City, "TblZslNormalisationSuggestion_Existing_Sender_City")
            .CheckProperty(p => p.Normalised_Sender_City, "TblZslNormalisationSuggestion_Normalised_Sender_City")
            .CheckProperty(p => p.Sender_Country, "TblZslNormalisationSuggestion_Sender_Country")
            .CheckProperty(p => p.Sender_Zipcode, 2569)
            .CheckProperty(p => p.Receiver_Name, "TblZslNormalisationSuggestion_Receiver_Name")
            .CheckProperty(p => p.Receiver_Address, "TblZslNormalisationSuggestion_Receiver_Address")
            .CheckProperty(p => p.Existing_Receiver_City, "TblZslNormalisationSuggestion_Existing_Receiver_City")
            .CheckProperty(p => p.Normalised_Receiver_City, "TblZslNormalisationSuggestion_Normalised_Receiver_City")
            .CheckProperty(p => p.Existing_Pallet_Name, "TblZslNormalisationSuggestion_Existing_Pallet_Name")
            .CheckProperty(p => p.Normalised_Pallet_Name, "TblZslNormalisationSuggestion_Normalised_Pallet_Name")
            .CheckProperty(p => p.Receiver_Zipcode, 6290)
            .CheckProperty(p => p.Receiver_Country, "TblZslNormalisationSuggestion_Receiver_Country")
            .CheckProperty(p => p.Carrier, "TblZslNormalisationSuggestion_Carrier")
            .CheckProperty(p => p.Order_Number, "TblZslNormalisationSuggestion_Order_Number")
            .CheckProperty(p => p.Shipment_Date, "TblZslNormalisationSuggestion_Shipment_Date")
            .CheckProperty(p => p.Weight, 1336)
            .CheckProperty(p => p.Volume, 1588)
            .CheckProperty(p => p.Cost, 3413)
            .CheckProperty(p => p.Currency, "TblZslNormalisationSuggestion_Currency")
            .CheckProperty(p => p.Number_Of_Pallets, 434)
            .CheckProperty(p => p.Suggestion_Date, "TblZslNormalisationSuggestion_Suggestion_Date")
            .CheckProperty(p => p.Approved, true)
            .CheckProperty(p => p.ApprovedBy, "TblZslNormalisationSuggestion_ApprovedBy")
            .CheckProperty(p => p.ApprovedDate, "TblZslNormalisationSuggestion_ApprovedDate")
            .CheckProperty(p => p.Owner, "TblZslNormalisationSuggestion_Owner")
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `TblZslNormalisationSuggestion`")]
        [Order(1)]
        public void TblZslNormalisationSuggestion_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.TblZslNormalisationSuggestion> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.TblZslNormalisationSuggestion>(
                              a => true
                              && (a.Customer_Name != string.Empty && a.Customer_Name != null)
                              && (a.Sender_Name != string.Empty && a.Sender_Name != null)
                              && (a.Sender_Address != string.Empty && a.Sender_Address != null)
                              && (a.Existing_Sender_City != string.Empty && a.Existing_Sender_City != null)
                              && (a.Normalised_Sender_City != string.Empty && a.Normalised_Sender_City != null)
                              && (a.Sender_Country != string.Empty && a.Sender_Country != null)
                              && (a.Sender_Zipcode + 123 > 0)
                              && (a.Receiver_Name != string.Empty && a.Receiver_Name != null)
                              && (a.Receiver_Address != string.Empty && a.Receiver_Address != null)
                              && (a.Existing_Receiver_City != string.Empty && a.Existing_Receiver_City != null)
                              && (a.Normalised_Receiver_City != string.Empty && a.Normalised_Receiver_City != null)
                              && (a.Existing_Pallet_Name != string.Empty && a.Existing_Pallet_Name != null)
                              && (a.Normalised_Pallet_Name != string.Empty && a.Normalised_Pallet_Name != null)
                              && (a.Receiver_Zipcode + 123 > 0)
                              && (a.Receiver_Country != string.Empty && a.Receiver_Country != null)
                              && (a.Carrier != string.Empty && a.Carrier != null)
                              && (a.Order_Number != string.Empty && a.Order_Number != null)
                              && (a.Shipment_Date != string.Empty && a.Shipment_Date != null)
                              && (a.Weight + 123 > 0)
                              && (a.Volume + 123 > 0)
                              && (a.Cost + 123 > 0)
                              && (a.Currency != string.Empty && a.Currency != null)
                              && (a.Number_Of_Pallets + 123 > 0)
                              && (a.Suggestion_Date != string.Empty && a.Suggestion_Date != null)
                              && !a.Approved
                              && (a.ApprovedBy != string.Empty && a.ApprovedBy != null)
                              && (a.ApprovedDate != string.Empty && a.ApprovedDate != null)
                              && (a.Owner != string.Empty && a.Owner != null)
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}