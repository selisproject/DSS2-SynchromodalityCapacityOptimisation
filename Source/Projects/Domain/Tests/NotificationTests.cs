// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for NotificationTest and is intended
    ///to contain all NotificationTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Notification Repository Tests")]
    [Category("Notification Repository Tests")]
    internal class NotificationTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Notification`")]
        [Order(0)]
        public void Notification_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _notification_item_notifications = new DSS2_SynchromodalityCapacityOptimisation.BO.Item
            {
                SKU = "8ca4dcb5-ea35-42c9-9907-28a4b1ed5df5Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 4655,
                SupplierPackSize = 7920,
                InnerPackSize = 5009,
                PalletType = "Item_PalletType",
                PalTI = 8246,
                PalHI = 6540,
                UOM = "Item_UOM",
            };
            var _notification_warehouse_notification = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _orderproposal_orderforecastdetails_notification = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails
            {
                ReplenishmentCycle = 7975,
                AutomatedForecast = 889,
                Quantity = 2222222222.22222M,
                RoundQuantity = 2990,
                OrderInventoryDays = 2222222222.22222M,
                RecommendedOrderDate = now,
                SalesForecastDate = now,
                SupplierCanDeliver = true,
                SupplierMaxQuantity = 2222222222.22222M,
                SupplierCoverageDays = 4933,
                ItemCoverageDays = 3646,
                InitialStockLevel = 3159,
                SupplierAvailableQuantity = 384,
                SupplierSharesStock = true,
                CreatedOn = now,
                Status = "OrderForecastDetails_Status",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Notification>(Session)
            .CheckProperty(p => p.Message, "Notification_Message")
            .CheckProperty(p => p.TotalSupplierStock, 9516)
            .CheckProperty(p => p.OrderForecastQuantity, 1570)
            .CheckProperty(p => p.Diff, 2093)
            .CheckProperty(p => p.SalesForecastDate, now)
            .CheckProperty(p => p.CreatedBy, "Notification_CreatedBy")
            .CheckReference(p => p.Item, _notification_item_notifications)
            .CheckReference(p => p.Warehouse, _notification_warehouse_notification)
            .CheckReference(p => p.OrderForecastDetails, _orderproposal_orderforecastdetails_notification)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Notification`")]
        [Order(1)]
        public void Notification_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Notification> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Notification>(
                              a => true
                              && (a.Message != string.Empty && a.Message != null)
                              && (a.TotalSupplierStock + 123 > 0)
                              && (a.OrderForecastQuantity + 123 > 0)
                              && (a.Diff + 123 > 0)
                              && a.SalesForecastDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.CreatedBy != string.Empty && a.CreatedBy != null)
                              && a.Item != null
                              && a.Warehouse != null
                              && a.OrderForecastDetails != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}