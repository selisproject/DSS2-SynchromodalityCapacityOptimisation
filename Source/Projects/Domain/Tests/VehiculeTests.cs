// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for VehiculeTest and is intended
    ///to contain all VehiculeTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Vehicule Repository Tests")]
    [Category("Vehicule Repository Tests")]
    internal class VehiculeTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Vehicule`")]
        [Order(0)]
        public void Vehicule_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _vehiculebo_distancecosts_vehicule = new DSS2_SynchromodalityCapacityOptimisation.BO.DistanceCosts
            {
                TotalDistanceDriven = 222222.22M,
                TotalDistanceService = 222222.22M,
                OilCost = 222222.22M,
                OilConsumption = 222222.22M,
                TireCost = 222222.22M,
                YearlyReparationCost = 222222.22M,
                Cost = 222222.22M,
                TireConsumption = 222222.22M,
            };
            var _vehiculebo_timecosts_vehicule = new DSS2_SynchromodalityCapacityOptimisation.BO.TimeCosts
            {
                DriverSalary = 222222.22M,
                DriverWorkHours = 222222.22M,
                DriverServiceHours = 222222.22M,
                VehiculeHoursPerDay = 222222.22M,
                VehiculeDaysPerYear = 222222.22M,
                RoadTax = 222222.22M,
                VehiculeInsurance = 222222.22M,
                GoodsInssurance = 222222.22M,
                Maintainance = 222222.22M,
                DaysOfReplacementVehicules = 222222.22M,
                CostOfReplacement = 222222.22M,
                Cost = 222222.22M,
            };
            var _vehiculebo_ownershipcost_vehicule = new DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost
            {
                VehiculePurchaseCost = 222222.22M,
                RefrigerationSystemCost = 222222.22M,
                LetteringCost = 222222.22M,
                InterestRate = 222222.22M,
                PaybackPeriod = 222222.22M,
                TotalDistancePerVehicule = 222222.22M,
                AmortizationPeriod = 222222.22M,
                ResidualValue = 222222.22M,
                UtilizationPeriod = 222222.22M,
                Cost = 222222.22M,
            };
            var _vehiculebo_amortizationtype1_vehicule = new DSS2_SynchromodalityCapacityOptimisation.BO.AmortizationType
            {
                Label = "AmortizationType_Label",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule>(Session)
            .CheckProperty(p => p.OverHeadCost, 222222.22M)
            .CheckProperty(p => p.CalculatedTimeCost, 222222.22M)
            .CheckProperty(p => p.CalculatedDistanceCost, 222222.22M)
            .CheckProperty(p => p.CalculatedOwnershipCost, 222222.22M)
            .CheckProperty(p => p.VehiculeType, "Vehicule_VehiculeType")
            .CheckProperty(p => p.Volume, "Vehicule_Volume")
            .CheckProperty(p => p.CO2perKm, 222222.22M)
            .CheckProperty(p => p.AmortizationType, "Vehicule_AmortizationType")
            .CheckProperty(p => p.MaximumLoad, 222222.22M)
            .CheckReference(p => p.DistanceCosts, _vehiculebo_distancecosts_vehicule)
            .CheckReference(p => p.TimeCosts, _vehiculebo_timecosts_vehicule)
            .CheckReference(p => p.OwnershipCost, _vehiculebo_ownershipcost_vehicule)
            .CheckReference(p => p.AmortizationType1, _vehiculebo_amortizationtype1_vehicule)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Vehicule`")]
        [Order(1)]
        public void Vehicule_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule>(
                              a => true
                              && (a.OverHeadCost + 123 > 0)
                              && (a.CalculatedTimeCost + 123 > 0)
                              && (a.CalculatedDistanceCost + 123 > 0)
                              && (a.CalculatedOwnershipCost + 123 > 0)
                              && (a.VehiculeType != string.Empty && a.VehiculeType != null)
                              && (a.Volume != string.Empty && a.Volume != null)
                              && (a.CO2perKm + 123 > 0)
                              && (a.AmortizationType != string.Empty && a.AmortizationType != null)
                              && (a.MaximumLoad + 123 > 0)
                              && a.DistanceCosts != null
                              && a.TimeCosts != null
                              && a.OwnershipCost != null
                              && a.AmortizationType1 != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}