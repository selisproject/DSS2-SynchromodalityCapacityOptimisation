// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for LSPTest and is intended
    ///to contain all LSPTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("LSP Repository Tests")]
    [Category("LSP Repository Tests")]
    internal class LSPTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `LSP`")]
        [Order(0)]
        public void LSP_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _lsp_lspusers_lsp = new DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser
            {
                UserName = "9e3292d1-1689-41e4-ae64-1a74386fab6fLSPUser_UserName",
                PasswordHash = "LSPUser_PasswordHash",
                SecurityStamp = "LSPUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 1214,
                Name = "LSPUser_Name",
                Email = "LSPUser_Email",
                PhoneNumber = "LSPUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _lsp_lspusers_lsp2 = new DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser
            {
                UserName = "1111",
                PasswordHash = "LSPUser_PasswordHash",
                SecurityStamp = "LSPUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 3122,
                Name = "LSPUser_Name",
                Email = "LSPUser_Email",
                PhoneNumber = "LSPUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _scheduledroutes_privatetemplates_visibleto = new DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate
            {
                Origin = "ScheduledRouteTemplate_Origin",
                Destination = "ScheduledRouteTemplate_Destination",
                DaysOfWeek = "ScheduledRouteTemplate_DaysOfWeek",
                PricePerPallet = 222222.22M,
                PricePerKilogram = 222222.22M,
                PricePerCubicMeter = 222222.22M,
                TotalAvailableCapacityKG = 222222.22M,
                EffectiveFrom = now,
                EffectiveTo = now,
                AvailableCapacityLaden = 4059,
                CreatedOn = now,
                IsPrivate = true,
                TotalAvailableCapacityLaden = 1716,
                TotalAvailableCapacityM3 = 222222.22M,
                AvailableCapacityKG = 222222.22M,
                AvailableCapacityM3 = 222222.22M,
                FixedPrice = 222222.22M,
                TruckPlate = "ScheduledRouteTemplate_TruckPlate",
                DeliveryDate = now,
                ByRA = true,
            };
            var _scheduledroutes_privatetemplates_visibleto2 = new DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate
            {
                Origin = "ScheduledRouteTemplate_Origin",
                Destination = "ScheduledRouteTemplate_Destination",
                DaysOfWeek = "ScheduledRouteTemplate_DaysOfWeek",
                PricePerPallet = 222222.22M,
                PricePerKilogram = 222222.22M,
                PricePerCubicMeter = 222222.22M,
                TotalAvailableCapacityKG = 222222.22M,
                EffectiveFrom = now,
                EffectiveTo = now,
                AvailableCapacityLaden = 4477,
                CreatedOn = now,
                IsPrivate = true,
                TotalAvailableCapacityLaden = 830,
                TotalAvailableCapacityM3 = 222222.22M,
                AvailableCapacityKG = 222222.22M,
                AvailableCapacityM3 = 222222.22M,
                FixedPrice = 222222.22M,
                TruckPlate = "ScheduledRouteTemplate_TruckPlate",
                DeliveryDate = now,
                ByRA = true,
            };
            var _workcontract_workcontracts_lsp = new DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract
            {
                CreationDate = now,
                LastUpdate = now,
            };
            var _workcontract_workcontracts_lsp2 = new DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract
            {
                CreationDate = now,
                LastUpdate = now,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.LSP>(Session)
            .CheckProperty(p => p.LSPName, "LSP_LSPName")
            .CheckProperty(p => p.LSPDescription, "LSP_LSPDescription")
            .CheckBag(p => p.LSPUsers, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.LSPUser>
            {
                _lsp_lspusers_lsp,
                _lsp_lspusers_lsp2
            }))
            .CheckBag(p => p.PrivateTemplates, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>
            {
                _scheduledroutes_privatetemplates_visibleto,
                _scheduledroutes_privatetemplates_visibleto2
            }))
            .CheckBag(p => p.WorkContracts, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract>
            {
                _workcontract_workcontracts_lsp,
                _workcontract_workcontracts_lsp2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `LSP`")]
        [Order(1)]
        public void LSP_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.LSP> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.LSP>(
                              a => true
                              && (a.LSPName != string.Empty && a.LSPName != null)
                              && (a.LSPDescription != string.Empty && a.LSPDescription != null)
                              && a.LSPUsers.Any()
                              && a.PrivateTemplates.Any()
                              && a.WorkContracts.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}