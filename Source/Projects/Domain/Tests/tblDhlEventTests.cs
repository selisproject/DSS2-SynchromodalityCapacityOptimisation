// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblDhlEventTest and is intended
    ///to contain all tblDhlEventTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblDhlEvent Repository Tests")]
    [Category("tblDhlEvent Repository Tests")]
    internal class tblDhlEventTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblDhlEvent`")]
        [Order(0)]
        public void tblDhlEvent_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlEvent>(Session)
            .CheckProperty(p => p.EntryDate, now)
            .CheckProperty(p => p.EventType, "tblDhlEvent_EventType")
            .CheckProperty(p => p.System, "tblDhlEvent_System")
            .CheckProperty(p => p.RouteIdentifier, "tblDhlEvent_RouteIdentifier")
            .CheckProperty(p => p.EventLevel, "tblDhlEvent_EventLevel")
            .CheckProperty(p => p.Latitude, "tblDhlEvent_Latitude")
            .CheckProperty(p => p.Longitude, "tblDhlEvent_Longitude")
            .CheckProperty(p => p.Description, "tblDhlEvent_Description")
            .CheckProperty(p => p.StatusCode, "tblDhlEvent_StatusCode")
            .CheckProperty(p => p.EventDateTime, "tblDhlEvent_EventDateTime")
            .CheckProperty(p => p.LastUpdated, now)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblDhlEvent`")]
        [Order(1)]
        public void tblDhlEvent_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlEvent> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlEvent>(
                              a => true
                              && a.EntryDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.EventType != string.Empty && a.EventType != null)
                              && (a.System != string.Empty && a.System != null)
                              && (a.RouteIdentifier != string.Empty && a.RouteIdentifier != null)
                              && (a.EventLevel != string.Empty && a.EventLevel != null)
                              && (a.Latitude != string.Empty && a.Latitude != null)
                              && (a.Longitude != string.Empty && a.Longitude != null)
                              && (a.Description != string.Empty && a.Description != null)
                              && (a.StatusCode != string.Empty && a.StatusCode != null)
                              && (a.EventDateTime != string.Empty && a.EventDateTime != null)
                              && a.LastUpdated.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}