// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblDhlPurchaseTest and is intended
    ///to contain all tblDhlPurchaseTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblDhlPurchase Repository Tests")]
    [Category("tblDhlPurchase Repository Tests")]
    internal class tblDhlPurchaseTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblDhlPurchase`")]
        [Order(0)]
        public void tblDhlPurchase_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPurchase>(Session)
            .CheckProperty(p => p.PurchaseOrder, "tblDhlPurchase_PurchaseOrder")
            .CheckProperty(p => p.OriginCountry, "tblDhlPurchase_OriginCountry")
            .CheckProperty(p => p.OriginProvince, "tblDhlPurchase_OriginProvince")
            .CheckProperty(p => p.OriginCity, "tblDhlPurchase_OriginCity")
            .CheckProperty(p => p.OriginZipCode, "tblDhlPurchase_OriginZipCode")
            .CheckProperty(p => p.OriginAddress, "tblDhlPurchase_OriginAddress")
            .CheckProperty(p => p.OriginLat, "tblDhlPurchase_OriginLat")
            .CheckProperty(p => p.OriginLng, "tblDhlPurchase_OriginLng")
            .CheckProperty(p => p.DestinationCountry, "tblDhlPurchase_DestinationCountry")
            .CheckProperty(p => p.DestinationProvince, "tblDhlPurchase_DestinationProvince")
            .CheckProperty(p => p.DestinationCity, "tblDhlPurchase_DestinationCity")
            .CheckProperty(p => p.DestinationZipCode, "tblDhlPurchase_DestinationZipCode")
            .CheckProperty(p => p.DestinationAddress, "tblDhlPurchase_DestinationAddress")
            .CheckProperty(p => p.DestinationName, "tblDhlPurchase_DestinationName")
            .CheckProperty(p => p.DestinationLat, "tblDhlPurchase_DestinationLat")
            .CheckProperty(p => p.DestinationLng, "tblDhlPurchase_DestinationLng")
            .CheckProperty(p => p.RouteNumber, "tblDhlPurchase_RouteNumber")
            .CheckProperty(p => p.RouteType, "tblDhlPurchase_RouteType")
            .CheckProperty(p => p.FlowType, "tblDhlPurchase_FlowType")
            .CheckProperty(p => p.NumberOfStops, "tblDhlPurchase_NumberOfStops")
            .CheckProperty(p => p.LoadingType, "tblDhlPurchase_LoadingType")
            .CheckProperty(p => p.Master, "tblDhlPurchase_Master")
            .CheckProperty(p => p.RouteKm, 222222.22M)
            .CheckProperty(p => p.SupplierName, "tblDhlPurchase_SupplierName")
            .CheckProperty(p => p.TaxIdentificationNumberSupplier, "tblDhlPurchase_TaxIdentificationNumberSupplier")
            .CheckProperty(p => p.OracleSupplier, "tblDhlPurchase_OracleSupplier")
            .CheckProperty(p => p.CustomerName, "tblDhlPurchase_CustomerName")
            .CheckProperty(p => p.TaxIdentificationNumberCustomer, "tblDhlPurchase_TaxIdentificationNumberCustomer")
            .CheckProperty(p => p.OracleCustomer, "tblDhlPurchase_OracleCustomer")
            .CheckProperty(p => p.TotalUtilizationTruck, "tblDhlPurchase_TotalUtilizationTruck")
            .CheckProperty(p => p.NumberOfPallets, 328)
            .CheckProperty(p => p.OrderM3, 222222.22M)
            .CheckProperty(p => p.OrderKgs, 222222.22M)
            .CheckProperty(p => p.LoadingDateTime, now)
            .CheckProperty(p => p.DeliveryDateTime, now)
            .CheckProperty(p => p.EntryIngress, 7609)
            .CheckProperty(p => p.Cost, 222222.22M)
            .CheckProperty(p => p.AbsolutMargin, 4193)
            .CheckProperty(p => p.Margin, 1533)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblDhlPurchase`")]
        [Order(1)]
        public void tblDhlPurchase_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPurchase> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPurchase>(
                              a => true
                              && (a.PurchaseOrder != string.Empty && a.PurchaseOrder != null)
                              && (a.OriginCountry != string.Empty && a.OriginCountry != null)
                              && (a.OriginProvince != string.Empty && a.OriginProvince != null)
                              && (a.OriginCity != string.Empty && a.OriginCity != null)
                              && (a.OriginZipCode != string.Empty && a.OriginZipCode != null)
                              && (a.OriginAddress != string.Empty && a.OriginAddress != null)
                              && (a.OriginLat != string.Empty && a.OriginLat != null)
                              && (a.OriginLng != string.Empty && a.OriginLng != null)
                              && (a.DestinationCountry != string.Empty && a.DestinationCountry != null)
                              && (a.DestinationProvince != string.Empty && a.DestinationProvince != null)
                              && (a.DestinationCity != string.Empty && a.DestinationCity != null)
                              && (a.DestinationZipCode != string.Empty && a.DestinationZipCode != null)
                              && (a.DestinationAddress != string.Empty && a.DestinationAddress != null)
                              && (a.DestinationName != string.Empty && a.DestinationName != null)
                              && (a.DestinationLat != string.Empty && a.DestinationLat != null)
                              && (a.DestinationLng != string.Empty && a.DestinationLng != null)
                              && (a.RouteNumber != string.Empty && a.RouteNumber != null)
                              && (a.RouteType != string.Empty && a.RouteType != null)
                              && (a.FlowType != string.Empty && a.FlowType != null)
                              && (a.NumberOfStops != string.Empty && a.NumberOfStops != null)
                              && (a.LoadingType != string.Empty && a.LoadingType != null)
                              && (a.Master != string.Empty && a.Master != null)
                              && (a.RouteKm + 123 > 0)
                              && (a.SupplierName != string.Empty && a.SupplierName != null)
                              && (a.TaxIdentificationNumberSupplier != string.Empty && a.TaxIdentificationNumberSupplier != null)
                              && (a.OracleSupplier != string.Empty && a.OracleSupplier != null)
                              && (a.CustomerName != string.Empty && a.CustomerName != null)
                              && (a.TaxIdentificationNumberCustomer != string.Empty && a.TaxIdentificationNumberCustomer != null)
                              && (a.OracleCustomer != string.Empty && a.OracleCustomer != null)
                              && (a.TotalUtilizationTruck != string.Empty && a.TotalUtilizationTruck != null)
                              && (a.NumberOfPallets + 123 > 0)
                              && (a.OrderM3 + 123 > 0)
                              && (a.OrderKgs + 123 > 0)
                              && a.LoadingDateTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.DeliveryDateTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.EntryIngress + 123 > 0)
                              && (a.Cost + 123 > 0)
                              && (a.AbsolutMargin + 123 > 0)
                              && (a.Margin + 123 > 0)
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}