// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ShippingOrderTest and is intended
    ///to contain all ShippingOrderTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ShippingOrder Repository Tests")]
    [Category("ShippingOrder Repository Tests")]
    internal class ShippingOrderTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ShippingOrder`")]
        [Order(0)]
        public void ShippingOrder_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _actionsbo_shipment_shippingorders = new DSS2_SynchromodalityCapacityOptimisation.BO.Shipment
            {
                Owner = "Shipment_Owner",
                DepartureTime = now,
                CurrentStatus = "Shipment_CurrentStatus",
                Temperature = "Shipment_Temperature",
                LoadPercentage = 9774,
                TotalVolume = 222222.22M,
                AverageVolume = 222222.22M,
                MaxTravelTime = 8066,
            };
            var _actionsbo_shipment_shippingorders2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Shipment
            {
                Owner = "Shipment_Owner",
                DepartureTime = now,
                CurrentStatus = "Shipment_CurrentStatus",
                Temperature = "Shipment_Temperature",
                LoadPercentage = 3369,
                TotalVolume = 222222.22M,
                AverageVolume = 222222.22M,
                MaxTravelTime = 8258,
            };
            var _ordersbo_departurepoint_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.Location
            {
                Name = "Location_Name",
                Street = "Location_Street",
                City = "Location_City",
                Country = "Location_Country",
                Number = "Location_Number",
                PostCode = "Location_PostCode",
                Label = "Location_Label",
            };
            var _ordersbo_arrivalpoint_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.Location
            {
                Name = "Location_Name",
                Street = "Location_Street",
                City = "Location_City",
                Country = "Location_Country",
                Number = "Location_Number",
                PostCode = "Location_PostCode",
                Label = "Location_Label",
            };
            var _ordersbo_statusevolution_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.StatusEvolution
            {
                TimeChanged = now,
                Description = "StatusEvolution_Description",
            };
            var _ordersbo_statusevolution_shippingorder2 = new DSS2_SynchromodalityCapacityOptimisation.BO.StatusEvolution
            {
                TimeChanged = now,
                Description = "StatusEvolution_Description",
            };
            var _ordersbo_parent_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder
            {
                DepartureDate = now,
                ArrivalDate = now,
                Shipper = "ShippingOrder_Shipper",
                Carrier = "ShippingOrder_Carrier",
                ItemDescription = "ShippingOrder_ItemDescription",
                Conditions = "ShippingOrder_Conditions",
                AggregateVolume = 222222.22M,
                Priority = 3437,
            };
            var _ordersbo_plannedvolume_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume
            {
                Weight = 222222.22M,
            };
            var _ordersbo_plannedvolume_shippingorder2 = new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume
            {
                Weight = 222222.22M,
            };
            var _ordersbo_actualvolume_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume
            {
                Weight = 222222.22M,
            };
            var _ordersbo_actualvolume_shippingorder2 = new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume
            {
                Weight = 222222.22M,
            };
            var _ordersbo_itemtype_shippingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.ItemType
            {
                Description = "ItemType_Description",
                Temperature = 3480,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder>(Session)
            .CheckProperty(p => p.DepartureDate, now)
            .CheckProperty(p => p.ArrivalDate, now)
            .CheckProperty(p => p.Shipper, "ShippingOrder_Shipper")
            .CheckProperty(p => p.Carrier, "ShippingOrder_Carrier")
            .CheckProperty(p => p.ItemDescription, "ShippingOrder_ItemDescription")
            .CheckProperty(p => p.Conditions, "ShippingOrder_Conditions")
            .CheckProperty(p => p.AggregateVolume, 222222.22M)
            .CheckProperty(p => p.Priority, 1013)
            .CheckBag(p => p.Shipment, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Shipment>
            {
                _actionsbo_shipment_shippingorders,
                _actionsbo_shipment_shippingorders2
            }))
            .CheckReference(p => p.DeparturePoint, _ordersbo_departurepoint_shippingorder)
            .CheckReference(p => p.ArrivalPoint, _ordersbo_arrivalpoint_shippingorder)
            .CheckBag(p => p.StatusEvolution, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.StatusEvolution>
            {
                _ordersbo_statusevolution_shippingorder,
                _ordersbo_statusevolution_shippingorder2
            }))
            .CheckReference(p => p.Parent, _ordersbo_parent_shippingorder)
            .CheckBag(p => p.PlannedVolume, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume>
            {
                _ordersbo_plannedvolume_shippingorder,
                _ordersbo_plannedvolume_shippingorder2
            }))
            .CheckBag(p => p.ActualVolume, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume>
            {
                _ordersbo_actualvolume_shippingorder,
                _ordersbo_actualvolume_shippingorder2
            }))
            .CheckReference(p => p.ItemType, _ordersbo_itemtype_shippingorder)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ShippingOrder`")]
        [Order(1)]
        public void ShippingOrder_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder>(
                              a => true
                              && a.DepartureDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.ArrivalDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Shipper != string.Empty && a.Shipper != null)
                              && (a.Carrier != string.Empty && a.Carrier != null)
                              && (a.ItemDescription != string.Empty && a.ItemDescription != null)
                              && (a.Conditions != string.Empty && a.Conditions != null)
                              && (a.AggregateVolume + 123 > 0)
                              && (a.Priority + 123 > 0)
                              && a.Shipment.Any()
                              && a.DeparturePoint != null
                              && a.ArrivalPoint != null
                              && a.StatusEvolution.Any()
                              && a.Parent != null
                              && a.PlannedVolume.Any()
                              && a.ActualVolume.Any()
                              && a.ItemType != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}