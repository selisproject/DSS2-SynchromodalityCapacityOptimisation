// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ApplicationRoleTest and is intended
    ///to contain all ApplicationRoleTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ApplicationRole Repository Tests")]
    [Category("ApplicationRole Repository Tests")]
    internal class ApplicationRoleTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ApplicationRole`")]
        [Order(0)]
        public void ApplicationRole_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _applicationsystembo_users_roles = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser
            {
                UserName = "6a3e618d-6ae6-40d3-a23c-7467877a07ceApplicationUser_UserName",
                PasswordHash = "ApplicationUser_PasswordHash",
                SecurityStamp = "ApplicationUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 6029,
                Name = "ApplicationUser_Name",
                Email = "ApplicationUser_Email",
                PhoneNumber = "ApplicationUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _applicationsystembo_users_roles2 = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser
            {
                UserName = "1111",
                PasswordHash = "ApplicationUser_PasswordHash",
                SecurityStamp = "ApplicationUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 1313,
                Name = "ApplicationUser_Name",
                Email = "ApplicationUser_Email",
                PhoneNumber = "ApplicationUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _applicationsystembo_permissions_roles = new zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission
            {
                Name = "ApplicationPermission_Name",
                Description = "ApplicationPermission_Description",
                IsCustom = true,
            };
            var _applicationsystembo_permissions_roles2 = new zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission
            {
                Name = "ApplicationPermission_Name",
                Description = "ApplicationPermission_Description",
                IsCustom = true,
            };
            new PersistenceSpecification<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(Session)
            .CheckProperty(p => p.Name, "ApplicationRole_Name")
            .CheckProperty(p => p.Description, "ApplicationRole_Description")
            .CheckProperty(p => p.IsCustom, true)
            .CheckBag(p => p.Users, (new List<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
            {
                _applicationsystembo_users_roles,
                _applicationsystembo_users_roles2
            }))
            .CheckBag(p => p.Permissions, (new List<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>
            {
                _applicationsystembo_permissions_roles,
                _applicationsystembo_permissions_roles2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ApplicationRole`")]
        [Order(1)]
        public void ApplicationRole_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(
                              a => true
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Description != string.Empty && a.Description != null)
                              && !a.IsCustom
                              && a.Users.Any()
                              && a.Permissions.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}