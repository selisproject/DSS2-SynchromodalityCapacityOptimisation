// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for RegionalAgentTest and is intended
    ///to contain all RegionalAgentTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("RegionalAgent Repository Tests")]
    [Category("RegionalAgent Repository Tests")]
    internal class RegionalAgentTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `RegionalAgent`")]
        [Order(0)]
        public void RegionalAgent_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _order_warehousessupport_regionalagentsservice = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _order_warehousessupport_regionalagentsservice2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _regionalagent_rausers_regionalagent = new DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser
            {
                UserName = "60c7b06c-ff59-4f41-bc6b-18c43462270fRegionalAgentUser_UserName",
                PasswordHash = "RegionalAgentUser_PasswordHash",
                SecurityStamp = "RegionalAgentUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 958,
                Name = "RegionalAgentUser_Name",
                Email = "RegionalAgentUser_Email",
                PhoneNumber = "RegionalAgentUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _regionalagent_rausers_regionalagent2 = new DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser
            {
                UserName = "1111",
                PasswordHash = "RegionalAgentUser_PasswordHash",
                SecurityStamp = "RegionalAgentUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 1059,
                Name = "RegionalAgentUser_Name",
                Email = "RegionalAgentUser_Email",
                PhoneNumber = "RegionalAgentUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _regionalagent_addresscoordinates_regionalagent = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates
            {
                Latitude = 222.222f,
                Longitude = 222.222f,
            };
            var _regionalagent_areasupport_regionalagent = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoArea
            {
                Area = "GeoArea_Area",
                PostalCode = "GeoArea_PostalCode",
                County = "GeoArea_County",
            };
            var _regionalagent_areasupport_regionalagent2 = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoArea
            {
                Area = "GeoArea_Area",
                PostalCode = "GeoArea_PostalCode",
                County = "GeoArea_County",
            };
            var _regionalagent_trucks_regionalagent = new DSS2_SynchromodalityCapacityOptimisation.BO.Truck
            {
                PlateNumber = "Truck_PlateNumber",
                Type = "Truck_Type",
            };
            var _regionalagent_trucks_regionalagent2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Truck
            {
                PlateNumber = "Truck_PlateNumber",
                Type = "Truck_Type",
            };
            var _scheduledroutes_scheduledroutetemplates_owner = new DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate
            {
                Origin = "ScheduledRouteTemplate_Origin",
                Destination = "ScheduledRouteTemplate_Destination",
                DaysOfWeek = "ScheduledRouteTemplate_DaysOfWeek",
                PricePerPallet = 222222.22M,
                PricePerKilogram = 222222.22M,
                PricePerCubicMeter = 222222.22M,
                TotalAvailableCapacityKG = 222222.22M,
                EffectiveFrom = now,
                EffectiveTo = now,
                AvailableCapacityLaden = 9322,
                CreatedOn = now,
                IsPrivate = true,
                TotalAvailableCapacityLaden = 8656,
                TotalAvailableCapacityM3 = 222222.22M,
                AvailableCapacityKG = 222222.22M,
                AvailableCapacityM3 = 222222.22M,
                FixedPrice = 222222.22M,
                TruckPlate = "ScheduledRouteTemplate_TruckPlate",
                DeliveryDate = now,
                ByRA = true,
            };
            var _scheduledroutes_scheduledroutetemplates_owner2 = new DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate
            {
                Origin = "ScheduledRouteTemplate_Origin",
                Destination = "ScheduledRouteTemplate_Destination",
                DaysOfWeek = "ScheduledRouteTemplate_DaysOfWeek",
                PricePerPallet = 222222.22M,
                PricePerKilogram = 222222.22M,
                PricePerCubicMeter = 222222.22M,
                TotalAvailableCapacityKG = 222222.22M,
                EffectiveFrom = now,
                EffectiveTo = now,
                AvailableCapacityLaden = 6534,
                CreatedOn = now,
                IsPrivate = true,
                TotalAvailableCapacityLaden = 6589,
                TotalAvailableCapacityM3 = 222222.22M,
                AvailableCapacityKG = 222222.22M,
                AvailableCapacityM3 = 222222.22M,
                FixedPrice = 222222.22M,
                TruckPlate = "ScheduledRouteTemplate_TruckPlate",
                DeliveryDate = now,
                ByRA = true,
            };
            var _workcontract_workcontract_regionalagent = new DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract
            {
                CreationDate = now,
                LastUpdate = now,
            };
            var _workcontract_workcontract_regionalagent2 = new DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract
            {
                CreationDate = now,
                LastUpdate = now,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>(Session)
            .CheckProperty(p => p.AgencyCode, "RegionalAgent_AgencyCode")
            .CheckProperty(p => p.AgencyDescription, "RegionalAgent_AgencyDescription")
            .CheckProperty(p => p.AgencyAddress, "RegionalAgent_AgencyAddress")
            .CheckProperty(p => p.IsSelected, true)
            .CheckProperty(p => p.Rating, 2117)
            .CheckBag(p => p.WarehousesSupport, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>
            {
                _order_warehousessupport_regionalagentsservice,
                _order_warehousessupport_regionalagentsservice2
            }))
            .CheckBag(p => p.RAUsers, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgentUser>
            {
                _regionalagent_rausers_regionalagent,
                _regionalagent_rausers_regionalagent2
            }))
            .CheckReference(p => p.AddressCoordinates, _regionalagent_addresscoordinates_regionalagent)
            .CheckBag(p => p.AreaSupport, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.GeoArea>
            {
                _regionalagent_areasupport_regionalagent,
                _regionalagent_areasupport_regionalagent2
            }))
            .CheckBag(p => p.Trucks, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Truck>
            {
                _regionalagent_trucks_regionalagent,
                _regionalagent_trucks_regionalagent2
            }))
            .CheckBag(p => p.ScheduledRouteTemplates, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>
            {
                _scheduledroutes_scheduledroutetemplates_owner,
                _scheduledroutes_scheduledroutetemplates_owner2
            }))
            .CheckBag(p => p.WorkContract, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.WorkContract>
            {
                _workcontract_workcontract_regionalagent,
                _workcontract_workcontract_regionalagent2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `RegionalAgent`")]
        [Order(1)]
        public void RegionalAgent_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>(
                              a => true
                              && (a.AgencyCode != string.Empty && a.AgencyCode != null)
                              && (a.AgencyDescription != string.Empty && a.AgencyDescription != null)
                              && (a.AgencyAddress != string.Empty && a.AgencyAddress != null)
                              && !a.IsSelected
                              && (a.Rating + 123 > 0)
                              && a.WarehousesSupport.Any()
                              && a.RAUsers.Any()
                              && a.AddressCoordinates != null
                              && a.AreaSupport.Any()
                              && a.Trucks.Any()
                              && a.ScheduledRouteTemplates.Any()
                              && a.WorkContract.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}