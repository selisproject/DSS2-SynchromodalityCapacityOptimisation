// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ScheduledRouteTemplateTest and is intended
    ///to contain all ScheduledRouteTemplateTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ScheduledRouteTemplate Repository Tests")]
    [Category("ScheduledRouteTemplate Repository Tests")]
    internal class ScheduledRouteTemplateTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ScheduledRouteTemplate`")]
        [Order(0)]
        public void ScheduledRouteTemplate_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _scheduledroutes_owner_scheduledroutetemplates = new DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent
            {
                AgencyCode = "RegionalAgent_AgencyCode",
                AgencyDescription = "RegionalAgent_AgencyDescription",
                AgencyAddress = "RegionalAgent_AgencyAddress",
                IsSelected = true,
                Rating = 9065,
            };
            var _scheduledroutes_visibleto_privatetemplates = new DSS2_SynchromodalityCapacityOptimisation.BO.LSP
            {
                LSPName = "LSP_LSPName",
                LSPDescription = "LSP_LSPDescription",
            };
            var _scheduledroutes_visibleto_privatetemplates2 = new DSS2_SynchromodalityCapacityOptimisation.BO.LSP
            {
                LSPName = "LSP_LSPName",
                LSPDescription = "LSP_LSPDescription",
            };
            var _scheduledroutes_ownerlsp_scheduledroutetemplate = new DSS2_SynchromodalityCapacityOptimisation.BO.LSP
            {
                LSPName = "LSP_LSPName",
                LSPDescription = "LSP_LSPDescription",
            };
            var _scheduledroutes_visibletoras_scheduledroutetemplate = new DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent
            {
                AgencyCode = "RegionalAgent_AgencyCode",
                AgencyDescription = "RegionalAgent_AgencyDescription",
                AgencyAddress = "RegionalAgent_AgencyAddress",
                IsSelected = true,
                Rating = 3938,
            };
            var _scheduledroutes_visibletoras_scheduledroutetemplate2 = new DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent
            {
                AgencyCode = "RegionalAgent_AgencyCode",
                AgencyDescription = "RegionalAgent_AgencyDescription",
                AgencyAddress = "RegionalAgent_AgencyAddress",
                IsSelected = true,
                Rating = 325,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>(Session)
            .CheckProperty(p => p.Origin, "ScheduledRouteTemplate_Origin")
            .CheckProperty(p => p.Destination, "ScheduledRouteTemplate_Destination")
            .CheckProperty(p => p.DaysOfWeek, "ScheduledRouteTemplate_DaysOfWeek")
            .CheckProperty(p => p.PricePerPallet, 222222.22M)
            .CheckProperty(p => p.PricePerKilogram, 222222.22M)
            .CheckProperty(p => p.PricePerCubicMeter, 222222.22M)
            .CheckProperty(p => p.TotalAvailableCapacityKG, 222222.22M)
            .CheckProperty(p => p.EffectiveFrom, now)
            .CheckProperty(p => p.EffectiveTo, now)
            .CheckProperty(p => p.AvailableCapacityLaden, 6175)
            .CheckProperty(p => p.CreatedOn, now)
            .CheckProperty(p => p.IsPrivate, true)
            .CheckProperty(p => p.TotalAvailableCapacityLaden, 2954)
            .CheckProperty(p => p.TotalAvailableCapacityM3, 222222.22M)
            .CheckProperty(p => p.AvailableCapacityKG, 222222.22M)
            .CheckProperty(p => p.AvailableCapacityM3, 222222.22M)
            .CheckProperty(p => p.FixedPrice, 222222.22M)
            .CheckProperty(p => p.TruckPlate, "ScheduledRouteTemplate_TruckPlate")
            .CheckProperty(p => p.DeliveryDate, now)
            .CheckProperty(p => p.ByRA, true)
            .CheckReference(p => p.Owner, _scheduledroutes_owner_scheduledroutetemplates)
            .CheckBag(p => p.VisibleTo, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.LSP>
            {
                _scheduledroutes_visibleto_privatetemplates,
                _scheduledroutes_visibleto_privatetemplates2
            }))
            .CheckReference(p => p.OwnerLSP, _scheduledroutes_ownerlsp_scheduledroutetemplate)
            .CheckBag(p => p.VisibleToRAs, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent>
            {
                _scheduledroutes_visibletoras_scheduledroutetemplate,
                _scheduledroutes_visibletoras_scheduledroutetemplate2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ScheduledRouteTemplate`")]
        [Order(1)]
        public void ScheduledRouteTemplate_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.ScheduledRouteTemplate>(
                              a => true
                              && (a.Origin != string.Empty && a.Origin != null)
                              && (a.Destination != string.Empty && a.Destination != null)
                              && (a.DaysOfWeek != string.Empty && a.DaysOfWeek != null)
                              && (a.PricePerPallet + 123 > 0)
                              && (a.PricePerKilogram + 123 > 0)
                              && (a.PricePerCubicMeter + 123 > 0)
                              && (a.TotalAvailableCapacityKG + 123 > 0)
                              && a.EffectiveFrom.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.EffectiveTo.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.TypeOfGoods == DSS2_SynchromodalityCapacityOptimisation.BO.TruckContent.Frozen
                              && (a.AvailableCapacityLaden + 123 > 0)
                              && a.CreatedOn.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.Frequency == DSS2_SynchromodalityCapacityOptimisation.BO.RouteFrequency.Weekly
                              && !a.IsPrivate
                              && (a.TotalAvailableCapacityLaden + 123 > 0)
                              && (a.TotalAvailableCapacityM3 + 123 > 0)
                              && (a.AvailableCapacityKG + 123 > 0)
                              && (a.AvailableCapacityM3 + 123 > 0)
                              && (a.FixedPrice + 123 > 0)
                              && (a.TruckPlate != string.Empty && a.TruckPlate != null)
                              && a.DeliveryDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && !a.ByRA
                              && a.Owner != null
                              && a.VisibleTo.Any()
                              && a.OwnerLSP != null
                              && a.VisibleToRAs.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}