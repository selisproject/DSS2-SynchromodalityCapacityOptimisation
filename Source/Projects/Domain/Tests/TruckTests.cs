// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for TruckTest and is intended
    ///to contain all TruckTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Truck Repository Tests")]
    [Category("Truck Repository Tests")]
    internal class TruckTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Truck`")]
        [Order(0)]
        public void Truck_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _regionalagent_currentlocation_truck = new DSS2_SynchromodalityCapacityOptimisation.BO.GeoCoordinates
            {
                Latitude = 222.222f,
                Longitude = 222.222f,
            };
            var _regionalagent_regionalagent_trucks = new DSS2_SynchromodalityCapacityOptimisation.BO.RegionalAgent
            {
                AgencyCode = "RegionalAgent_AgencyCode",
                AgencyDescription = "RegionalAgent_AgencyDescription",
                AgencyAddress = "RegionalAgent_AgencyAddress",
                IsSelected = true,
                Rating = 4039,
            };
            var _truck_truckdriver_truck = new DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver
            {
                UserName = "e47893b3-1344-47eb-a9ca-7e410930f7a4TruckDriver_UserName",
                PasswordHash = "TruckDriver_PasswordHash",
                SecurityStamp = "TruckDriver_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 2796,
                Name = "TruckDriver_Name",
                Email = "TruckDriver_Email",
                PhoneNumber = "TruckDriver_PhoneNumber",
                LockoutEndDate = now,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Truck>(Session)
            .CheckProperty(p => p.PlateNumber, "Truck_PlateNumber")
            .CheckProperty(p => p.Type, "Truck_Type")
            .CheckReference(p => p.CurrentLocation, _regionalagent_currentlocation_truck)
            .CheckReference(p => p.RegionalAgent, _regionalagent_regionalagent_trucks)
            .CheckReference(p => p.TruckDriver, _truck_truckdriver_truck)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Truck`")]
        [Order(1)]
        public void Truck_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Truck> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Truck>(
                              a => true
                              && (a.PlateNumber != string.Empty && a.PlateNumber != null)
                              && (a.Type != string.Empty && a.Type != null)
                              && a.Content == DSS2_SynchromodalityCapacityOptimisation.BO.TruckContent.Frozen
                              && a.CurrentLocation != null
                              && a.RegionalAgent != null
                              && a.TruckDriver != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}