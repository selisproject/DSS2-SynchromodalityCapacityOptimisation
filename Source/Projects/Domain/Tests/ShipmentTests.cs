// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ShipmentTest and is intended
    ///to contain all ShipmentTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Shipment Repository Tests")]
    [Category("Shipment Repository Tests")]
    internal class ShipmentTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Shipment`")]
        [Order(0)]
        public void Shipment_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _actionsbo_shippingorders_shipment = new DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder
            {
                DepartureDate = now,
                ArrivalDate = now,
                Shipper = "ShippingOrder_Shipper",
                Carrier = "ShippingOrder_Carrier",
                ItemDescription = "ShippingOrder_ItemDescription",
                Conditions = "ShippingOrder_Conditions",
                AggregateVolume = 222222.22M,
                Priority = 3481,
            };
            var _actionsbo_shippingorders_shipment2 = new DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder
            {
                DepartureDate = now,
                ArrivalDate = now,
                Shipper = "ShippingOrder_Shipper",
                Carrier = "ShippingOrder_Carrier",
                ItemDescription = "ShippingOrder_ItemDescription",
                Conditions = "ShippingOrder_Conditions",
                AggregateVolume = 222222.22M,
                Priority = 1967,
            };
            var _actionsbo_shipmentstatus_shipment = new DSS2_SynchromodalityCapacityOptimisation.BO.ShipmentStatus
            {
                TimeReported = now,
                Description = "ShipmentStatus_Description",
                User = "ShipmentStatus_User",
            };
            var _actionsbo_shipmentstatus_shipment2 = new DSS2_SynchromodalityCapacityOptimisation.BO.ShipmentStatus
            {
                TimeReported = now,
                Description = "ShipmentStatus_Description",
                User = "ShipmentStatus_User",
            };
            var _actionsbo_departurepoint_shipment = new DSS2_SynchromodalityCapacityOptimisation.BO.Location
            {
                Name = "Location_Name",
                Street = "Location_Street",
                City = "Location_City",
                Country = "Location_Country",
                Number = "Location_Number",
                PostCode = "Location_PostCode",
                Label = "Location_Label",
            };
            var _actionsbo_finaldestination_shipment_1 = new DSS2_SynchromodalityCapacityOptimisation.BO.Location
            {
                Name = "Location_Name",
                Street = "Location_Street",
                City = "Location_City",
                Country = "Location_Country",
                Number = "Location_Number",
                PostCode = "Location_PostCode",
                Label = "Location_Label",
            };
            var _actionsbo_driver_shipment = new DSS2_SynchromodalityCapacityOptimisation.BO.Driver
            {
                Id = 585,
                UserName = "17babeb4-d33d-4835-a816-bcaed401aa72Driver_UserName",
                PasswordHash = "Driver_PasswordHash",
                SecurityStamp = "Driver_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 4084,
                Name = "Driver_Name",
                Email = "Driver_Email",
                PhoneNumber = "Driver_PhoneNumber",
                LockoutEndDate = now,
            };
            var _actionsbo_occupiedvolume_shipment_1 = new DSS2_SynchromodalityCapacityOptimisation.BO.CustomVolume
            {
                Weight = 222222.22M,
            };
            var _actionsbo_acceptedconditions_shipment = new DSS2_SynchromodalityCapacityOptimisation.BO.Condition
            {
                Description = "Condition_Description",
            };
            var _actionsbo_acceptedconditions_shipment2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Condition
            {
                Description = "Condition_Description",
            };
            var _actionsbo_vehiculetype_shipment = new DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule
            {
                OverHeadCost = 222222.22M,
                CalculatedTimeCost = 222222.22M,
                CalculatedDistanceCost = 222222.22M,
                CalculatedOwnershipCost = 222222.22M,
                VehiculeType = "Vehicule_VehiculeType",
                Volume = "Vehicule_Volume",
                CO2perKm = 222222.22M,
                AmortizationType = "Vehicule_AmortizationType",
                MaximumLoad = 222222.22M,
            };
            var _actionsbo_path_shipment_2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Point
            {
                LocId = 8636,
                Time = 894,
                Distance = 526,
                CurrentLoad = 222222.22M,
            };
            var _actionsbo_path_shipment_22 = new DSS2_SynchromodalityCapacityOptimisation.BO.Point
            {
                LocId = 3708,
                Time = 681,
                Distance = 110,
                CurrentLoad = 222222.22M,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Shipment>(Session)
            .CheckProperty(p => p.Owner, "Shipment_Owner")
            .CheckProperty(p => p.DepartureTime, now)
            .CheckProperty(p => p.Temperature, "Shipment_Temperature")
            .CheckProperty(p => p.LoadPercentage, 8725)
            .CheckProperty(p => p.TotalVolume, 222222.22M)
            .CheckProperty(p => p.AverageVolume, 222222.22M)
            .CheckProperty(p => p.MaxTravelTime, 1778)
            .CheckBag(p => p.ShippingOrders, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.ShippingOrder>
            {
                _actionsbo_shippingorders_shipment,
                _actionsbo_shippingorders_shipment2
            }))
            .CheckBag(p => p.ShipmentStatus, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.ShipmentStatus>
            {
                _actionsbo_shipmentstatus_shipment,
                _actionsbo_shipmentstatus_shipment2
            }))
            .CheckReference(p => p.DeparturePoint, _actionsbo_departurepoint_shipment)
            .CheckReference(p => p.FinalDestination, _actionsbo_finaldestination_shipment_1)
            .CheckReference(p => p.Driver, _actionsbo_driver_shipment)
            .CheckReference(p => p.OccupiedVolume, _actionsbo_occupiedvolume_shipment_1)
            .CheckBag(p => p.AcceptedConditions, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Condition>
            {
                _actionsbo_acceptedconditions_shipment,
                _actionsbo_acceptedconditions_shipment2
            }))
            .CheckReference(p => p.VehiculeType, _actionsbo_vehiculetype_shipment)
            .CheckBag(p => p.Path, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Point>
            {
                _actionsbo_path_shipment_2,
                _actionsbo_path_shipment_22
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Shipment`")]
        [Order(1)]
        public void Shipment_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Shipment> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Shipment>(
                              a => true
                              && (a.Owner != string.Empty && a.Owner != null)
                              && a.DepartureTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Temperature != string.Empty && a.Temperature != null)
                              && (a.LoadPercentage + 123 > 0)
                              && (a.TotalVolume + 123 > 0)
                              && (a.AverageVolume + 123 > 0)
                              && (a.MaxTravelTime + 123 > 0)
                              && a.ShippingOrders.Any()
                              && a.ShipmentStatus.Any()
                              && a.DeparturePoint != null
                              && a.FinalDestination != null
                              && a.Driver != null
                              && a.OccupiedVolume != null
                              && a.AcceptedConditions.Any()
                              && a.VehiculeType != null
                              && a.Path.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}