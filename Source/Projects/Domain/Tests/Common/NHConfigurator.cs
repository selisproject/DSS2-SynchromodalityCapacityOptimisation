// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using NHibernate;
using NHibernate.Cfg;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Dialect;
using NHibernate.Driver;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common
{
    internal class NHConfigurator
    {
        private const string ConnStr = "Data Source=:memory:;Version=3;New=True;";
        //private const string CONN_STR_FILE = "Data Source=C:\\Temp\\sqliteDb.db;New=True;";
        public static Configuration Configuration
        {
            get;
        }
        public static ISessionFactory SessionFactory
        {
            get;
        }

        static NHConfigurator()
        {
            Configuration = new Configuration();
            Configuration.BeforeBindMapping += (sender, args) =>
            {
                foreach (var mappingItem in args.Mapping.Items)
                {
                    var @class = mappingItem as HbmClass;
                    if (@class == null || @class.Version == null) continue;
                    @class.Item1 = null; // Remove Version timestamp. SQLite does not support SQLServer's timestamp type (instead timestamp is a DateTime type).
                }
            };
            Configuration.Configure()
            .DataBaseIntegration(db =>
            {
                db.Dialect<SQLiteDialect>();
                db.Driver<SQLite20Driver>();
                db.ConnectionProvider<TestConnectionProvider>();
                db.ConnectionString = ConnStr;
            })
            .SetProperty(Environment.CurrentSessionContextClass,
                         "thread_static");
            var props = Configuration.Properties;
            if (props.ContainsKey(Environment.ConnectionStringName))
                props.Remove(Environment.ConnectionStringName);
            SessionFactory = Configuration.BuildSessionFactory();
        }
    }
}
