// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for OrderForecastDetailsTest and is intended
    ///to contain all OrderForecastDetailsTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("OrderForecastDetails Repository Tests")]
    [Category("OrderForecastDetails Repository Tests")]
    internal class OrderForecastDetailsTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `OrderForecastDetails`")]
        [Order(0)]
        public void OrderForecastDetails_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _orderproposal_warehouse_replenishmentcycle = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _orderproposal_item_replenishmentcycle = new DSS2_SynchromodalityCapacityOptimisation.BO.Item
            {
                SKU = "4b41a406-0603-4b3b-a3cc-bc87381a4658Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 9871,
                SupplierPackSize = 7094,
                InnerPackSize = 3100,
                PalletType = "Item_PalletType",
                PalTI = 7437,
                PalHI = 1052,
                UOM = "Item_UOM",
            };
            var _orderproposal_orderforecast_orderforecastdetails = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast
            {
                ImportId = 5805,
                Status = "OrderForecast_Status",
                CreatedBy = "OrderForecast_CreatedBy",
                CreatedOn = now,
                StartDate = now,
                EndDate = now,
                State = "OrderForecast_State",
            };
            var _orderproposal_notification_orderforecastdetails = new DSS2_SynchromodalityCapacityOptimisation.BO.Notification
            {
                Message = "Notification_Message",
                TotalSupplierStock = 1816,
                OrderForecastQuantity = 6658,
                Diff = 1801,
                SalesForecastDate = now,
                CreatedBy = "Notification_CreatedBy",
            };
            var _orderproposal_comments_orderforecastdetails = new DSS2_SynchromodalityCapacityOptimisation.BO.Comment
            {
                Text = "Comment_Text",
                AddedBy = "Comment_AddedBy",
            };
            var _orderproposal_comments_orderforecastdetails2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Comment
            {
                Text = "Comment_Text",
                AddedBy = "Comment_AddedBy",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(Session)
            .CheckProperty(p => p.ReplenishmentCycle, 3634)
            .CheckProperty(p => p.AutomatedForecast, 752)
            .CheckProperty(p => p.Quantity, 2222222222.22222M)
            .CheckProperty(p => p.RecommendedOrderDate, now)
            .CheckProperty(p => p.SalesForecastDate, now)
            .CheckProperty(p => p.SupplierCanDeliver, true)
            .CheckProperty(p => p.SupplierMaxQuantity, 2222222222.22222M)
            .CheckProperty(p => p.SupplierCoverageDays, 633)
            .CheckProperty(p => p.ItemCoverageDays, 8708)
            .CheckProperty(p => p.InitialStockLevel, 4331)
            .CheckProperty(p => p.SupplierAvailableQuantity, 2390)
            .CheckProperty(p => p.SupplierSharesStock, true)
            .CheckProperty(p => p.CreatedOn, now)
            .CheckProperty(p => p.Status, "OrderForecastDetails_Status")
            .CheckReference(p => p.Warehouse, _orderproposal_warehouse_replenishmentcycle)
            .CheckReference(p => p.Item, _orderproposal_item_replenishmentcycle)
            .CheckReference(p => p.OrderForecast, _orderproposal_orderforecast_orderforecastdetails)
            .CheckReference(p => p.Notification, _orderproposal_notification_orderforecastdetails)
            .CheckBag(p => p.Comments, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Comment>
            {
                _orderproposal_comments_orderforecastdetails,
                _orderproposal_comments_orderforecastdetails2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `OrderForecastDetails`")]
        [Order(1)]
        public void OrderForecastDetails_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecastDetails>(
                              a => true
                              && (a.ReplenishmentCycle + 123 > 0)
                              && (a.AutomatedForecast + 123 > 0)
                              && (a.Quantity + 123 > 0)
                              && a.RecommendedOrderDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.SalesForecastDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && !a.SupplierCanDeliver
                              && (a.SupplierMaxQuantity + 123 > 0)
                              && (a.SupplierCoverageDays + 123 > 0)
                              && (a.ItemCoverageDays + 123 > 0)
                              && (a.InitialStockLevel + 123 > 0)
                              && (a.SupplierAvailableQuantity + 123 > 0)
                              && !a.SupplierSharesStock
                              && a.CreatedOn.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Status != string.Empty && a.Status != null)
                              && a.Warehouse != null
                              && a.Item != null
                              && a.OrderForecast != null
                              && a.Notification != null
                              && a.Comments.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}