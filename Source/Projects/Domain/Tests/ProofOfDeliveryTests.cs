// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ProofOfDeliveryTest and is intended
    ///to contain all ProofOfDeliveryTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ProofOfDelivery Repository Tests")]
    [Category("ProofOfDelivery Repository Tests")]
    internal class ProofOfDeliveryTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ProofOfDelivery`")]
        [Order(0)]
        public void ProofOfDelivery_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _order_truckdriver_proofofdelivery = new DSS2_SynchromodalityCapacityOptimisation.BO.TruckDriver
            {
                UserName = "a59ab59c-8006-4086-a99f-c5747f273591TruckDriver_UserName",
                PasswordHash = "TruckDriver_PasswordHash",
                SecurityStamp = "TruckDriver_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 8301,
                Name = "TruckDriver_Name",
                Email = "TruckDriver_Email",
                PhoneNumber = "TruckDriver_PhoneNumber",
                LockoutEndDate = now,
            };
            var _order_orderwms_proofofdelivery = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderWMS
            {
                OrdID = 7876,
                OrdOrderID_Remote = 3126,
                OrdOrderExternalCode = "OrderWMS_OrdOrderExternalCode",
                OrdOrderDescr = "OrderWMS_OrdOrderDescr",
                OrdRegDateTime = now,
                OrdDateTime = now,
                OrdDeliveryDateTime = now,
                OrdDepositorCode = "OrderWMS_OrdDepositorCode",
                OrdDepositorFullName = "OrderWMS_OrdDepositorFullName",
                OrdCustomerCode = "OrderWMS_OrdCustomerCode",
                OrdCustomerFullName = "OrderWMS_OrdCustomerFullName",
                OrdStatus = 5371,
                OrdMemo = "OrderWMS_OrdMemo",
                OrdPurpose = "OrderWMS_OrdPurpose",
                OrdDeliveryValue = 222.222f,
                OrdDeliveryNotes = "OrderWMS_OrdDeliveryNotes",
                OrdIsReturn = 2310,
                OrdPrdTypeDescr = "OrderWMS_OrdPrdTypeDescr",
                OrdWrhRoutingCode = "OrderWMS_OrdWrhRoutingCode",
                OrdDlsId = 4450,
                OrdDlsDescr = "OrderWMS_OrdDlsDescr",
                OrdDlsAddress = "OrderWMS_OrdDlsAddress",
                OrdDlsZipCode = "OrderWMS_OrdDlsZipCode",
                OrdDlsCity = "OrderWMS_OrdDlsCity",
                OrdDlsArea = "OrderWMS_OrdDlsArea",
                OrdRoutingStatus = 9081,
                OrdLfdWeight = 222.222f,
                OrdLfdVol = 222.222f,
                OrdLfdCtn = 820,
                OrdLfdBar = 9223,
                OrdLfdPalEuro = 9549,
                OrdLfdPalInd = 6809,
                OrdLfdPalElsa = 5352,
                OrdLfdParOU = 8361,
                OrdLfdVar = 4586,
                OrdVoucherDateTime = now,
                OrdVoucherNumber = "OrderWMS_OrdVoucherN",
                OrdVoucherSeries = "OrderWMS_OrdVoucherS",
                OrdVoucherId = 8501,
                OrdAgencyCode = "OrderWMS_OrdAgencyCode",
                OrdAgencyDescr = "OrderWMS_OrdAgencyDescr",
                OrdAgencyAddress = "OrderWMS_OrdAgencyAddress",
                OrdTelRouteId = 8166,
                OrdVchPlateNr = "OrderWMS_OrdVchPlateNr",
                OrdVchRouteNr = 5233,
                OrdVhrDate = now,
                OrdVhrID = 7061,
                OrdLastUpdateDateTime = now,
                OrdReadyForLoading = 2470,
                Polyline = "OrderWMS_Polyline",
                Warehouse = "OrderWMS_Warehouse",
                Truck = "OrderWMS_Truck",
                WarehouseAddress = "OrderWMS_WarehouseAddress",
                ETA = "OrderWMS_ETA",
                ATA = now,
                DestLat = 222.222f,
                DestLong = 222.222f,
                COE = 222.222f,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery>(Session)
            .CheckProperty(p => p.DateIssued, now)
            .CheckProperty(p => p.PODNumber, 6709)
            .CheckProperty(p => p.QualityStatus, "ProofOfDelivery_QualityStatus")
            .CheckProperty(p => p.QuantityStatus, "ProofOfDelivery_QuantityStatus")
            .CheckProperty(p => p.DeliveryStatus, "ProofOfDelivery_DeliveryStatus")
            .CheckProperty(p => p.PODAttachment, "ProofOfDelivery_PODAttachment")
            .CheckProperty(p => p.Comments, "ProofOfDelivery_Comments")
            .CheckProperty(p => p.DamagedPackaging, true)
            .CheckProperty(p => p.DamagedProducts, true)
            .CheckProperty(p => p.CloseToExpiry, true)
            .CheckReference(p => p.TruckDriver, _order_truckdriver_proofofdelivery)
            .CheckReference(p => p.OrderWMS, _order_orderwms_proofofdelivery)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ProofOfDelivery`")]
        [Order(1)]
        public void ProofOfDelivery_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.ProofOfDelivery>(
                              a => true
                              && a.DateIssued.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.PODNumber + 123 > 0)
                              && (a.QualityStatus != string.Empty && a.QualityStatus != null)
                              && (a.QuantityStatus != string.Empty && a.QuantityStatus != null)
                              && (a.DeliveryStatus != string.Empty && a.DeliveryStatus != null)
                              && (a.PODAttachment != string.Empty && a.PODAttachment != null)
                              && (a.Comments != string.Empty && a.Comments != null)
                              && !a.DamagedPackaging
                              && !a.DamagedProducts
                              && !a.CloseToExpiry
                              && a.TruckDriver != null
                              && a.OrderWMS != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}