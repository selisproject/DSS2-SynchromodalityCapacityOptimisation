// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for AgreementTest and is intended
    ///to contain all AgreementTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Agreement Repository Tests")]
    [Category("Agreement Repository Tests")]
    internal class AgreementTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Agreement`")]
        [Order(0)]
        public void Agreement_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _agreement_agreementstatuses_agreement = new DSS2_SynchromodalityCapacityOptimisation.BO.AgreementStatus
            {
                IssuedBy = "AgreementStatus_IssuedBy",
                Status = "AgreementStatus_Status",
                DateIssued = now,
                ApprovedBySonae = true,
                ApprovedBySupplier = true,
                InProgress = true,
                Active = true,
                UnderRevision = true,
            };
            var _agreement_agreementstatuses_agreement2 = new DSS2_SynchromodalityCapacityOptimisation.BO.AgreementStatus
            {
                IssuedBy = "AgreementStatus_IssuedBy",
                Status = "AgreementStatus_Status",
                DateIssued = now,
                ApprovedBySonae = true,
                ApprovedBySupplier = true,
                InProgress = true,
                Active = true,
                UnderRevision = true,
            };
            var _agreement_items_agreements = new DSS2_SynchromodalityCapacityOptimisation.BO.Item
            {
                SKU = "a562a927-f1f8-471e-8022-b54951710249Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 525,
                SupplierPackSize = 9891,
                InnerPackSize = 8932,
                PalletType = "Item_PalletType",
                PalTI = 4400,
                PalHI = 652,
                UOM = "Item_UOM",
            };
            var _agreement_items_agreements2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Item
            {
                SKU = "1111",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 2318,
                SupplierPackSize = 4024,
                InnerPackSize = 5345,
                PalletType = "Item_PalletType",
                PalTI = 5844,
                PalHI = 243,
                UOM = "Item_UOM",
            };
            var _agreement_supplier_agreements = new DSS2_SynchromodalityCapacityOptimisation.BO.Supplier
            {
                Code = "Supplier_Code",
                Name = "Supplier_Name",
            };
            var _agreement_warehouses_agreements = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _agreement_warehouses_agreements2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
                Title = "Warehouse_Title",
                Address = "Warehouse_Address",
                Telephone = "Warehouse_Telephone",
            };
            var _agreement_stockonhands_agreement = new DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand
            {
                Units = 4285,
                CurrentInventoryDays = 222222.22M,
                StockOnHandDate = now,
                LeadTime = "StockOnHand_LeadTime",
                TargetInventoryDays = 222222.22M,
                FullTrackLoad = true,
                WDDays = true,
            };
            var _agreement_stockonhands_agreement2 = new DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand
            {
                Units = 3968,
                CurrentInventoryDays = 222222.22M,
                StockOnHandDate = now,
                LeadTime = "StockOnHand_LeadTime",
                TargetInventoryDays = 222222.22M,
                FullTrackLoad = true,
                WDDays = true,
            };
            var _agreement_transportuncaps_agreement = new DSS2_SynchromodalityCapacityOptimisation.BO.TransportUnCap
            {
                UOP = "TransportUnCap_UOP",
                PercRound = 2222222222.22222M,
                Tuc1 = 2222222222.22222M,
                SplitOcInd = "TransportUnCap_SplitOcInd",
                Status = "TransportUnCap_Status",
            };
            var _agreement_transportuncaps_agreement2 = new DSS2_SynchromodalityCapacityOptimisation.BO.TransportUnCap
            {
                UOP = "TransportUnCap_UOP",
                PercRound = 2222222222.22222M,
                Tuc1 = 2222222222.22222M,
                SplitOcInd = "TransportUnCap_SplitOcInd",
                Status = "TransportUnCap_Status",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Agreement>(Session)
            .CheckProperty(p => p.FullTruckLoad, true)
            .CheckProperty(p => p.AgreementDocument, "Agreement_AgreementDocument")
            .CheckProperty(p => p.LeadTime, "Agreement_LeadTime")
            .CheckProperty(p => p.DateCreated, now)
            .CheckProperty(p => p.WDDeliveries, true)
            .CheckProperty(p => p.TargetInventoryDays, 3195)
            .CheckProperty(p => p.Profile, "Agreement_Profile")
            .CheckBag(p => p.AgreementStatuses, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.AgreementStatus>
            {
                _agreement_agreementstatuses_agreement,
                _agreement_agreementstatuses_agreement2
            }))
            .CheckBag(p => p.Items, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>
            {
                _agreement_items_agreements,
                _agreement_items_agreements2
            }))
            .CheckReference(p => p.Supplier, _agreement_supplier_agreements)
            .CheckBag(p => p.Warehouses, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>
            {
                _agreement_warehouses_agreements,
                _agreement_warehouses_agreements2
            }))
            .CheckBag(p => p.StockOnHands, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>
            {
                _agreement_stockonhands_agreement,
                _agreement_stockonhands_agreement2
            }))
            .CheckBag(p => p.TransportUnCaps, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.TransportUnCap>
            {
                _agreement_transportuncaps_agreement,
                _agreement_transportuncaps_agreement2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Agreement`")]
        [Order(1)]
        public void Agreement_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Agreement> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Agreement>(
                              a => true
                              && !a.FullTruckLoad
                              && (a.AgreementDocument != string.Empty && a.AgreementDocument != null)
                              && (a.LeadTime != string.Empty && a.LeadTime != null)
                              && a.DateCreated.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && !a.WDDeliveries
                              && (a.TargetInventoryDays + 123 > 0)
                              && (a.Profile != string.Empty && a.Profile != null)
                              && a.AgreementStatuses.Any()
                              && a.Items.Any()
                              && a.Supplier != null
                              && a.Warehouses.Any()
                              && a.StockOnHands.Any()
                              && a.TransportUnCaps.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}