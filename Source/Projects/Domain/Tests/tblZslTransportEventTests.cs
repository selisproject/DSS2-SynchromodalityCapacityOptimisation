// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblZslTransportEventTest and is intended
    ///to contain all tblZslTransportEventTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblZslTransportEvent Repository Tests")]
    [Category("tblZslTransportEvent Repository Tests")]
    internal class tblZslTransportEventTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblZslTransportEvent`")]
        [Order(0)]
        public void tblZslTransportEvent_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _zanardobo_tblzslcustomer_tblzsltransportevent = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCustomer
            {
                CustomerFullName = "tblZslCustomer_CustomerFullName",
            };
            var _zanardobo_tblzslworker_tblzsltransportevent = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslWorker
            {
                WorkerFullName = "tblZslWorker_WorkerFullName",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportEvent>(Session)
            .CheckProperty(p => p.EventDesc, "tblZslTransportEvent_EventDesc")
            .CheckProperty(p => p.EventTime, now)
            .CheckReference(p => p.tblZslCustomer, _zanardobo_tblzslcustomer_tblzsltransportevent)
            .CheckReference(p => p.tblZslWorker, _zanardobo_tblzslworker_tblzsltransportevent)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblZslTransportEvent`")]
        [Order(1)]
        public void tblZslTransportEvent_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportEvent> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportEvent>(
                              a => true
                              && (a.EventDesc != string.Empty && a.EventDesc != null)
                              && a.EventTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.tblZslCustomer != null
                              && a.tblZslWorker != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}