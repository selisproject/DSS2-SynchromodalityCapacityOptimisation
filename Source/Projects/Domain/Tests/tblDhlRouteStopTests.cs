// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblDhlRouteStopTest and is intended
    ///to contain all tblDhlRouteStopTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblDhlRouteStop Repository Tests")]
    [Category("tblDhlRouteStop Repository Tests")]
    internal class tblDhlRouteStopTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblDhlRouteStop`")]
        [Order(0)]
        public void tblDhlRouteStop_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _dhlbo_tbldhlplannedroute_tbldhlroutestop = new DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlPlannedRoute
            {
                EntryDate = now,
                RouteIdentifier = "tblDhlPlannedRoute_RouteIdentifier",
                RouteNumber = "tblDhlPlannedRoute_RouteNumber",
                RouteDescription = "tblDhlPlannedRoute_RouteDescription",
                VehicleIdentifier = "tblDhlPlannedRoute_VehicleIdentifier",
                DriverIdentifier = "tblDhlPlannedRoute_DriverIdentifier",
                DriverName = "tblDhlPlannedRoute_DriverName",
                RouteDate = "tblDhlPlannedRoute_RouteDate",
                LastUpdated = now,
            };
            var _dhlbo_tbldhlroutestopoperation_tbldhlroutestop = new DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStopOperation
            {
                EntryDate = now,
                PlannedRouteIdentifier = "tblDhlRouteStopOperation_PlannedRouteIdentifier",
                RouteStopIdentifier = "tblDhlRouteStopOperation_RouteStopIdentifier",
                OperationDescription = "tblDhlRouteStopOperation_OperationDescription",
                OperationIdentifier = "tblDhlRouteStopOperation_OperationIdentifier",
                OperationCode = "tblDhlRouteStopOperation_OperationCode",
                ClientIdentifier = "tblDhlRouteStopOperation_ClientIdentifier",
                ClientDescription = "tblDhlRouteStopOperation_ClientDescription",
                Weight = "tblDhlRouteStopOperation_Weight",
                Volume = "tblDhlRouteStopOperation_Volume",
                Packages = "tblDhlRouteStopOperation_Packages",
                LinealMeasure = "tblDhlRouteStopOperation_LinealMeasure",
                Pallets = 7967,
                LastUpdated = now,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStop>(Session)
            .CheckProperty(p => p.EntryDate, now)
            .CheckProperty(p => p.PlannedRouteIdentifier, "tblDhlRouteStop_PlannedRouteIdentifier")
            .CheckProperty(p => p.StopIdentifier, "tblDhlRouteStop_StopIdentifier")
            .CheckProperty(p => p.Order, 4936)
            .CheckProperty(p => p.Latitude, "tblDhlRouteStop_Latitude")
            .CheckProperty(p => p.Longitude, "tblDhlRouteStop_Longitude")
            .CheckProperty(p => p.NearEstimatedInitialDate, "tblDhlRouteStop_NearEstimatedInitialDate")
            .CheckProperty(p => p.FarEstimatedInitialDate, "tblDhlRouteStop_FarEstimatedInitialDate")
            .CheckProperty(p => p.NearRequiredInitialDate, "tblDhlRouteStop_NearRequiredInitialDate")
            .CheckProperty(p => p.FarRequiredInitialDate, "tblDhlRouteStop_FarRequiredInitialDate")
            .CheckProperty(p => p.TimeRange, "tblDhlRouteStop_TimeRange")
            .CheckProperty(p => p.Duration, "tblDhlRouteStop_Duration")
            .CheckProperty(p => p.LastUpdated, now)
            .CheckReference(p => p.tblDhlPlannedRoute, _dhlbo_tbldhlplannedroute_tbldhlroutestop)
            .CheckReference(p => p.tblDhlRouteStopOperation, _dhlbo_tbldhlroutestopoperation_tbldhlroutestop)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblDhlRouteStop`")]
        [Order(1)]
        public void tblDhlRouteStop_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStop> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStop>(
                              a => true
                              && a.EntryDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.PlannedRouteIdentifier != string.Empty && a.PlannedRouteIdentifier != null)
                              && (a.StopIdentifier != string.Empty && a.StopIdentifier != null)
                              && (a.Order + 123 > 0)
                              && (a.Latitude != string.Empty && a.Latitude != null)
                              && (a.Longitude != string.Empty && a.Longitude != null)
                              && (a.NearEstimatedInitialDate != string.Empty && a.NearEstimatedInitialDate != null)
                              && (a.FarEstimatedInitialDate != string.Empty && a.FarEstimatedInitialDate != null)
                              && (a.NearRequiredInitialDate != string.Empty && a.NearRequiredInitialDate != null)
                              && (a.FarRequiredInitialDate != string.Empty && a.FarRequiredInitialDate != null)
                              && (a.TimeRange != string.Empty && a.TimeRange != null)
                              && (a.Duration != string.Empty && a.Duration != null)
                              && a.LastUpdated.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.tblDhlPlannedRoute != null
                              && a.tblDhlRouteStopOperation != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}