// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblZslTransportOrderTest and is intended
    ///to contain all tblZslTransportOrderTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblZslTransportOrder Repository Tests")]
    [Category("tblZslTransportOrder Repository Tests")]
    internal class tblZslTransportOrderTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblZslTransportOrder`")]
        [Order(0)]
        public void tblZslTransportOrder_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _zanardobo_transportorder_tblzsltransportorder = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder
            {
                TransportOrderNo = "tblZslTransportOrder_TransportOrderNo",
                OrderYear = 4080,
                DocumentTransportNo = "tblZslTransportOrder_DocumentTransportNo",
                OrderDate = now,
                DepartureCustomerName = "tblZslTransportOrder_DepartureCustomerName",
                DepartureAddress = "tblZslTransportOrder_DepartureAddress",
                DepartureCity = "tblZslTransportOrder_DepartureCity",
                DepartureState = "tblZslTransportOrder_DepartureState",
                DestinationName = "tblZslTransportOrder_DestinationName",
                DestinationAddress = "tblZslTransportOrder_DestinationAddress",
                DestinationCity = "tblZslTransportOrder_DestinationCity",
                DestinationState = "tblZslTransportOrder_DestinationState",
                Qty = 7316,
                OrderWeight = 222222.22M,
                Volume = 222222.22M,
                Pallet = 4791,
                RetiredDate = now,
                DeliveryDate = now,
                Note = "tblZslTransportOrder_Note",
                CallCustomerBefore = "tblZslTransportOrder_CallCustomerBefore",
                Telephone = "tblZslTransportOrder_Telephone",
                DayClosed = "tblZslTransportOrder_DayClosed",
                Urgent = "tblZslTransportOrder_Urgent",
            };
            var _zanardobo_tblzslcustomer_tblzsltransportorder = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCustomer
            {
                CustomerFullName = "tblZslCustomer_CustomerFullName",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder>(Session)
            .CheckProperty(p => p.TransportOrderNo, "tblZslTransportOrder_TransportOrderNo")
            .CheckProperty(p => p.OrderYear, 5822)
            .CheckProperty(p => p.DocumentTransportNo, "tblZslTransportOrder_DocumentTransportNo")
            .CheckProperty(p => p.OrderDate, now)
            .CheckProperty(p => p.DepartureCustomerName, "tblZslTransportOrder_DepartureCustomerName")
            .CheckProperty(p => p.DepartureAddress, "tblZslTransportOrder_DepartureAddress")
            .CheckProperty(p => p.DepartureCity, "tblZslTransportOrder_DepartureCity")
            .CheckProperty(p => p.DepartureState, "tblZslTransportOrder_DepartureState")
            .CheckProperty(p => p.DestinationName, "tblZslTransportOrder_DestinationName")
            .CheckProperty(p => p.DestinationAddress, "tblZslTransportOrder_DestinationAddress")
            .CheckProperty(p => p.DestinationCity, "tblZslTransportOrder_DestinationCity")
            .CheckProperty(p => p.DestinationState, "tblZslTransportOrder_DestinationState")
            .CheckProperty(p => p.Qty, 2692)
            .CheckProperty(p => p.OrderWeight, 222222.22M)
            .CheckProperty(p => p.Volume, 222222.22M)
            .CheckProperty(p => p.Pallet, 2854)
            .CheckProperty(p => p.RetiredDate, now)
            .CheckProperty(p => p.DeliveryDate, now)
            .CheckProperty(p => p.Note, "tblZslTransportOrder_Note")
            .CheckProperty(p => p.CallCustomerBefore, "tblZslTransportOrder_CallCustomerBefore")
            .CheckProperty(p => p.Telephone, "tblZslTransportOrder_Telephone")
            .CheckProperty(p => p.DayClosed, "tblZslTransportOrder_DayClosed")
            .CheckProperty(p => p.Urgent, "tblZslTransportOrder_Urgent")
            .CheckReference(p => p.TransportOrder, _zanardobo_transportorder_tblzsltransportorder)
            .CheckReference(p => p.tblZslCustomer, _zanardobo_tblzslcustomer_tblzsltransportorder)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblZslTransportOrder`")]
        [Order(1)]
        public void tblZslTransportOrder_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder>(
                              a => true
                              && (a.TransportOrderNo != string.Empty && a.TransportOrderNo != null)
                              && (a.OrderYear + 123 > 0)
                              && (a.DocumentTransportNo != string.Empty && a.DocumentTransportNo != null)
                              && a.OrderDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.DepartureCustomerName != string.Empty && a.DepartureCustomerName != null)
                              && (a.DepartureAddress != string.Empty && a.DepartureAddress != null)
                              && (a.DepartureCity != string.Empty && a.DepartureCity != null)
                              && (a.DepartureState != string.Empty && a.DepartureState != null)
                              && (a.DestinationName != string.Empty && a.DestinationName != null)
                              && (a.DestinationAddress != string.Empty && a.DestinationAddress != null)
                              && (a.DestinationCity != string.Empty && a.DestinationCity != null)
                              && (a.DestinationState != string.Empty && a.DestinationState != null)
                              && (a.Qty + 123 > 0)
                              && (a.OrderWeight + 123 > 0)
                              && (a.Volume + 123 > 0)
                              && (a.Pallet + 123 > 0)
                              && a.RetiredDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.DeliveryDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Note != string.Empty && a.Note != null)
                              && (a.CallCustomerBefore != string.Empty && a.CallCustomerBefore != null)
                              && (a.Telephone != string.Empty && a.Telephone != null)
                              && (a.DayClosed != string.Empty && a.DayClosed != null)
                              && (a.Urgent != string.Empty && a.Urgent != null)
                              && a.TransportOrder != null
                              && a.tblZslCustomer != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}