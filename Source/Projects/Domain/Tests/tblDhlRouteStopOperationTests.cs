// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblDhlRouteStopOperationTest and is intended
    ///to contain all tblDhlRouteStopOperationTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblDhlRouteStopOperation Repository Tests")]
    [Category("tblDhlRouteStopOperation Repository Tests")]
    internal class tblDhlRouteStopOperationTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblDhlRouteStopOperation`")]
        [Order(0)]
        public void tblDhlRouteStopOperation_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStopOperation>(Session)
            .CheckProperty(p => p.EntryDate, now)
            .CheckProperty(p => p.PlannedRouteIdentifier, "tblDhlRouteStopOperation_PlannedRouteIdentifier")
            .CheckProperty(p => p.RouteStopIdentifier, "tblDhlRouteStopOperation_RouteStopIdentifier")
            .CheckProperty(p => p.OperationDescription, "tblDhlRouteStopOperation_OperationDescription")
            .CheckProperty(p => p.OperationIdentifier, "tblDhlRouteStopOperation_OperationIdentifier")
            .CheckProperty(p => p.OperationCode, "tblDhlRouteStopOperation_OperationCode")
            .CheckProperty(p => p.ClientIdentifier, "tblDhlRouteStopOperation_ClientIdentifier")
            .CheckProperty(p => p.ClientDescription, "tblDhlRouteStopOperation_ClientDescription")
            .CheckProperty(p => p.Weight, "tblDhlRouteStopOperation_Weight")
            .CheckProperty(p => p.Volume, "tblDhlRouteStopOperation_Volume")
            .CheckProperty(p => p.Packages, "tblDhlRouteStopOperation_Packages")
            .CheckProperty(p => p.LinealMeasure, "tblDhlRouteStopOperation_LinealMeasure")
            .CheckProperty(p => p.Pallets, 7180)
            .CheckProperty(p => p.LastUpdated, now)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblDhlRouteStopOperation`")]
        [Order(1)]
        public void tblDhlRouteStopOperation_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStopOperation> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlRouteStopOperation>(
                              a => true
                              && a.EntryDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.PlannedRouteIdentifier != string.Empty && a.PlannedRouteIdentifier != null)
                              && (a.RouteStopIdentifier != string.Empty && a.RouteStopIdentifier != null)
                              && (a.OperationDescription != string.Empty && a.OperationDescription != null)
                              && (a.OperationIdentifier != string.Empty && a.OperationIdentifier != null)
                              && (a.OperationCode != string.Empty && a.OperationCode != null)
                              && (a.ClientIdentifier != string.Empty && a.ClientIdentifier != null)
                              && (a.ClientDescription != string.Empty && a.ClientDescription != null)
                              && (a.Weight != string.Empty && a.Weight != null)
                              && (a.Volume != string.Empty && a.Volume != null)
                              && (a.Packages != string.Empty && a.Packages != null)
                              && (a.LinealMeasure != string.Empty && a.LinealMeasure != null)
                              && (a.Pallets + 123 > 0)
                              && a.LastUpdated.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}