// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for PathVolumeDetailTest and is intended
    ///to contain all PathVolumeDetailTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("PathVolumeDetail Repository Tests")]
    [Category("PathVolumeDetail Repository Tests")]
    internal class PathVolumeDetailTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `PathVolumeDetail`")]
        [Order(0)]
        public void PathVolumeDetail_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _utilsbo_legs_pathvolumedetail = new DSS2_SynchromodalityCapacityOptimisation.BO.LegVolumeDetails
            {
                FreeSpace = 222222.22M,
                Time = "LegVolumeDetails_Time",
                Distance = 6799,
                CurrentLoad = 222222.22M,
            };
            var _utilsbo_legs_pathvolumedetail2 = new DSS2_SynchromodalityCapacityOptimisation.BO.LegVolumeDetails
            {
                FreeSpace = 222222.22M,
                Time = "LegVolumeDetails_Time",
                Distance = 1436,
                CurrentLoad = 222222.22M,
            };
            var _utilsbo_shipment_pathvolumedetail = new DSS2_SynchromodalityCapacityOptimisation.BO.Shipment
            {
                Owner = "Shipment_Owner",
                DepartureTime = now,
                CurrentStatus = "Shipment_CurrentStatus",
                Temperature = "Shipment_Temperature",
                LoadPercentage = 6788,
                TotalVolume = 222222.22M,
                AverageVolume = 222222.22M,
                MaxTravelTime = 7448,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail>(Session)
            .CheckProperty(p => p.TotalTime, "PathVolumeDetail_TotalTime")
            .CheckBag(p => p.Legs, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.LegVolumeDetails>
            {
                _utilsbo_legs_pathvolumedetail,
                _utilsbo_legs_pathvolumedetail2
            }))
            .CheckReference(p => p.Shipment, _utilsbo_shipment_pathvolumedetail)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `PathVolumeDetail`")]
        [Order(1)]
        public void PathVolumeDetail_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.PathVolumeDetail>(
                              a => true
                              && (a.TotalTime != string.Empty && a.TotalTime != null)
                              && a.Legs.Any()
                              && a.Shipment != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}