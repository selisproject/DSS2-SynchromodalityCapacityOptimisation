// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for LocationTest and is intended
    ///to contain all LocationTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Location Repository Tests")]
    [Category("Location Repository Tests")]
    internal class LocationTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Location`")]
        [Order(0)]
        public void Location_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _driver_driver_employer = new DSS2_SynchromodalityCapacityOptimisation.BO.Driver
            {
                Id = 4501,
                UserName = "58a8ac1d-aaf9-4ec9-9162-973a3b95705dDriver_UserName",
                PasswordHash = "Driver_PasswordHash",
                SecurityStamp = "Driver_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 7149,
                Name = "Driver_Name",
                Email = "Driver_Email",
                PhoneNumber = "Driver_PhoneNumber",
                LockoutEndDate = now,
            };
            var _driver_driver_employer2 = new DSS2_SynchromodalityCapacityOptimisation.BO.Driver
            {
                Id = 3282,
                UserName = "1111",
                PasswordHash = "Driver_PasswordHash",
                SecurityStamp = "Driver_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 7512,
                Name = "Driver_Name",
                Email = "Driver_Email",
                PhoneNumber = "Driver_PhoneNumber",
                LockoutEndDate = now,
            };
            var _utilsbo_coordinates_location = new DSS2_SynchromodalityCapacityOptimisation.BO.Coordinates
            {
                CoordinateX = 222.222d,
                CoordinateY = 222.222d,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.Location>(Session)
            .CheckProperty(p => p.Name, "Location_Name")
            .CheckProperty(p => p.Street, "Location_Street")
            .CheckProperty(p => p.City, "Location_City")
            .CheckProperty(p => p.Country, "Location_Country")
            .CheckProperty(p => p.Number, "Location_Number")
            .CheckProperty(p => p.PostCode, "Location_PostCode")
            .CheckProperty(p => p.Label, "Location_Label")
            .CheckBag(p => p.Driver, (new List<DSS2_SynchromodalityCapacityOptimisation.BO.Driver>
            {
                _driver_driver_employer,
                _driver_driver_employer2
            }))
            .CheckReference(p => p.Coordinates, _utilsbo_coordinates_location)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Location`")]
        [Order(1)]
        public void Location_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.Location> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Location>(
                              a => true
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Street != string.Empty && a.Street != null)
                              && (a.City != string.Empty && a.City != null)
                              && (a.Country != string.Empty && a.Country != null)
                              && (a.Number != string.Empty && a.Number != null)
                              && (a.PostCode != string.Empty && a.PostCode != null)
                              && (a.Label != string.Empty && a.Label != null)
                              && a.Driver.Any()
                              && a.Coordinates != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}