// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for OwnershipCostTest and is intended
    ///to contain all OwnershipCostTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("OwnershipCost Repository Tests")]
    [Category("OwnershipCost Repository Tests")]
    internal class OwnershipCostTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `OwnershipCost`")]
        [Order(0)]
        public void OwnershipCost_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _vehiculebo_vehicule_ownershipcost = new DSS2_SynchromodalityCapacityOptimisation.BO.Vehicule
            {
                OverHeadCost = 222222.22M,
                CalculatedTimeCost = 222222.22M,
                CalculatedDistanceCost = 222222.22M,
                CalculatedOwnershipCost = 222222.22M,
                VehiculeType = "Vehicule_VehiculeType",
                Volume = "Vehicule_Volume",
                CO2perKm = 222222.22M,
                AmortizationType = "Vehicule_AmortizationType",
                MaximumLoad = 222222.22M,
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost>(Session)
            .CheckProperty(p => p.VehiculePurchaseCost, 222222.22M)
            .CheckProperty(p => p.RefrigerationSystemCost, 222222.22M)
            .CheckProperty(p => p.LetteringCost, 222222.22M)
            .CheckProperty(p => p.InterestRate, 222222.22M)
            .CheckProperty(p => p.PaybackPeriod, 222222.22M)
            .CheckProperty(p => p.TotalDistancePerVehicule, 222222.22M)
            .CheckProperty(p => p.AmortizationPeriod, 222222.22M)
            .CheckProperty(p => p.ResidualValue, 222222.22M)
            .CheckProperty(p => p.UtilizationPeriod, 222222.22M)
            .CheckProperty(p => p.Cost, 222222.22M)
            .CheckReference(p => p.Vehicule, _vehiculebo_vehicule_ownershipcost)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `OwnershipCost`")]
        [Order(1)]
        public void OwnershipCost_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.OwnershipCost>(
                              a => true
                              && (a.VehiculePurchaseCost + 123 > 0)
                              && (a.RefrigerationSystemCost + 123 > 0)
                              && (a.LetteringCost + 123 > 0)
                              && (a.InterestRate + 123 > 0)
                              && (a.PaybackPeriod + 123 > 0)
                              && (a.TotalDistancePerVehicule + 123 > 0)
                              && (a.AmortizationPeriod + 123 > 0)
                              && (a.ResidualValue + 123 > 0)
                              && (a.UtilizationPeriod + 123 > 0)
                              && (a.Cost + 123 > 0)
                              && a.Vehicule != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}