// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ItemParameterTest and is intended
    ///to contain all ItemParameterTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ItemParameter Repository Tests")]
    [Category("ItemParameter Repository Tests")]
    internal class ItemParameterTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ItemParameter`")]
        [Order(0)]
        public void ItemParameter_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _orderproposal_item_itemcriterion = new DSS2_SynchromodalityCapacityOptimisation.BO.Item
            {
                SKU = "30137d84-f39c-43b5-8e23-caf665df04c4Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 538,
                SupplierPackSize = 9837,
                InnerPackSize = 7184,
                PalletType = "Item_PalletType",
                PalTI = 3118,
                PalHI = 6988,
                UOM = "Item_UOM",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter>(Session)
            .CheckProperty(p => p.CoverageDays, 1358)
            .CheckProperty(p => p.SupplierCanDeliver, true)
            .CheckProperty(p => p.SupplierQuantity, 6749)
            .CheckProperty(p => p.SupplierComments, "ItemParameter_SupplierComments")
            .CheckReference(p => p.Item, _orderproposal_item_itemcriterion)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ItemParameter`")]
        [Order(1)]
        public void ItemParameter_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.ItemParameter>(
                              a => true
                              && (a.CoverageDays + 123 > 0)
                              && !a.SupplierCanDeliver
                              && (a.SupplierQuantity + 123 > 0)
                              && (a.SupplierComments != string.Empty && a.SupplierComments != null)
                              && a.Item != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}