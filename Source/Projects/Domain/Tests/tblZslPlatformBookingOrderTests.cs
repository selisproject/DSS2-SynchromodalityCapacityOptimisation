// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblZslPlatformBookingOrderTest and is intended
    ///to contain all tblZslPlatformBookingOrderTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblZslPlatformBookingOrder Repository Tests")]
    [Category("tblZslPlatformBookingOrder Repository Tests")]
    internal class tblZslPlatformBookingOrderTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblZslPlatformBookingOrder`")]
        [Order(0)]
        public void tblZslPlatformBookingOrder_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _zanardobo_platformbookingorder_tblzslplatformbookingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder
            {
                BookingDate = now,
                OrderNo = "tblZslPlatformBookingOrder_OrderNo",
                NoIdentity = "tblZslPlatformBookingOrder_NoIdentity",
                FromExtTime = now,
                ToExtTime = now,
                BookStatus = "tblZslPlatformBookingOrder_BookStatus",
                NoPlatform = "tblZslPlatformBookingOrder_NoPlatform",
                NoCourier = "tblZslPlatformBookingOrder_NoCourier",
                Warehouse = "tblZslPlatformBookingOrder_Warehouse",
                Driver = "tblZslPlatformBookingOrder_Driver",
                DriverTelephone = "tblZslPlatformBookingOrder_DriverTelephone",
                Plate = "tblZslPlatformBookingOrder_Plate",
                Trailerplate = "tblZslPlatformBookingOrder_Trailerplate",
                PalletIN = 7243,
                TotalPallet = 8553,
                DateArrived = now,
                TimeArrived = now,
                DateExit = now,
                TImeExit = now,
                RouteTracking_ID = 4470,
            };
            var _zanardobo_tblzslcustomer_tblzslplatformbookingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCustomer
            {
                CustomerFullName = "tblZslCustomer_CustomerFullName",
            };
            var _zanardobo_tblzslbookingtype_tblzslplatformbookingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslBookingType
            {
                BookingTypeName = "tblZslBookingType_BookingTypeName",
            };
            var _zanardobo_tblzsltransportorder_tblzslplatformbookingorder = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportOrder
            {
                TransportOrderNo = "tblZslTransportOrder_TransportOrderNo",
                OrderYear = 8836,
                DocumentTransportNo = "tblZslTransportOrder_DocumentTransportNo",
                OrderDate = now,
                DepartureCustomerName = "tblZslTransportOrder_DepartureCustomerName",
                DepartureAddress = "tblZslTransportOrder_DepartureAddress",
                DepartureCity = "tblZslTransportOrder_DepartureCity",
                DepartureState = "tblZslTransportOrder_DepartureState",
                DestinationName = "tblZslTransportOrder_DestinationName",
                DestinationAddress = "tblZslTransportOrder_DestinationAddress",
                DestinationCity = "tblZslTransportOrder_DestinationCity",
                DestinationState = "tblZslTransportOrder_DestinationState",
                Qty = 5720,
                OrderWeight = 222222.22M,
                Volume = 222222.22M,
                Pallet = 2333,
                RetiredDate = now,
                DeliveryDate = now,
                Note = "tblZslTransportOrder_Note",
                CallCustomerBefore = "tblZslTransportOrder_CallCustomerBefore",
                Telephone = "tblZslTransportOrder_Telephone",
                DayClosed = "tblZslTransportOrder_DayClosed",
                Urgent = "tblZslTransportOrder_Urgent",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder>(Session)
            .CheckProperty(p => p.BookingDate, now)
            .CheckProperty(p => p.OrderNo, "tblZslPlatformBookingOrder_OrderNo")
            .CheckProperty(p => p.NoIdentity, "tblZslPlatformBookingOrder_NoIdentity")
            .CheckProperty(p => p.FromExtTime, now)
            .CheckProperty(p => p.ToExtTime, now)
            .CheckProperty(p => p.BookStatus, "tblZslPlatformBookingOrder_BookStatus")
            .CheckProperty(p => p.NoPlatform, "tblZslPlatformBookingOrder_NoPlatform")
            .CheckProperty(p => p.NoCourier, "tblZslPlatformBookingOrder_NoCourier")
            .CheckProperty(p => p.Warehouse, "tblZslPlatformBookingOrder_Warehouse")
            .CheckProperty(p => p.Driver, "tblZslPlatformBookingOrder_Driver")
            .CheckProperty(p => p.DriverTelephone, "tblZslPlatformBookingOrder_DriverTelephone")
            .CheckProperty(p => p.Plate, "tblZslPlatformBookingOrder_Plate")
            .CheckProperty(p => p.Trailerplate, "tblZslPlatformBookingOrder_Trailerplate")
            .CheckProperty(p => p.PalletIN, 5043)
            .CheckProperty(p => p.TotalPallet, 8024)
            .CheckProperty(p => p.DateArrived, now)
            .CheckProperty(p => p.TimeArrived, now)
            .CheckProperty(p => p.DateExit, now)
            .CheckProperty(p => p.TImeExit, now)
            .CheckProperty(p => p.RouteTracking_ID, 3920)
            .CheckReference(p => p.PlatformBookingOrder, _zanardobo_platformbookingorder_tblzslplatformbookingorder)
            .CheckReference(p => p.tblZslCustomer, _zanardobo_tblzslcustomer_tblzslplatformbookingorder)
            .CheckReference(p => p.tblZslBookingType, _zanardobo_tblzslbookingtype_tblzslplatformbookingorder)
            .CheckReference(p => p.tblZslTransportOrder, _zanardobo_tblzsltransportorder_tblzslplatformbookingorder)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblZslPlatformBookingOrder`")]
        [Order(1)]
        public void tblZslPlatformBookingOrder_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder>(
                              a => true
                              && a.BookingDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.OrderNo != string.Empty && a.OrderNo != null)
                              && (a.NoIdentity != string.Empty && a.NoIdentity != null)
                              && a.FromExtTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.ToExtTime.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.BookStatus != string.Empty && a.BookStatus != null)
                              && (a.NoPlatform != string.Empty && a.NoPlatform != null)
                              && (a.NoCourier != string.Empty && a.NoCourier != null)
                              && (a.Warehouse != string.Empty && a.Warehouse != null)
                              && (a.Driver != string.Empty && a.Driver != null)
                              && (a.DriverTelephone != string.Empty && a.DriverTelephone != null)
                              && (a.Plate != string.Empty && a.Plate != null)
                              && (a.Trailerplate != string.Empty && a.Trailerplate != null)
                              && (a.PalletIN + 123 > 0)
                              && (a.TotalPallet + 123 > 0)
                              && a.DateArrived.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.TimeArrived.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.DateExit.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.TImeExit.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.RouteTracking_ID + 123 > 0)
                              && a.PlatformBookingOrder != null
                              && a.tblZslCustomer != null
                              && a.tblZslBookingType != null
                              && a.tblZslTransportOrder != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}