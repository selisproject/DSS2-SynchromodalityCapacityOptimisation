// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblDhlIncidentTest and is intended
    ///to contain all tblDhlIncidentTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblDhlIncident Repository Tests")]
    [Category("tblDhlIncident Repository Tests")]
    internal class tblDhlIncidentTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblDhlIncident`")]
        [Order(0)]
        public void tblDhlIncident_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlIncident>(Session)
            .CheckProperty(p => p.EntryDate, now)
            .CheckProperty(p => p.MessageType, "tblDhlIncident_MessageType")
            .CheckProperty(p => p.System, "tblDhlIncident_System")
            .CheckProperty(p => p.RouteIdentifier, "tblDhlIncident_RouteIdentifier")
            .CheckProperty(p => p.IncidentIdentifier, "tblDhlIncident_IncidentIdentifier")
            .CheckProperty(p => p.StopIdentifier, "tblDhlIncident_StopIdentifier")
            .CheckProperty(p => p.InternalCode, "tblDhlIncident_InternalCode")
            .CheckProperty(p => p.OperationIdentifier, "tblDhlIncident_OperationIdentifier")
            .CheckProperty(p => p.OperationCode, "tblDhlIncident_OperationCode")
            .CheckProperty(p => p.ClientIdentifier, "tblDhlIncident_ClientIdentifier")
            .CheckProperty(p => p.Latitude, "tblDhlIncident_Latitude")
            .CheckProperty(p => p.Longitude, "tblDhlIncident_Longitude")
            .CheckProperty(p => p.ReasonIdentifier, "tblDhlIncident_ReasonIdentifier")
            .CheckProperty(p => p.ReasonDescription, "tblDhlIncident_ReasonDescription")
            .CheckProperty(p => p.IncidentDatetime, "tblDhlIncident_IncidentDatetime")
            .CheckProperty(p => p.LastUpdated, now)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblDhlIncident`")]
        [Order(1)]
        public void tblDhlIncident_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlIncident> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblDhlIncident>(
                              a => true
                              && a.EntryDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.MessageType != string.Empty && a.MessageType != null)
                              && (a.System != string.Empty && a.System != null)
                              && (a.RouteIdentifier != string.Empty && a.RouteIdentifier != null)
                              && (a.IncidentIdentifier != string.Empty && a.IncidentIdentifier != null)
                              && (a.StopIdentifier != string.Empty && a.StopIdentifier != null)
                              && (a.InternalCode != string.Empty && a.InternalCode != null)
                              && (a.OperationIdentifier != string.Empty && a.OperationIdentifier != null)
                              && (a.OperationCode != string.Empty && a.OperationCode != null)
                              && (a.ClientIdentifier != string.Empty && a.ClientIdentifier != null)
                              && (a.Latitude != string.Empty && a.Latitude != null)
                              && (a.Longitude != string.Empty && a.Longitude != null)
                              && (a.ReasonIdentifier != string.Empty && a.ReasonIdentifier != null)
                              && (a.ReasonDescription != string.Empty && a.ReasonDescription != null)
                              && (a.IncidentDatetime != string.Empty && a.IncidentDatetime != null)
                              && a.LastUpdated.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}