// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for tblZslTransportDetailTest and is intended
    ///to contain all tblZslTransportDetailTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("tblZslTransportDetail Repository Tests")]
    [Category("tblZslTransportDetail Repository Tests")]
    internal class tblZslTransportDetailTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `tblZslTransportDetail`")]
        [Order(0)]
        public void tblZslTransportDetail_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _zanardobo_tblzslplatformbookingorder_tblzsltransportdetail = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslPlatformBookingOrder
            {
                BookingDate = now,
                OrderNo = "tblZslPlatformBookingOrder_OrderNo",
                NoIdentity = "tblZslPlatformBookingOrder_NoIdentity",
                FromExtTime = now,
                ToExtTime = now,
                BookStatus = "tblZslPlatformBookingOrder_BookStatus",
                NoPlatform = "tblZslPlatformBookingOrder_NoPlatform",
                NoCourier = "tblZslPlatformBookingOrder_NoCourier",
                Warehouse = "tblZslPlatformBookingOrder_Warehouse",
                Driver = "tblZslPlatformBookingOrder_Driver",
                DriverTelephone = "tblZslPlatformBookingOrder_DriverTelephone",
                Plate = "tblZslPlatformBookingOrder_Plate",
                Trailerplate = "tblZslPlatformBookingOrder_Trailerplate",
                PalletIN = 6732,
                TotalPallet = 7743,
                DateArrived = now,
                TimeArrived = now,
                DateExit = now,
                TImeExit = now,
                RouteTracking_ID = 1415,
            };
            var _zanardobo_tblzslcustomer_tblzsltransportdetail = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslCustomer
            {
                CustomerFullName = "tblZslCustomer_CustomerFullName",
            };
            var _zanardobo_tblzslworker_tblzsltransportdetail = new DSS2_SynchromodalityCapacityOptimisation.BO.tblZslWorker
            {
                WorkerFullName = "tblZslWorker_WorkerFullName",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportDetail>(Session)
            .CheckProperty(p => p.EventID, 8036)
            .CheckProperty(p => p.Qty, 222222.22M)
            .CheckProperty(p => p.ExtDateStart, now)
            .CheckProperty(p => p.ExtTimeStart, now)
            .CheckProperty(p => p.ExtTimeAction, now)
            .CheckProperty(p => p.RealDateStart, now)
            .CheckProperty(p => p.RealTimeStart, now)
            .CheckProperty(p => p.RealTimeAction, now)
            .CheckReference(p => p.tblZslPlatformBookingOrder, _zanardobo_tblzslplatformbookingorder_tblzsltransportdetail)
            .CheckReference(p => p.tblZslCustomer, _zanardobo_tblzslcustomer_tblzsltransportdetail)
            .CheckReference(p => p.tblZslWorker, _zanardobo_tblzslworker_tblzsltransportdetail)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `tblZslTransportDetail`")]
        [Order(1)]
        public void tblZslTransportDetail_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportDetail> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.tblZslTransportDetail>(
                              a => true
                              && (a.EventID + 123 > 0)
                              && (a.Qty + 123 > 0)
                              && a.ExtDateStart.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.ExtTimeStart.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.ExtTimeAction.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.RealDateStart.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.RealTimeStart.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.RealTimeAction.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.tblZslPlatformBookingOrder != null
                              && a.tblZslCustomer != null
                              && a.tblZslWorker != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}