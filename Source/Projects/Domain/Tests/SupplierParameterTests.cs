// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests.Common;
using DSS2_SynchromodalityCapacityOptimisation.DAL;

namespace DSS2_SynchromodalityCapacityOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for SupplierParameterTest and is intended
    ///to contain all SupplierParameterTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("SupplierParameter Repository Tests")]
    [Category("SupplierParameter Repository Tests")]
    internal class SupplierParameterTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `SupplierParameter`")]
        [Order(0)]
        public void SupplierParameter_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _orderproposal_orderforecast_supplierparameters = new DSS2_SynchromodalityCapacityOptimisation.BO.OrderForecast
            {
                ImportId = 8764,
                Status = "OrderForecast_Status",
                CreatedBy = "OrderForecast_CreatedBy",
                CreatedOn = now,
                StartDate = now,
                EndDate = now,
                State = "OrderForecast_State",
            };
            var _orderproposal_agreement_supplierparameter = new DSS2_SynchromodalityCapacityOptimisation.BO.Agreement
            {
                FullTruckLoad = true,
                AgreementDocument = "Agreement_AgreementDocument",
                LeadTime = "Agreement_LeadTime",
                DateCreated = now,
                WDDeliveries = true,
                TargetInventoryDays = 938,
                Profile = "Agreement_Profile",
            };
            new PersistenceSpecification<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter>(Session)
            .CheckProperty(p => p.CoverageDays, 3385)
            .CheckProperty(p => p.SupplierCanDeliverWholeForecast, true)
            .CheckProperty(p => p.SupplierComments, "SupplierParameter_SupplierComments")
            .CheckProperty(p => p.HasReplied, true)
            .CheckProperty(p => p.SharesExcessStock, true)
            .CheckReference(p => p.OrderForecast, _orderproposal_orderforecast_supplierparameters)
            .CheckReference(p => p.Agreement, _orderproposal_agreement_supplierparameter)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `SupplierParameter`")]
        [Order(1)]
        public void SupplierParameter_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.SupplierParameter>(
                              a => true
                              && (a.CoverageDays + 123 > 0)
                              && !a.SupplierCanDeliverWholeForecast
                              && (a.SupplierComments != string.Empty && a.SupplierComments != null)
                              && !a.HasReplied
                              && !a.SharesExcessStock
                              && a.OrderForecast != null
                              && a.Agreement != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}