// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS2_SynchromodalityCapacityOptimisation.Services.items.DataContracts;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using AutoMapper;

namespace DSS2_SynchromodalityCapacityOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class itemsService : IitemsService
    {
        public ResponseDTO Import(System.Collections.Generic.List<ItemDTO> _items, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputitems = Mapper.Map<System.Collections.Generic.List<ItemDTO>, System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item>>(_items);
                var _import = ImportImplementation(inputitems);
                var result = Mapper.Map<DSS2_SynchromodalityCapacityOptimisation.BO.Response, ResponseDTO>(_import);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("items Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<BaseUnitDTO, DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit, BaseUnitDTO>();
            Mapper.CreateMap<BusinessUnitDTO, DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit, BusinessUnitDTO>();
            Mapper.CreateMap<CategoryDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Category>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Category, CategoryDTO>();
            Mapper.CreateMap<ItemDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Item, ItemDTO>();
            Mapper.CreateMap<ResponseDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Response>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Response, ResponseDTO>();
            Mapper.CreateMap<SubCategoryDTO, DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory, SubCategoryDTO>();
            Mapper.CreateMap<SupplierDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier, SupplierDTO>();
        }

        public static DSS2_SynchromodalityCapacityOptimisation.BO.Response ImportImplementation(System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.Item> items)
        {
            foreach (var item in items ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.Item>())
            {
                if (((item?.SKU ?? "") == null || (item?.SKU ?? "") == ""))
                {
                    return DSS2_SynchromodalityCapacityOptimisation.BO.ResponseExtensions.GenerateResponse("Failed", "Found an item with empty SKU.", "", "-1");
                }
                if ((item?.Exists() ?? false))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "API",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Item exists.");
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item existingItem =  new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetById<DSS2_SynchromodalityCapacityOptimisation.BO.Item>((item?.SKU ?? ""));
                    var _var0 = item?.Supplier?.Code;
                    existingItem.Supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Code == _var0)?.FirstOrDefault();
                    var _var1 = item?.BusinessUnit?.Number;
                    existingItem.BusinessUnit = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit>((b) => b.Number == _var1)?.FirstOrDefault();
                    var _var2 = item?.Category?.Number;
                    var _var3 = item?.BusinessUnit?.Number;
                    existingItem.Category = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Category>((c) => c.Number == _var2 && c.BusinessUnit.Number == _var3)?.FirstOrDefault();
                    var _var4 = item?.SubCategory?.Number;
                    var _var5 = existingItem?.Category?.Id;
                    existingItem.SubCategory = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory>((sc) => sc.Number == _var4 && sc.Category.Id == _var5)?.FirstOrDefault();
                    var _var6 = item?.BaseUnit?.Number;
                    var _var7 = existingItem?.SubCategory?.Id;
                    existingItem.BaseUnit = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit>((bu) => bu.Number == _var6 && bu.SubCategory.Id == _var7)?.FirstOrDefault();
                    existingItem.Description = (item?.Description ?? "");
                    existingItem.UPC = (item?.UPC ?? "");
                    existingItem.PalletSize = (item?.PalletSize ?? 0);
                    existingItem.SupplierPackSize = (item?.SupplierPackSize ?? 0);
                    existingItem.InnerPackSize = (item?.InnerPackSize ?? 0);
                    existingItem.PalletType = (item?.PalletType ?? "");
                    existingItem.PalTI = (item?.PalTI ?? 0);
                    existingItem.PalHI = (item?.PalHI ?? 0);
                    existingItem.UOM = (item?.UOM ?? "");
                    new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(existingItem);
                }
                else
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "API",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "***** New Item imported with SKU:  " + (item?.SKU ?? ""));
                    DSS2_SynchromodalityCapacityOptimisation.BO.Item newItem = new DSS2_SynchromodalityCapacityOptimisation.BO.Item();
                    newItem.SKU = (item?.SKU ?? "");
                    var _var8 = item?.Supplier?.Code;
                    newItem.Supplier = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Supplier>((a) => a.Code == _var8)?.FirstOrDefault();
                    var _var9 = item?.BusinessUnit?.Number;
                    newItem.BusinessUnit = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.BusinessUnit>((b) => b.Number == _var9)?.FirstOrDefault();
                    var _var10 = item?.Category?.Number;
                    newItem.Category = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Category>((c) => c.Number == _var10)?.FirstOrDefault();
                    var _var11 = item?.SubCategory?.Number;
                    var _var12 = item?.Category?.Id;
                    newItem.SubCategory = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.SubCategory>((sc) => sc.Number == _var11 && sc.Category.Id == _var12)?.FirstOrDefault();
                    var _var13 = item?.BaseUnit?.Number;
                    var _var14 = item?.SubCategory?.Id;
                    newItem.BaseUnit = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.BaseUnit>((bu) => bu.Number == _var13 && bu.SubCategory.Id == _var14)?.FirstOrDefault();
                    newItem.Description = (item?.Description ?? "");
                    newItem.UPC = (item?.UPC ?? "");
                    newItem.PalletSize = (item?.PalletSize ?? 0);
                    newItem.SupplierPackSize = (item?.SupplierPackSize ?? 0);
                    newItem.InnerPackSize = (item?.InnerPackSize ?? 0);
                    newItem.PalletType = (item?.PalletType ?? "");
                    newItem.PalTI = (item?.PalTI ?? 0);
                    newItem.PalHI = (item?.PalHI ?? 0);
                    newItem.UOM = (item?.UOM ?? "");
                    new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.Item>(newItem);
                }
            }
            return DSS2_SynchromodalityCapacityOptimisation.BO.ResponseExtensions.GenerateResponse("Succeed", "All items imported successfully.", "", "1");
        }


    }
}