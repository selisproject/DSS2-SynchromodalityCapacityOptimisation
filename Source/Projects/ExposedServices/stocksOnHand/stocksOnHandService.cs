// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS2_SynchromodalityCapacityOptimisation.Services.stocksOnHand.DataContracts;
using DSS2_SynchromodalityCapacityOptimisation.BO;
using AutoMapper;

namespace DSS2_SynchromodalityCapacityOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class stocksOnHandService : IstocksOnHandService
    {
        public ResponseDTO Import(System.Collections.Generic.List<StockOnHandDTO> _stocks, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputstocks = Mapper.Map<System.Collections.Generic.List<StockOnHandDTO>, System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>>(_stocks);
                var _import = ImportImplementation(inputstocks);
                var result = Mapper.Map<DSS2_SynchromodalityCapacityOptimisation.BO.Response, ResponseDTO>(_import);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("stocksOnHand Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<ItemDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Item>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Item, ItemDTO>();
            Mapper.CreateMap<ResponseDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Response>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Response, ResponseDTO>();
            Mapper.CreateMap<StockOnHandDTO, DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand, StockOnHandDTO>();
            Mapper.CreateMap<WarehouseDTO, DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>();
            Mapper.CreateMap<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse, WarehouseDTO>();
        }

        public static DSS2_SynchromodalityCapacityOptimisation.BO.Response ImportImplementation(System.Collections.Generic.List<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand> stocks)
        {
            string message = "";
            foreach (var stock in stocks ?? Enumerable.Empty<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>())
            {
                if ((stock?.Item == null || stock?.Warehouse == null))
                {
                    message = message + (stock?.Id ?? 0) + " ,";
                    continue;
                }
                var _var0 = stock?.Item?.SKU;
                DSS2_SynchromodalityCapacityOptimisation.BO.Item existingItem = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Item>((s) => s.SKU == _var0)?.FirstOrDefault();
                var _var1 = stock?.Warehouse?.Code;
                DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse existingWarehouse = new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().GetAsQueryable<DSS2_SynchromodalityCapacityOptimisation.BO.Warehouse>((w) => w.Code == _var1)?.FirstOrDefault();
                if ((existingItem == null || existingWarehouse == null))
                {
                    message = message + (stock?.Id ?? 0) + " ,";
                    continue;
                }
                DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand newStock = new DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand();
                newStock.Warehouse = existingWarehouse;
                newStock.Item = existingItem;
                newStock.Units = (stock?.Units ?? 0);
                newStock.StockOnHandDate = (stock?.StockOnHandDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                new DSS2_SynchromodalityCapacityOptimisation.DAL.Repository().Save<DSS2_SynchromodalityCapacityOptimisation.BO.StockOnHand>(newStock);
            }
            if (((((message == null || message == "")) == false)))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "API",  DSS2_SynchromodalityCapacityOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error message: " + message);
                return DSS2_SynchromodalityCapacityOptimisation.BO.ResponseExtensions.GenerateResponse("Failed", "Failed to import the entries with Ids " + message, "", "-1");
            }
            return DSS2_SynchromodalityCapacityOptimisation.BO.ResponseExtensions.GenerateResponse("Succeed", "All entries imported successfully.", "", "1");
        }


    }
}