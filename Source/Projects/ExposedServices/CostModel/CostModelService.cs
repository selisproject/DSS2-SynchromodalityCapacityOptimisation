// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS2_SynchromodalityCapacityOptimisation.Services.CostModel.DataContracts;
using DSS2_SynchromodalityCapacityOptimisation.BO;


namespace DSS2_SynchromodalityCapacityOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class CostModelService : ICostModelService
    {
        public decimal? CalculateCost(decimal? driverSalary, decimal? avWorkH, decimal? avServiceH, decimal? vehiculeAnnualHours, decimal? vehiculeAnnualDays, decimal? costOfReplacementVehicule, decimal? daysReplacementVehicule, decimal? amortizationPeriod, decimal? utilisationPeriod, decimal? residualValue, decimal? maintainanceCost, decimal? vehiculeInsuranceCost, decimal? goodsInsurancecCost, decimal? roadTax, decimal? vehiculePurchaseCost, string amortizationType, decimal? totalDistanceDriven, decimal? totalDistanceService, decimal? cNGDistance, decimal? fuelDistance, decimal? dieselDistance, decimal? cNGCost, decimal? cNGConsumption, decimal? fuelCost, decimal? fuelConsumption, decimal? dieselCost, decimal? dieselConsumption, decimal? refriCost, decimal? lettering, decimal? totalDistanceVehicule, decimal? oilCost, decimal? oilConsumption, decimal? tireCost, decimal? distancePerTire, decimal? yearlyReparationCost, decimal? routeDistance, decimal? routeTime, decimal? overHeadFactor, string _RequestSourceIp, string _UserName)
        {
            try
            {
                var inputDriverSalary = driverSalary;
                var inputAvWorkH = avWorkH;
                var inputAvServiceH = avServiceH;
                var inputVehiculeAnnualHours = vehiculeAnnualHours;
                var inputVehiculeAnnualDays = vehiculeAnnualDays;
                var inputCostOfReplacementVehicule = costOfReplacementVehicule;
                var inputDaysReplacementVehicule = daysReplacementVehicule;
                var inputAmortizationPeriod = amortizationPeriod;
                var inputUtilisationPeriod = utilisationPeriod;
                var inputResidualValue = residualValue;
                var inputMaintainanceCost = maintainanceCost;
                var inputVehiculeInsuranceCost = vehiculeInsuranceCost;
                var inputGoodsInsurancecCost = goodsInsurancecCost;
                var inputRoadTax = roadTax;
                var inputVehiculePurchaseCost = vehiculePurchaseCost;
                var inputAmortizationType = amortizationType;
                var inputTotalDistanceDriven = totalDistanceDriven;
                var inputTotalDistanceService = totalDistanceService;
                var inputCNGDistance = cNGDistance;
                var inputFuelDistance = fuelDistance;
                var inputDieselDistance = dieselDistance;
                var inputCNGCost = cNGCost;
                var inputCNGConsumption = cNGConsumption;
                var inputFuelCost = fuelCost;
                var inputFuelConsumption = fuelConsumption;
                var inputDieselCost = dieselCost;
                var inputDieselConsumption = dieselConsumption;
                var inputRefriCost = refriCost;
                var inputLettering = lettering;
                var inputTotalDistanceVehicule = totalDistanceVehicule;
                var inputOilCost = oilCost;
                var inputOilConsumption = oilConsumption;
                var inputTireCost = tireCost;
                var inputDistancePerTire = distancePerTire;
                var inputYearlyReparationCost = yearlyReparationCost;
                var inputRouteDistance = routeDistance;
                var inputRouteTime = routeTime;
                var inputOverHeadFactor = overHeadFactor;
                var _exposedOperation = CalculateCostImplementation(inputDriverSalary, inputAvWorkH, inputAvServiceH, inputVehiculeAnnualHours, inputVehiculeAnnualDays, inputCostOfReplacementVehicule, inputDaysReplacementVehicule, inputAmortizationPeriod, inputUtilisationPeriod, inputResidualValue, inputMaintainanceCost, inputVehiculeInsuranceCost, inputGoodsInsurancecCost, inputRoadTax, inputVehiculePurchaseCost, inputAmortizationType, inputTotalDistanceDriven, inputTotalDistanceService, inputCNGDistance, inputFuelDistance, inputDieselDistance, inputCNGCost, inputCNGConsumption, inputFuelCost, inputFuelConsumption, inputDieselCost, inputDieselConsumption, inputRefriCost, inputLettering, inputTotalDistanceVehicule, inputOilCost, inputOilConsumption, inputTireCost, inputDistancePerTire, inputYearlyReparationCost, inputRouteDistance, inputRouteTime, inputOverHeadFactor);
                var result = _exposedOperation;
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("CostModel Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
        }

        public static decimal? CalculateCostImplementation(decimal? DriverSalary, decimal? AvWorkH, decimal? AvServiceH, decimal? VehiculeAnnualHours, decimal? VehiculeAnnualDays, decimal? CostOfReplacementVehicule, decimal? DaysReplacementVehicule, decimal? AmortizationPeriod, decimal? UtilisationPeriod, decimal? ResidualValue, decimal? MaintainanceCost, decimal? VehiculeInsuranceCost, decimal? GoodsInsurancecCost, decimal? RoadTax, decimal? VehiculePurchaseCost, string AmortizationType, decimal? TotalDistanceDriven, decimal? TotalDistanceService, decimal? CNGDistance, decimal? FuelDistance, decimal? DieselDistance, decimal? CNGCost, decimal? CNGConsumption, decimal? FuelCost, decimal? FuelConsumption, decimal? DieselCost, decimal? DieselConsumption, decimal? RefriCost, decimal? Lettering, decimal? TotalDistanceVehicule, decimal? OilCost, decimal? OilConsumption, decimal? TireCost, decimal? DistancePerTire, decimal? YearlyReparationCost, decimal? RouteDistance, decimal? RouteTime, decimal? OverHeadFactor)
        {
            decimal? OwnershipCost = 0;
            decimal? TotalOwnershipCost = 0;
            decimal? TotalPurchaseCost = VehiculePurchaseCost.GetValueOrDefault(0) + RefriCost.GetValueOrDefault(0) + Lettering.GetValueOrDefault(0) - TireCost.GetValueOrDefault(0);
            if (AmortizationType == "economic")
            {
                OwnershipCost = TotalPurchaseCost.GetValueOrDefault(0) / AmortizationPeriod.GetValueOrDefault(0);
            }
            else if (AmortizationType == "utilization time")
            {
                OwnershipCost = (TotalPurchaseCost.GetValueOrDefault(0) - ResidualValue.GetValueOrDefault(0)) / UtilisationPeriod.GetValueOrDefault(0);
            }
            else
            {
                throw new Exception("Not correct Amortization Type");
            }
            decimal? HourlyDriverCost = DriverSalary.GetValueOrDefault(0) / (AvServiceH.GetValueOrDefault(0) / AvWorkH.GetValueOrDefault(0));
            decimal? HourlyVehiculeCost = (RoadTax.GetValueOrDefault(0) + VehiculeInsuranceCost.GetValueOrDefault(0) + GoodsInsurancecCost.GetValueOrDefault(0) + MaintainanceCost.GetValueOrDefault(0) + (TotalPurchaseCost.GetValueOrDefault(0) / 2 + VehiculePurchaseCost.GetValueOrDefault(0) / 10) * 0.04m + OwnershipCost.GetValueOrDefault(0) + DaysReplacementVehicule.GetValueOrDefault(0) * CostOfReplacementVehicule.GetValueOrDefault(0)) / (VehiculeAnnualHours.GetValueOrDefault(0) * VehiculeAnnualDays.GetValueOrDefault(0));
            decimal? KmCost = CNGCost.GetValueOrDefault(0) * CNGConsumption.GetValueOrDefault(0) * CNGDistance.GetValueOrDefault(0) * 0.01m + FuelCost.GetValueOrDefault(0) * FuelConsumption.GetValueOrDefault(0) * FuelDistance.GetValueOrDefault(0) * 0.01m + DieselCost.GetValueOrDefault(0) * DieselConsumption.GetValueOrDefault(0) * DieselDistance.GetValueOrDefault(0) * 0.01m + TotalOwnershipCost.GetValueOrDefault(0) + OilCost.GetValueOrDefault(0) * OilConsumption.GetValueOrDefault(0) + TireCost.GetValueOrDefault(0) / DistancePerTire.GetValueOrDefault(0) + YearlyReparationCost.GetValueOrDefault(0) / TotalDistanceDriven.GetValueOrDefault(0);
            decimal? RouteDistanceCost = RouteDistance.GetValueOrDefault(0) / (TotalDistanceService.GetValueOrDefault(0) / TotalDistanceDriven.GetValueOrDefault(0)) * KmCost.GetValueOrDefault(0);
            decimal? RouteTimeCost = RouteTime.GetValueOrDefault(0) * (HourlyDriverCost.GetValueOrDefault(0) + HourlyVehiculeCost.GetValueOrDefault(0));
            decimal? TotalRouteCost = (RouteDistanceCost.GetValueOrDefault(0) + RouteTimeCost.GetValueOrDefault(0)) * (1 + OverHeadFactor.GetValueOrDefault(0));
            return TotalRouteCost;
        }


    }
}